{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AACO;;AAEA;;AAEA,6BAA6B,UAAU;;AAEvC,2BAA2B,UAAU;;AAErC,uBAAuB,UAAU;;AAEjC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,cAAc,OAAO,GAAG,YAAY;AACpC;;;;;;;;;;;;;;;;;;;;;;;;;AC1B2E;AACC;AACc;AACd;AACG;AAChC;AACiC;AAC5B;;AAEpD;AACA,yBAAyB,mFAAO,CAAC,+EAAG,+BAA+B,yFAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,kFAAM,CAAC,gFAAK,2EAA2E,gFAAK;AACjH;AACA,sCAAsC,4FAAe,CAAC,4DAAa,2BAA2B,qFAAM,CAAC,qFAAM;AAC3G,CAAC,EAAE,iEAAmB;;AAEf;AACP,IAAI,+FAAmB;AACvB;;AAEO;AACP,IAAI,+FAAmB;AACvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9B4E;AACiD;AACknB;AACvqB;AACuB;AAC1D;AAC+D;AACH;AACsB;AACtD;;AAEjE,wBAAwB,wFAAS;;AAE1B;AACP,WAAW,iFAAI,0BAA0B,mFAAM;AAC/C;;AAEO;AACP,uBAAuB,wEAA0B;AACjD;AACA;AACA;AACA,eAAe,6DAAiB,KAAK,kDAAQ,QAAQ,uEAAyB,CAAC,iEAAmB,uCAAuC,uEAAyB,CAAC,iEAAmB,sCAAsC,4EAA8B,CAAC,iEAAmB,KAAK,kDAAQ;AAC3R;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,kCAAkC,kDAAQ;AAC1C,iCAAiC,2DAAa;AAC9C,6BAA6B,iEAAmB;AAChD,gBAAgB,gDAAI;AACpB;AACA;AACA,6DAA6D,mFAAM,CAAC,iFAAI,4CAA4C,mFAAM;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEO;AACP,QAAQ,mFAAM,mBAAmB,sDAAY;AAC7C;AACA;AACA;AACA,6BAA6B,mEAAqB;AAClD,+BAA+B,8EAAgC;AAC/D;AACA,eAAe,4DAAgB;AAC/B;AACA;;AAEO;AACP;AACA,uBAAuB,mEAAqB;AAC5C,yBAAyB,yEAA2B;AACpD,2BAA2B,8EAAgC;AAC3D;AACA;AACA;AACA;AACA,IAAI,iDAAG,4BAA4B,OAAO,IAAI,OAAO;AACrD,gBAAgB,iFAAG;AACnB,YAAY,mFAAM;AAClB,uBAAuB,sDAAY;AACnC;AACA;AACA;AACA;AACA,KAAK,OAAO,mFAAO,CAAC,iFAAK,OAAO,kFAAM,gBAAgB,qFAAS,KAAK,sDAAY,uBAAuB,qFAAS,KAAK,sDAAY,OAAO,qFAAS,KAAK,sDAAY,OAAO,iFAAK,uBAAuB,qFAAS,KAAK,sDAAY,uBAAuB,qFAAS,KAAK,sDAAY,OAAO,qFAAS,KAAK,sDAAY,oDAAoD,qFAAO;AAC5W;AACA,+BAA+B,mEAAqB;AACpD,+BAA+B,8EAAgC;AAC/D;AACA,mBAAmB,+CAAK,2NAA2N,wDAAc;AACjQ;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mFAAI,CAAC,oFAAO;AAC/B;AACA;AACA,WAAW,6FAAc;AACzB;AACA,eAAe,kFAAK,cAAc,oFAAO,CAAC,mFAAM,2DAA2D,oFAAO,MAAM,sDAAY,SAAS,sDAAY,SAAS,sDAAY,qDAAqD,oFAAS;AAC5O,KAAK,8PAA8P,+CAAK,6CAA6C,sDAAY,wKAAwK,wDAAc;AACvf;;AAEO;AACP;AACA,kDAAkD,sDAAY,OAAO,mEAAqB;AAC1F,yBAAyB,yEAA2B;AACpD,2BAA2B,8EAAgC;AAC3D;AACA;AACA,4BAA4B,qFAAS,mCAAmC,mFAAO,CAAC,iFAAK,OAAO,kFAAM,CAAC,qFAAS,KAAK,sDAAY,MAAM,iFAAK,OAAO,kFAAM,kBAAkB,qFAAS,KAAK,sDAAY,OAAO,qFAAS,KAAK,sDAAY,MAAM,iFAAK,OAAO,kFAAM,kBAAkB,qFAAS,KAAK,sDAAY,OAAO,qFAAS,KAAK,sDAAY,MAAM,iFAAK,OAAO,kFAAM,kBAAkB,qFAAS,KAAK,sDAAY,OAAO,qFAAS,KAAK,sDAAY,MAAM,iFAAK,yBAAyB,qFAAS,KAAK,sDAAY,OAAO,qFAAS,KAAK,sDAAY,yNAAyN,mEAAqB;AACzvB,YAAY,mFAAM,gBAAgB,sDAAY,cAAc,mFAAM;AAClE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+BAA+B,mEAAqB;AACpD,+BAA+B,8EAAgC;AAC/D;AACA,mBAAmB,+CAAK,yNAAyN,wDAAc;AAC/P;AACA;;AAEO;AACP,eAAe,+CAAK,6CAA6C,sDAAY,uGAAuG,kFAAoC,KAAK,wDAAc,UAAU,wDAAc;AACnQ;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6DAAe,2CAA2C,qDAAW;AACrF;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAgC;AAC7D,+BAA+B,yEAA2B;AAC1D;AACA;AACA;AACA,0BAA0B,iDAAG,oBAAoB,SAAS,8BAA8B,mFAAM,kBAAkB,wDAAc,wGAAwG,gFAAG,CAAC,0FAAiB;AAC3P;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAe,2CAA2C,qDAAW;AAC7E;AACA,eAAe,+CAAK;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA,6BAA6B,8EAAgC;AAC7D,+BAA+B,yEAA2B;AAC1D;AACA;AACA;AACA,6CAA6C,+DAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gFAAG,CAAC,0FAAiB;AACtD;AACA;AACA;AACA,2BAA2B,gFAAG,CAAC,0FAAiB;AAChD;AACA;AACA;AACA,2BAA2B,uEAAyB,UAAU,kEAAoB,+DAA+D,kEAAoB;AACrK,QAAQ,6DAAe;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAI,0GAA0G,gDAAQ,sVAAsV,wDAAgB,IAAI,6EAA+B;AACthB;;AAEO;AACP;AACA,qCAAqC,wEAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAAK,sLAAsL,kFAAoC;AAC3P;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kDAAQ;AAC/C,qCAAqC,8EAAgC;AACrE,wCAAwC,4EAA8B;AACtE,gBAAgB,qEAAuB,qBAAqB,qEAAuB;AACnF,4BAA4B,+CAAK,4DAA4D,yDAAiB,CAAC,2EAA6B;AAC5I;AACA;AACA,iEAAiE,+CAAK,8DAA8D,yDAAiB;AACrJ;AACA;AACA;AACA;AACA;AACA,yCAAyC,kDAAQ;AACjD,uCAAuC,8EAAgC;AACvE,0CAA0C,4EAA8B;AACxE,gBAAgB,qEAAuB,uBAAuB,qEAAuB;AACrF,4BAA4B,+CAAK,8DAA8D,yDAAiB,CAAC,2EAA6B;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iFAAI,eAAe,iFAAI;AAC5D;AACA,qCAAqC,mEAAqB;AAC1D,wCAAwC,+CAAK,8DAA8D,yDAAiB,sfAAsf,wDAAc,QAAQ,mDAAS;AACjpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,YAAY,gEAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oDAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5W4E;AACU;AAC+C;AAChG;AACmC;AACe;AACrB;;AAElE,eAAe,wFAAS;;AAEjB;AACP,WAAW,iFAAI,cAAc,mFAAM;AACnC;;AAEO;AACP;AACA,2BAA2B,yEAA2B;AACtD;AACA,sBAAsB,iFAAI,kBAAkB,iFAAI;AAChD,uBAAuB,iFAAI,UAAU,iFAAI;AACzC;AACA,QAAQ,iDAAG;AACX;AACA;AACA;AACA,eAAe,oFAAQ,YAAY,iFAAI;AACvC;AACA;;AAEA;AACA,qBAAqB,qEAAuB,CAAC,8EAAgC;AAC7E;AACA;AACA;AACA;AACA;AACA,yEAAyE,gFAAG,CAAC,0FAAiB;AAC9F;AACA;;AAEO;;AAEA;;AAEA;AACP,oCAAoC,oFAAO,MAAM,qDAAW,UAAU,qDAAW;AACjF,IAAI,8EAAuB;AAC3B;;AAEO;AACP,qDAAqD,qDAAW,aAAa,qDAAW;AACxF,IAAI,8EAAuB;AAC3B;;AAEO;AACP,IAAI,8EAAuB;AAC3B;;;;;;;;;;;;;;;;;;;;ACxDuE;AACM;AACA;;AAEtE;AACP;AACA;AACA,IAAI,mFAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mFAAO;AACnB;AACA,aAAa,EAAE,yFAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA,IAAI,mFAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gFAAI;AAClD;AACA;AACA,iBAAiB,aAAa,yFAAW;AACzC;AACA;AACA;AACA,8CAA8C,gFAAI;AAClD;AACA;AACA,iBAAiB,aAAa,yFAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;;;ACtE4E;AACe;AACd;AACK;AACZ;AACD;;AAErE;AACA,sBAAsB,wFAAS;AAC/B;AACA,CAAC;;AAEM;AACP;AACA,eAAe,wDAAc,CAAC,kFAAM,CAAC,kFAAM,oCAAoC,kFAAM,CAAC,+EAAG,QAAQ,+EAAG,gBAAgB,yFAAW,kCAAkC,yFAAW;AAC5K,iBAAiB,0FAAiB;AAClC,KAAK,IAAI,kFAAK,mBAAmB,6DAAmB;AACpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjB+G;AACqC;AAClE;AAC1B;AACoB;AACH;AACE;AACL;AACY;AACL;AAChC;AACF;;AAE3C,6BAA6B,8CAAI,KAAK,kFAAK,IAAI,kFAAK,IAAI,kFAAK,IAAI,kFAAK,QAAQ,gDAAQ,wBAAwB,kFAAK,kBAAkB,gDAAQ,KAAK,kDAAQ,aAAa,kDAAQ,aAAa,kDAAQ,8BAA8B,kFAAK,QAAQ,wDAAc;;AAEtP;AACP,WAAW,gGAAe;AAC1B;AACA,eAAe,+FAAc,CAAC,oEAAY,eAAe,+FAAc,CAAC,4DAAW;AACnF;AACA,mBAAmB,+FAAc,CAAC,8DAAa,6BAA6B,+FAAc,CAAC,sDAAU,gBAAgB,+FAAc,CAAC,sDAAU,gBAAgB,+FAAc,CAAC,sDAAU,gBAAgB,+FAAc,CAAC,sDAAU,gBAAgB,+FAAc,CAAC,sDAAU,gBAAgB,+FAAc,CAAC,sDAAU,gBAAgB,+FAAc,CAAC,sDAAU,iBAAiB,+FAAc,CAAC,sDAAU,iBAAiB,+FAAc,CAAC,sDAAU,iBAAiB,+FAAc,CAAC,sDAAU;AACzd,+BAA+B,oFAAO;AACtC;AACA;AACA,8BAA8B,+DAAmB,KAAK,yDAAe,KAAK,iFAAI;AAC9E,4DAA4D,8CAAI,wCAAwC,kFAAM,CAAC,+EAAG,eAAe,uDAAa,MAAM,kFAAM,CAAC,sFAAW;AACtK,6BAA6B,2FAAiB;AAC9C,iBAAiB,KAAK,0FAAW,0DAA0D,gDAAQ,uDAAuD,oFAAO,EAAE,qDAAS,cAAc,oDAAU,gBAAgB,4DAAW,0CAA0C,qDAAS,cAAc,oDAAU,kBAAkB,4DAAW;AACvU;AACA;AACA,iCAAiC,8CAAI;AACrC,uBAAuB,iGAAgB,4BAA4B,0DAAW;AAC9E,qCAAqC,+DAAmB,KAAK,yDAAe,KAAK,iFAAI;AACrF,+BAA+B,8CAAI,oDAAoD,kFAAM,CAAC,+EAAG,aAAa,uDAAa,IAAI,kFAAM,CAAC,sFAAW;AACjJ,iCAAiC,2FAAiB;AAClD,qBAAqB,KAAK,0FAAW;AACrC,iBAAiB,mBAAmB,wDAAM,0HAA0H,8CAAI;AACxK,aAAa;AACb,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCiF;AACA;AACsC;AACuE;AACkU;AAC7Y;AAClB;AACpB;AACK;AACvC;AACS;AACY;AACc;;AAEvE,+BAA+B,yFAAe;AACrD;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU,uDAAuD,6FAAU;AACtF;;AAEA;AACA,SAAS,mFAAM;AACf,aAAa,mFAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mFAAM;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEO,sDAAsD,yFAAe;AAC5E;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU,qGAAqG,6FAAU;AACpI;;AAEA;AACA,SAAS,mFAAM;AACf,aAAa,mFAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mFAAM;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEO,mCAAmC,yFAAe;AACzD;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU,+DAA+D,6FAAU;AAC9F;;AAEA;AACA,SAAS,mFAAM;AACf,aAAa,mFAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mFAAM;AACpgFAAK,UAAU,gFAAK;AAC/B;AACA,uBAAuB,8CAAI,QAAQ,8CAAI;AACvC;AACA;AACA,uBAAuB,8CAAI;AAC3B;AACA,KAAK;AACL;;AAEO;AACP;AACA;;AAEA;AACA;AACA,WAAW,kFAAM,CAAC,+EAAK,eAAe,+EAAK,CAAC,gFAAO,EAAE,kFAAM,+BAA+B,+EAAK,yFAAyF,0FAAW,wBAAwB,0FAAW;AACtO;;AAEA;AACA,yBAAyB,gFAAI,6BAA6B,gFAAI;AAC9D;AACA;AACA;AACA,2DAA2D,kDAAQ,qCAAqC,kDAAQ,qCAAqC,kDAAQ,oCAAoC,kDAAQ,eAAe,kDAAQ;AAChO;AACA,2BAA2B,gDAAM,KAAK,kDAAQ,kDAAkD,4EAA8B,CAAC,wEAA0B;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,qBAAqB,0FAAW,0BAA0B,0FAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,iGAAe;AAC1B;AACA,eAAe,gGAAc,CAAC,uDAAS,CAAC,mDAAQ,cAAc,gGAAc,CAAC,uDAAS,CAAC,kDAAO;AAC9F;AACA,mBAAmB,kGAAgB,qsBAAqsB,gDAAM,KAAK,8DAAU,8BAA8B,iEAAa,+BAA+B,8DAAU,8BAA8B,iEAAa,+BAA+B,8DAAU,8BAA8B,iEAAa;AACh9B;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;;AAEO;AACP,gBAAgB,oFAAO,CAAC,gFAAK,UAAU,oFAAO,CAAC,gFAAK;AACpD;AACA;AACA;AACA;AACA,mCAAmC,iFAAI,WAAW,iFAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mFAAO;AACX,QAAQ,mFAAO;AACf;AACA;AACA;AACA,SAAS,EAAE,0FAAW,OAAO,mFAAM,CAAC,iFAAI;AACxC,KAAK,EAAE,0FAAW,OAAO,mFAAM;AAC/B,kCAAkC,gFAAK;AACvC;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAS;AAChC;AACA;AACA;AACA,uBAAuB,mDAAS;AAChC;AACA,KAAK;AACL;AACA;;AAEO;AACP,2BAA2B,gFAAI;AAC/B,+BAA+B,gFAAI,CAAC,oFAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mFAAM,MAAM,sFAAW,KAAK,8CAAI,QAAQ,8CAAI;AACxE;AACA;AACA;AACA;AACA,gDAAgD,uDAAa;AAC7D;AACA;AACA,iDAAiD,uDAAa;AAC9D;AACA;AACA,iDAAiD,uDAAa;AAC9D;AACA;AACA,iDAAiD,uDAAa;AAC9D;AACA;AACA,gDAAgD,uDAAa;AAC7D;AACA;AACA,iDAAiD,uDAAa;AAC9D;AACA;AACA,iDAAiD,uDAAa;AAC9D;AACA;AACA,iDAAiD,uDAAa;AAC9D;AACA;AACA;AACA;AACA,0CAA0C,mDAAS,uCAAuC,oDAAU;AACpG,4BAA4B,mFAAM,MAAM,sFAAW,KAAK,8CAAI,IAAI,mFAAM,iBAAiB,mFAAM,aAAa,sFAAW;AACrH;AACA;AACA;AACA,4BAA4B,mFAAM,MAAM,sFAAW,6BAA6B,8CAAI,QAAQ,sDAAY,qCAAqC,8CAAI,QAAQ,sDAAY,qCAAqC,8CAAI,QAAQ,sDAAY,qCAAqC,8CAAI,QAAQ,sDAAY,qCAAqC,8CAAI,QAAQ,sDAAY,qCAAqC,8CAAI,QAAQ,sDAAY,qCAAqC,8CAAI,QAAQ,sDAAY,qCAAqC,8CAAI,QAAQ,sDAAY,aAAa,8CAAI;AACpiB;AACA;AACA,SAAS,IAAI,kFAAK,mBAAmB,0FAAW;AAChD,gBAAgB,mFAAM,eAAe,sFAAW;AAChD,KAAK,GAAG,kFAAK,IAAI,kFAAK,KAAK,0FAAW;AACtC;AACA,0BAA0B,uFAAU,wBAAwB,uFAAU;AACtE;AACA;AACA,uBAAuB,8CAAI,QAAQ,8CAAI,GAAG,oFAAO,kBAAkB,wFAAW,mFAAmF,oFAAO,kBAAkB,wFAAW,iHAAiH,oFAAO,kBAAkB,wFAAW,mFAAmF,oFAAO,kBAAkB,wFAAW;AACjd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,wDAAc;AACrC;AACA;AACA,uBAAuB,wDAAc,IAAI,iEAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAQ;AACrC,sFAAsF,wDAAc;AACpG,mBAAmB,+CAAK,gBAAgB,yDAAiB,WAAW,8EAAgC,6CAA6C,uFAAyC,wKAAwK,sDAAY,mEAAmE,sDAAY,mCAAmC,sDAAY,mCAAmC,sDAAY,mCAAmC,sDAAY;AAC1kB,wDAAwD,aAAa;AACrE,SAAS,4EAA4E,kFAAoC;AACzH;AACA,uBAAuB,yFAAY,4BAA4B,oFAAO,4BAA4B,oFAAO,iCAAiC,mDAAS;AACnJ,qBAAqB,yFAAY,4BAA4B,oFAAO,6BAA6B,oFAAO,oCAAoC,mDAAS;AACrJ,yBAAyB,yFAAY,6BAA6B,oFAAO,6BAA6B,oFAAO,uCAAuC,mDAAS;AAC7J,wBAAwB,yFAAY,6BAA6B,oFAAO,kCAAkC,oFAAO,yCAAyC,mDAAS;AACnK,sBAAsB,yFAAY,6BAA6B,oFAAO,kCAAkC,oFAAO,uCAAuC,mDAAS;AAC/J,sBAAsB,yFAAY,6BAA6B,oFAAO,6BAA6B,oFAAO,qCAAqC,mDAAS;AACxJ,yBAAyB,yFAAY,6BAA6B,oFAAO,6BAA6B,oFAAO,gCAAgC,mDAAS;AACtJ,2BAA2B,yFAAY,6BAA6B,oFAAO,uCAAuC,sFAAW,yBAAyB,mDAAS;AAC/J,uBAAuB,yFAAY,6BAA6B,oFAAO,iDAAiD,oFAAO,qCAAqC,mDAAS;AAC7K,sBAAsB,yFAAY,6BAA6B,oFAAO,6BAA6B,oFAAO,gCAAgC,mDAAS;AACnJ,wBAAwB,yFAAY,6BAA6B,oFAAO,6BAA6B,oFAAO,qCAAqC,mDAAS;AAC1J,6BAA6B,yFAAY,6BAA6B,oFAAO,6BAA6B,oFAAO,0CAA0C,mDAAS;AACpK,4CAA4C,yDAAiB;AAC7D,4CAA4C,yDAAiB;AAC7D,kBAAkB,gFAAK;AACvB;AACA;AACA;AACA,uBAAuB,oDAAU,+CAA+C,mEAAqB,mCAAmC,8EAAgC,6HAA6H,+CAAK,2MAA2M,wDAAc,QAAQ,mDAAS;AACphB;AACA;AACA;AACA;AACA,KAAK,EAAE,kFAAM;AACb;AACA;AACA,uBAAuB,oDAAU,uBAAuB,kDAAQ,0HAA0H,yDAAiB,aAAa,8EAAgC,+CAA+C,uFAAyC,2TAA2T,yDAAiB,2dAA2d,yDAAiB,sOAAsO,qFAAQ,UAAU,oFAAO;AACv4C;AACA,6BAA6B,mFAAU;AACvC,aAAa,SAAS,yDAAiB;AACvC;AACA;AACA,mBAAmB,kFAAK,aAAa,oDAAU,qwCAAqwC,wDAAc,UAAU,+CAAK,oEAAoE,yDAAiB,0aAA0a,mFAAM,wXAAwX,wDAAc,IAAI,iEAAmB,0GAA0G,wDAAc,IAAI,iEAAmB,0GAA0G,wDAAc,IAAI,iEAAmB,uVAAuV,wDAAc,2EAA2E,wDAAc,iFAAiF,wDAAc,6EAA6E,wDAAc,4EAA4E,wDAAc,0EAA0E,wDAAc,0EAA0E,wDAAc;AACn5G;AACA;AACA;AACA;AACA,KAAK;AACL,gBAAgB,gFAAK,CAAC,gFAAO;AAC7B,sDAAsD,gFAAK;AAC3D;AACA,mBAAmB,mDAAS;AAC5B,KAAK;AACL,eAAe,wDAAc,gCAAgC,oFAAO,CAAC,kFAAK,CAAC,gFAAO;AAClF;;AAEO;AACP;AACA,yBAAyB,kDAAQ;AACjC,eAAe,oDAAU,wCAAwC,yDAAiB,WAAW,8EAAgC,4BAA4B,uFAAyC;AAClM;;AAEO;AACP,sCAAsC,kFAAM,CAAC,+EAAK;AAClD;AACA;AACA,uBAAuB,sDAAY,CAAC,mFAAM,aAAa,0FAAW,4BAA4B,0FAAW,4CAA4C,oDAAU;AAC/J;AACA;AACA,uBAAuB,sDAAY,aAAa,0FAAW,0CAA0C,oDAAU;AAC/G;AACA;AACA,uBAAuB,sDAAY,aAAa,0FAAW,0CAA0C,oDAAU;AAC/G;AACA;AACA,uBAAuB,sDAAY,aAAa,0FAAW,4CAA4C,oDAAU;AACjH;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACniByG;AACZ;AACmD;AAClE;;AAEvE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gFAAI,CAAC,qFAAS,aAAa,gFAAI,CAAC,oFAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4HAA4H,8CAAI,8CAA8C,8CAAI;AAClL;AACA;AACA;AACA;AACA,sCAAsC,iFAAI,UAAU,iFAAI,gIAAgI,iFAAI,mNAAmN,mFAAM,cAAc,8CAAI,iEAAiE,mFAAM,cAAc,8CAAI,yFAAyF,kDAAQ,2NAA2N,mFAAM,cAAc,8CAAI;AACp1B;AACA;AACA,KAAK,iEAAiE,8CAAI,MAAM,8FAAkB;AAClG;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,4BAA4B,wFAAW,eAAe,yEAA2B;AACjF;AACA;AACA;AACA,qBAAqB,iFAAI,OAAO,iFAAI;AACpC,gCAAgC,iFAAI;AACpC,mBAAmB,oFAAO;AAC1B,oBAAoB,wFAAW,CAAC,8EAAgC,CAAC,6EAA+B;AAChG,2BAA2B,6EAA+B;AAC1D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1F2F;AAC2Q;AAChT;AACuF;AAChC;AAChC;AACW;AACL;AACL;AACG;;AAE1E;AACP;AACA;AACA;AACA;AACA,WAAW,gFAAI;AACf;AACA,iCAAiC,kDAAQ;AACzC,6BAA6B,gDAAI;AACjC;AACA;AACA;AACA,4CAA4C,mFAAM,CAAC,iFAAI;AACvD,kCAAkC,mFAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6CAA6C,iFAAI,UAAU,iFAAI;AAC/D;AACA,uBAAuB,gFAAG,CAAC,0FAAiB;AAC5C,qBAAqB,gFAAG,CAAC,0FAAiB;AAC1C;AACA,6BAA6B,iFAAI,UAAU,iFAAI;AAC/C;AACA;AACA;AACA;AACA,uEAAuE,sDAAY;AACnF,wCAAwC,mFAAM,WAAW,8CAAI,mCAAmC,sDAAY,sDAAsD,mFAAM,WAAW,8CAAI,mCAAmC,sDAAY,gEAAgE,mFAAM,WAAW,8CAAI;AAC3T;AACA,kCAAkC,uDAAa;AAC/C;AACA;AACA,gBAAgB,mFAAO;AACvB,mGAAmG,uDAAa;AAChH,iBAAiB,EAAE,yFAAW;AAC9B;AACA;AACA;AACA;AACA,6BAA6B,iFAAI;AACjC,gCAAgC,mFAAM,WAAW,8CAAI;AACrD;AACA,oCAAoC,uDAAa;AACjD;AACA,oFAAoF,gFAAG,CAAC,0FAAiB,OAAO,sDAAY,0CAA0C,sDAAY;AAClL,gBAAgB,mFAAO;AACvB,2GAA2G,uDAAa;AACxH,iBAAiB,EAAE,yFAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6DAAmB,CAAC,mFAAM,0BAA0B,sFAAS;AAChF,KAAK,MAAM,6DAAmB,CAAC,kFAAK,kCAAkC,yFAAW;AACjF;;AAEO;AACP;AACA;AACA;AACA;AACA,6DAA6D,yDAAe;AAC5E,kDAAkD,yDAAe;AACjE,eAAe,6DAAmB,0JAA0J,iFAAM,CAAC,oFAAO;AAC1M;AACA;AACA,4BAA4B,6EAA+B;AAC3D,4BAA4B,6EAA+B;AAC3D;AACA;AACA;AACA;AACA,+BAA+B,gFAAG,CAAC,0FAAiB,UAAU,oGAAsB;AACpF,6BAA6B,gFAAG,CAAC,0FAAiB;AAClD;AACA,+BAA+B,gFAAG,CAAC,0FAAiB,UAAU,oGAAsB;AACpF,6BAA6B,gFAAG,CAAC,0FAAiB;AAClD;AACA;AACA;AACA;AACA,+BAA+B,gEAAkB,MAAM,yFAAU,CAAC,mFAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,8DAAgB;AACjE,2DAA2D,iEAAmB,KAAK,kDAAQ;AAC3F,wDAAwD,kDAAQ;AAChE,2CAA2C,kDAAQ;AACnD,kDAAkD,yFAAU,CAAC,0FAAY,gBAAgB,6DAAiB,mDAAmD,mFAAO,CAAC,+EAAG;AACxK;AACA;AACA,wCAAwC,uEAAyB,qDAAqD,uEAAyB;AAC/I,6BAA6B,EAAE,yFAAW;AAC1C,mCAAmC,gFAAkC;AACrE;AACA;AACA,iBAAiB,EAAE,wEAA0B,MAAM,gFAAkC,OAAO,iFAAI;AAChG;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAa;AAC3C,sEAAsE,gFAAI;AAC1E,+DAA+D,oGAAsB;AACrF,oGAAoG,iFAAI;AACxG,oBAAoB,mFAAO;AAC3B;AACA;AACA;AACA;AACA,qBAAqB,EAAE,yFAAW;AAClC,yBAAyB,6EAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB,yFAAW;AAC1C;AACA,KAAK;AACL;;AAEO;AACP,mBAAmB,iFAAI;AACvB,wCAAwC,6EAA+B,mBAAmB,6EAA+B;AACzH;AACA,iCAAiC,6EAA+B;AAChE,kCAAkC,6EAA+B;AACjE,IAAI,mFAAO;AACX,QAAQ,mFAAO;AACf,mCAAmC,6EAA+B;AAClE;AACA;AACA;AACA;AACA,gBAAgB,mFAAO;AACvB,oBAAoB,mFAAO;AAC3B;AACA,qBAAqB,EAAE,yFAAW;AAClC,iBAAiB,EAAE,yFAAW;AAC9B;AACA,SAAS,EAAE,yFAAW,OAAO,6EAA+B;AAC5D,KAAK,EAAE,yFAAW,OAAO,6EAA+B;AACxD;;AAEO;AACP;AACA;AACA;AACA,0CAA0C,gFAAG,CAAC,0FAAiB;AAC/D,wCAAwC,uEAAyB;AACjE;AACA;AACA;AACA,sBAAsB,gFAAG,CAAC,0FAAiB;AAC3C,yBAAyB,qFAAM,CAAC,qFAAM;AACtC,qGAAqG,gFAAI;AACzG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ,oFAAS;AACjB;AACA;AACA;AACA,YAAY,mFAAO;AACnB,gBAAgB,mFAAO;AACvB;AACA,iBAAiB,EAAE,yFAAW;AAC9B,aAAa,EAAE,yFAAW;AAC1B,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjO4E;AACL;AACU;AACV;AACjB;AACy8B;AACh2B;AACuD;AACrF;AAC5C;AACC;AACjD;AACI;AACJ;;AAErC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,eAAe,wFAAS;;AAEjB,iCAAiC,+EAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO;AACP;AACA;AACA;AACA,mBAAmB,mFAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAI,4JAA4J,gDAAQ,qDAAqD,kDAAQ,wDAAwD,6DAAiB,4GAA4G,6DAAiB;AAC9b;AACA;AACA;AACA,gCAAgC,wEAA0B;AAC1D;AACA;AACA,mBAAmB,8CAAI,0KAA0K,gDAAQ,KAAK,kDAAQ,CAAC,oFAAM,CAAC,kFAAI,mCAAmC,kFAAI,2BAA2B,8CAAI,4CAA4C,oFAAM,CAAC,kFAAI,WAAW,kFAAI,mDAAmD,8CAAI;AACra;AACA;AACA;AACA,YAAY,6DAAe,OAAO,sFAAwC,6BAA6B,qDAAW;AAClH,uBAAuB,mDAAS,sDAAsD,oDAAU;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iFAAG;AAC1B,wBAAwB,qFAAQ,2CAA2C,qFAAQ;AACnF,mCAAmC,uDAAa,UAAU,gFAAG;AAC7D;AACA,6BAA6B,qFAAQ,2CAA2C,qFAAQ;AACxF,mCAAmC,uDAAa,UAAU,gFAAG;AAC7D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,iFAAG;AAC1B,+DAA+D,qFAAU;AACzE;AACA,qCAAqC,oFAAU;AAC/C,qBAAqB;AACrB,mCAAmC,uDAAa,YAAY,mFAAM;AAClE;AACA,oEAAoE,qFAAU;AAC9E;AACA,qCAAqC,oFAAU;AAC/C,qBAAqB;AACrB,mCAAmC,uDAAa,YAAY,mFAAM;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oFAAM;AAClB,uBAAuB,8CAAI,+HAA+H,gDAAQ;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAI,0KAA0K,gDAAQ,6BAA6B,kDAAQ,oOAAoO,kDAAQ;AACle;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAQ,mJAAmJ,wFAAU;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,8BAA8B,kFAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uEAAyB,iFAAiF,uEAAyB;AACxJ,8CAA8C,sDAAY;AAC1D,oBAAoB,6DAAe,qCAAqC,qDAAW;AACnF,uCAAuC,8CAAI,kLAAkL,gDAAQ,qJAAqJ,uEAAyB,4RAA4R,uEAAyB;AACxsB;AACA,yBAAyB,uEAAyB;AAClD,2CAA2C,uFAAS;AACpD,sCAAsC,kFAAI;AAC1C,gDAAgD,sDAAY;AAC5D,oBAAoB,6DAAe,qCAAqC,qDAAW;AACnF,uCAAuC,8CAAI,kKAAkK,gDAAQ;AACrN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,+EAAiC;AAC5F,oDAAoD,sDAAY;AAChE,qHAAqH,8CAAI;AACzH;AACA;AACA,oDAAoD,sDAAY;AAChE,2CAA2C,8CAAI;AAC/C;AACA;AACA;AACA,uCAAuC,8CAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kFAAI,CAAC,qFAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,mFAAK;AAChE;AACA,kHAAkH,oDAAU,QAAQ,+CAAK;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oFAAsC;AACjF,4BAA4B,iDAAG,qBAAqB,OAAO;AAC3D,mKAAmK,oFAAM,cAAc,wDAAc;AACrM,gCAAgC,iDAAG,aAAa,8EAAgC,qBAAqB;AACrG,2CAA2C,+CAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uEAAyB,0CAA0C,qEAAuB,CAAC,8EAAgC,CAAC,6EAA+B,sGAAsG,iFAAG,CAAC,2FAAiB,WAAW,6EAA+B,gEAAgE,6EAA+B;AACrd,oCAAoC,iDAAG,qBAAqB,OAAO;AACnE;AACA;AACA;AACA,iEAAiE,wDAAc;AAC/E,uEAAuE,oDAAU,QAAQ,+CAAK,8IAA8I,kFAAoC;AAChR;AACA;AACA,4CAA4C,qFAAuC;AACnF,+DAA+D,8CAAI,wHAAwH,gDAAQ,ibAAib,oDAAU,QAAQ,+CAAK,2DAA2D,yDAAiB,gZAAgZ,kFAAoC,KAAK,wDAAc,UAAU,wDAAc,2LAA2L,kFAAI,gBAAgB,8EAAgC,uBAAuB,sDAAU;AACt8C;AACA;AACA;AACA,mEAAmE,oDAAU;AAC7E;AACA;AACA;AACA,yGAAyG,oDAAU,+DAA+D,oDAAU;AAC5L;AACA;AACA;AACA;AACA,2DAA2D,oDAAU;AACrE;AACA;AACA;AACA,2DAA2D,oDAAU;AACrE;AACA;AACA;AACA;AACA;AACA,mDAAmD,oDAAU;AAC7D;AACA;AACA;AACA,4PAA4P,oDAAU,QAAQ,+CAAK,4bAA4b,wEAA0B,4DAA4D,oDAAU,QAAQ,+CAAK,0LAA0L,kFAAoC,wHAAwH,wEAA0B,+HAA+H,oDAAU,QAAQ,+CAAK,gaAAga,oDAAU,QAAQ,+CAAK,oYAAoY,oDAAU,6EAA6E,wEAA0B,4DAA4D,oDAAU,QAAQ,+CAAK,0LAA0L,kFAAoC,wHAAwH,wEAA0B,+HAA+H,oDAAU,QAAQ,+CAAK,gaAAga,oDAAU,QAAQ,+CAAK,oYAAoY,oDAAU,6EAA6E,wEAA0B,4DAA4D,oDAAU,QAAQ,+CAAK,0LAA0L,kFAAoC,wHAAwH,wEAA0B,+HAA+H,oDAAU,QAAQ,+CAAK,gaAAga,oDAAU,QAAQ,+CAAK,oYAAoY,oDAAU,wFAAwF,oDAAU,QAAQ,+CAAK,8LAA8L,wFAA0C,kDAAkD,kFAAoC,8NAA8N,oDAAU,QAAQ,+CAAK,wcAAwc,oDAAU,QAAQ,+CAAK,8LAA8L,wFAA0C,kDAAkD,kFAAoC,8NAA8N,oDAAU,QAAQ,+CAAK,qYAAqY,oDAAU;AACptO,iCAAiC,kDAAO;AACxC;AACA,8CAA8C,oFAAM,CAAC,kFAAI,iDAAiD,wFAA0C,sBAAsB,6EAA+B,qCAAqC,uFAAyC,yBAAyB,6EAA+B,oBAAoB,yDAAiB,yBAAyB,8EAAgC,CAAC,6EAA+B;AAC7c;AACA,SAAS,gBAAgB,mFAAK;AAC9B;AACA,2BAA2B,8CAAI;AAC/B,iBAAiB,kFAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,wEAA0B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,4EAA8B,CAAC,2DAAa,CAAC,iEAAmB;AACvH,mDAAmD,gDAAI;AACvD;AACA;AACA,uFAAuF,oFAAM,CAAC,kFAAI,kDAAkD,oFAAM;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,sDAAsD,kFAAI,oBAAoB,kFAAI;AAClF;AACA;AACA,uEAAuE,kFAAI;AAC3E,oDAAoD,wFAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,+CAA+C,8CAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,kFAAI,kBAAkB,kFAAI;AAC3D;AACA;AACA;AACA,qDAAqD,kFAAI;AACzD,kCAAkC,wFAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mCAAmC,8CAAI;AACvC;AACA;AACA;AACA,+BAA+B,8DAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yEAA2B;AAC7D,sCAAsC,oFAAM;AAC5C,gBAAgB,yFAAW,CAAC,8EAAgC,CAAC,6EAA+B,+BAA+B,6EAA+B;AAC1J,oBAAoB,6EAA+B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,YAAY,oFAAM;AAClB,mCAAmC,yEAA2B;AAC9D,gBAAgB,qEAAuB,CAAC,8EAAgC,8BAA8B,kDAAQ;AAC9G,sCAAsC,kFAAI;AAC1C,gCAAgC,6EAA+B;AAC/D,yCAAyC,iFAAG,CAAC,2FAAiB;AAC9D,mCAAmC,iFAAG,CAAC,2FAAiB;AACxD,+BAA+B,gDAAQ,6BAA6B,iFAAG,CAAC,2FAAiB;AACzF,iBAAiB;AACjB,iFAAiF,wDAAgB,IAAI,yEAA2B;AAChI,8BAA8B,8CAAI,oEAAoE,oFAAM,aAAa,sFAAU;AACnI,4BAA4B,gFAAM;AAClC,iCAAiC,kFAAQ;AACzC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kFAAI,CAAC,qFAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mDAAS,0DAA0D,oDAAU,yHAAyH,mDAAS;AACvS;AACA;AACA;AACA;AACA,gCAAgC,yFAAW,CAAC,yEAA2B;AACvE,sDAAsD,mDAAS;AAC/D;AACA;AACA,gCAAgC,6DAAe,SAAS,sFAAwC,+BAA+B,qDAAW;AAC1I,sDAAsD,mDAAS,0DAA0D,oDAAU;AACnI;AACA;AACA;AACA,kDAAkD,mDAAS;AAC3D;AACA;AACA;AACA;AACA;AACA,yDAAyD,mDAAS,0DAA0D,oDAAU;AACtI;AACA;AACA;AACA,kDAAkD,mDAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oFAAM,iBAAiB,uFAAS;AACxD;AACA,SAAS,IAAI,mFAAK;AAClB,uBAAuB,8CAAI;AAC3B,uBAAuB,8CAAI,8kBAA8kB,wDAAgB,QAAQ,0DAAgB,0LAA0L,wDAAgB,YAAY,wDAAgB,QAAQ,0DAAgB,4JAA4J,wDAAgB,QAAQ,0DAAgB;AACnlC,uBAAuB,8CAAI,oEAAoE,8FAAgB;AAC/G;AACA,oBAAoB,6EAA+B;AACnD,SAAS;AACT,qBAAqB,uFAAa;AAClC,SAAS;AACT;AACA,uBAAuB,8CAAI,kRAAkR,gDAAQ,kQAAkQ,gDAAQ;AAC/jB;AACA,uBAAuB,8CAAI,mNAAmN,wDAAgB;AAC9P;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iFAAG,CAAC,2FAAiB,OAAO,6EAA+B,oDAAoD,oFAAM;AAC3K,8CAA8C,oFAAM,6BAA6B,kFAAI,kEAAkE,wDAAgB,CAAC,kFAAI;AAC5K,uCAAuC,oFAAM,mCAAmC,wDAAgB,8EAA8E,6DAAmB;AACjM;AACA;AACA;AACA;AACA,uEAAuE,wDAAgB,8HAA8H,6DAAmB,oBAAoB,wDAAgB;AAC5Q;AACA;AACA;AACA,wDAAwD,iFAAG,CAAC,2FAAiB,OAAO,6EAA+B,oDAAoD,oFAAM;AAC7K,uDAAuD,kFAAI,+DAA+D,wDAAgB,CAAC,oFAAM,iCAAiC,kFAAI;AACtL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8CAAI,+HAA+H,gDAAQ,sWAAsW,wDAAgB,sIAAsI,6DAAmB;AAC7rB;AACA;AACA;AACA,mCAAmC,8CAAI,iJAAiJ,gDAAQ;AAChM;AACA;AACA;AACA,+BAA+B,8CAAI;AACnC;AACA;AACA;AACA;AACA;AACA,gBAAgB,qFAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1oBgF;AACA;AACV;AACzB;AACO;AAC0B;AACG;AACvC;;AAEnC,2CAA2C,yFAAe;AACjE;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU,0FAA0F,6FAAU;AACzH;;AAEA;AACA,SAAS,mFAAM;AACf,aAAa,mFAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mFAAM;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEA;AACP;AACA;AACA;AACA;AACA,eAAe,sDAAY;AAC3B;;AAEO;AACP,0CAA0C,sDAAW;AACrD;;AAEO;AACP;AACA;AACA;;AAEO;AACP,IAAI,wEAAiB;AACrB;;AAEO;AACP,WAAW,wEAAiB;AAC5B;;AAEO;AACP,WAAW,gGAAe,OAAO,+FAAc,CAAC,uDAAS,CAAC,gDAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iGAAgB;AAC/B,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFiF;AAChC;AACqB;AACY;AACU;AACd;AACd;AACsB;AACN;AACJ;AAC1B;AACW;;AAEtD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP,WAAW,gGAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAO;AACxC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAO;AACpC,SAAS;AACT,eAAe,kGAAiB,CAAC,gGAAe,4BAA4B,gGAAe,OAAO,+FAAc,CAAC,mFAAK,aAAa,iGAAgB,OAAO,gGAAe,OAAO,iGAAgB,CAAC,oFAAO;AACxM,KAAK;AACL;;AAEO;AACP,WAAW,gGAAe;AAC1B,+BAA+B,kFAAI,WAAW,kFAAM,eAAe,kFAAM;AACzE,QAAQ,mFAAO;AACf;AACA,kEAAkE,gEAAiB,oBAAoB,sDAAW;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,0DAAO;AACxD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,0DAAO;AACpD,aAAa;AACb,SAAS;AACT,eAAe,kGAAiB,CAAC,gGAAe,OAAO,sFAAQ;AAC/D,oBAAoB,+EAAM;AAC1B,yBAAyB,uFAAc;AACvC,SAAS,GAAG,gGAAe,OAAO,+FAAc,CAAC,mFAAK,aAAa,iGAAgB,OAAO,gGAAe,OAAO,iGAAgB,CAAC,iFAAG,CAAC,gFAAO;AAC5I,KAAK;AACL;;AAEO;AACP,WAAW,gGAAe,OAAO,+FAAc;AAC/C;AACA,eAAe,sFAAM,CAAC,sFAAM;AAC5B,KAAK,gDAAgD,0FAAW;AAChE;AACA,eAAe,+FAAc,qEAAqE,+FAAc,yBAAyB,sFAAM,CAAC,sFAAM,qFAAqF,0FAAW,uBAAuB,+FAAc,+DAA+D,+FAAc,uEAAuE,+FAAc,wEAAwE,+FAAc,4EAA4E,+FAAc,0EAA0E,iGAAgB,KAAK,2DAAiB,qQAAqQ,oFAAM;AACx+B,KAAK;AACL;;AAEO;AACP,WAAW,gGAAe,OAAO,qGAAoB,uBAAuB,sFAAM,CAAC,sFAAM,iFAAiF,0FAAW;AACrL;;AAEO;AACP;AACA;AACA;AACA;AACA,IAAI,mFAAO;AACX,QAAQ,mFAAO;AACf,yCAAyC,gEAAQ;AACjD,gBAAgB,gEAAQ;AACxB;AACA,SAAS,EAAE,0FAAW;AACtB,KAAK,EAAE,0FAAW;AAClB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnIuE;AAC2D;;AAE3H,sBAAsB,gFAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,2DAA2D,6FAAU,gCAAgC,0FAAW,qBAAqB,6FAAU,gCAAgC,yFAAU,sBAAsB,6FAAU,2EAA2E,yFAAU,cAAc,yFAAU;AAC5V;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1B+F;AACgJ;AACjJ;AACT;AACzB;;AAErD,8BAA8B,+EAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,kCAAkC,gFAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,+EAA+E,4FAAS,CAAC,2FAAY,4BAA4B,6FAAU,CAAC,yFAAU,EAAE,yFAAU,8BAA8B,wFAAS,qCAAqC,2FAAY,wCAAwC,8FAAW,CAAC,yFAAU;AAC9U;;AAEO,uBAAuB,gFAAM;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,mDAAmD,2FAAY,UAAU,2FAAY;AAC3G;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP,cAAc,MAAM,SAAS,QAAQ,WAAW;AAChD;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACP;AACA;;AAEO;AACP;AACA;;AAEO,oCAAoC,yFAAe;AAC1D;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU,mEAAmE,6FAAU;AAClG;;AAEA;AACA,SAAS,mFAAM;AACf,aAAa,mFAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mFAAM;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEO,2BAA2B,+EAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,EAAE,GAAG,EAAE;AACvE;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,mBAAmB,+EAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,mBAAmB,gFAAM;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,+DAA+D,yFAAU,4BAA4B,yFAAU;AACrI;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,0BAA0B,+EAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO;AACP,WAAW,oFAAO;AAClB;;AAEO,4BAA4B,+EAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,yBAAyB,+EAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,wBAAwB,gFAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,+DAA+D,yFAAU,kGAAkG,2FAAY,qCAAqC,2FAAY,mBAAmB,6FAAU,CAAC,yFAAU,EAAE,yFAAU,gBAAgB,yFAAU,eAAe,yFAAU;AACrW;;AAEO,mBAAmB,+EAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU,6EAA6E,yFAAU;AAC5G;;AAEO,wBAAwB,+EAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,wBAAwB,gFAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,0DAA0D,yFAAU,eAAe,yFAAU,4BAA4B,wFAAS;AACxJ;;AAEO;AACP;AACA;;AAEO,6BAA6B,+EAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU,gKAAgK,yFAAU,aAAa,yFAAU;AACtN;;AAEO,8BAA8B,gFAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,kLAAkL,2FAAY,mBAAmB,yFAAU,2BAA2B,wFAAS,kBAAkB,wFAAS,yBAAyB,yFAAU,oBAAoB,yFAAU,qBAAqB,yFAAU,aAAa,yFAAU,gBAAgB,wFAAS;AAChc;;AAEO;AACP;AACA;;AAEO,oBAAoB,gFAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,iMAAiM,4FAAS,CAAC,yFAAU,4BAA4B,4FAAS,CAAC,yFAAU,qBAAqB,yFAAU,sBAAsB,yFAAU,6BAA6B,yFAAU,mCAAmC,2FAAY,6DAA6D,wFAAS,4BAA4B,wFAAS,2BAA2B,wFAAS,iBAAiB,yFAAU,uBAAuB,yFAAU,mBAAmB,2FAAY,kBAAkB,2FAAY;AACxrB;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iFAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,mBAAmB,iFAAI;AACvB;AACA;AACA;AACA,mBAAmB,iFAAI;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,mBAAmB,mFAAM;AACzB;AACA;AACA;AACA,mBAAmB,mFAAM;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO,yBAAyB,+EAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,2BAA2B,gFAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,gEAAgE,4FAAS,CAAC,yEAAkB,uBAAuB,yFAAU,cAAc,yFAAU,kBAAkB,wFAAS,0BAA0B,wFAAS,2BAA2B,yFAAU;AAC9Q;;AAEO;AACP,WAAW,mFAAM;AACjB;;AAEO;AACP,WAAW,iFAAI;AACf;;AAEO,yBAAyB,+EAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,qBAAqB,gFAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,kDAAkD,yFAAU,aAAa,yFAAU,cAAc,yFAAU,cAAc,2FAAY,0BAA0B,yFAAU,kBAAkB,yFAAU,eAAe,4FAAS,mDAAmD,yFAAU,0BAA0B,2FAAY;AACtV;;AAEO;AACP,WAAW,iFAAI;AACf;;AAEO,qBAAqB,gFAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,qKAAqK,2FAAY;AACvM;;AAEO,2BAA2B,gFAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,+DAA+D,0FAAW,mBAAmB,0FAAW,kBAAkB,0FAAW,uBAAuB,0FAAW;AAC7L;;AAEO,qBAAqB,gFAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,oDAAoD,yFAAU,cAAc,6FAAU,wCAAwC,6FAAU,wCAAwC,6FAAU;AAChN;;AAEO,6BAA6B,gFAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,kEAAkE,yFAAU,cAAc,yFAAU,WAAW,4FAAS,CAAC,4FAAS,iCAAiC,4FAAS,CAAC,4FAAS,CAAC,yFAAU,uBAAuB,yFAAU,mBAAmB,4FAAS,uFAAuF,4FAAS;AACpX;;AAEO,+BAA+B,gFAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,oEAAoE,yFAAU,aAAa,yFAAU,YAAY,yFAAU,eAAe,2FAAY,kBAAkB,2FAAY,oBAAoB,2FAAY,mBAAmB,2FAAY,mCAAmC,2FAAY;AACxT;;AAEO;AACP,yBAAyB,gFAAG,CAAC,0FAAiB;AAC9C;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO,6BAA6B,+EAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,4BAA4B,gFAAM;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,+DAA+D,yFAAU,mBAAmB,6FAAU,8CAA8C,yFAAU;AACpL;;AAEO,kCAAkC,+EAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,6FAAU;AACrB;;AAEO,6BAA6B,gFAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,4EAA4E,4FAAS,CAAC,6FAAU,CAAC,yFAAU,EAAE,yFAAU,qBAAqB,4FAAS,CAAC,6FAAU,CAAC,yFAAU,EAAE,yFAAU,mBAAmB,2FAAY,0BAA0B,2FAAY;AAClR;;AAEO;AACP,WAAW,mFAAM,0BAA0B,mFAAM;AACjD;;AAEO;AACP,QAAQ,mFAAM;AACd,eAAe,mFAAM;AACrB;AACA;AACA;AACA;AACA;;AAEO,mBAAmB,gFAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,8CAA8C,yFAAU,WAAW,4FAAS,CAAC,4FAAS,iCAAiC,4FAAS,CAAC,4FAAS,CAAC,yFAAU,wBAAwB,4FAAS,+CAA+C,4FAAS,+GAA+G,4FAAS,2BAA2B,yFAAU,gQAAgQ,wFAAS,6BAA6B,8FAAW,CAAC,2FAAY,cAAc,4FAAS,+FAA+F,8FAAW,+CAA+C,8FAAW,oBAAoB,8FAAW;AACz7B;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO,gCAAgC,gFAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,8FAAW,6EAA6E,yEAAkB,qBAAqB,6FAAU,CAAC,6FAAU,CAAC,yEAAkB,gBAAgB,yEAAkB,kBAAkB,yEAAkB,kBAAkB,yEAAkB,cAAc,6FAAU,CAAC,yEAAkB,kBAAkB,6FAAU,CAAC,yEAAkB;AACtX;;AAEO;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;ACx/BA;AACP;AACA;AACA;AACA,kBAAkB,EAAE,GAAG,EAAE,GAAG,EAAE;AAC9B;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzBqE;AACpB;AACA;AACyF;AAC3D;AAC6D;;AAE5I;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kFAAK;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8DAAI;AACR,IAAI,8DAAI;AACR;AACA,8BAA8B,0DAAO;AACrC,qBAAqB,4DAAU;AAC/B;AACA,QAAQ,gEAAU;AAClB;AACA,0BAA0B,qEAAwB;AAClD,2CAA2C,yEAAY,oFAAoF,qEAAa,wDAAwD,uEAAU,sEAAsE,0EAAkB,iFAAiF,oEAAY;AAC/Y,IAAI,qFAAwB;AAC5B,IAAI,4EAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,oFAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAiB;AAC3C,KAAK;AACL;AACA;AACA;AACA;AACA,qCAAqC,YAAY,GAAG,cAAc,GAAG,aAAa,GAAG,gBAAgB;AACrG;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5GiF;AACmD;AACrC;AACf;AACV;AACC;AACE;AACH;AACW;;AAE1E;AACP,WAAW,gGAAe,OAAO,+FAAc,CAAC,2FAAS,CAAC,2GAAyB,KAAK,4FAAa,KAAK,6FAAW,KAAK,yFAAU,KAAK,8FAAY,WAAW,UAAU;AAC1K;AACA,eAAe,iGAAgB,4DAA4D,yFAAc,6CAA6C,mFAAI,+BAA+B,yFAAc;AACvM,KAAK;AACL;;AAEO;AACP,gBAAgB,mFAAI;AACpB;;AAEO;AACP,IAAI,oFAAO;AACX,YAAY,iFAAK;AACjB,yBAAyB,mFAAI,MAAM,+EAAG,YAAY,EAAE;AACpD,yBAAyB,0FAAiB;AAC1C,aAAa;AACb,yBAAyB,QAAQ,gBAAgB,KAAK;AACtD;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BqE;AACuC;AACU;AAC3C;AACI;AACrB;AACmB;AACpB;AAC0B;;AAE5E;AACP,WAAW,iFAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEO;AACP,WAAW,iFAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEO;AACP,eAAe,gDAAM;AACrB;;AAEA,gCAAgC,qDAAW,SAAS,oDAAU,KAAK,oEAAK,uCAAuC,qDAAW;;AAE1H,+BAA+B,sDAAY,YAAY,mEAAO,QAAQ,yDAAe;;AAErF;AACA,QAAQ,8EAAa;AACrB;AACA;AACA;AACA,eAAe,sEAAK;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,eAAe,qDAAW;AAC1B;;AAEO;AACP,eAAe,qDAAW;AAC1B;;AAEO;AACP,eAAe,qDAAW,sBAAsB,qEAAM,cAAc,wEAAS;AAC7E;;AAEO;AACP,eAAe,qDAAW,sBAAsB,qEAAM;AACtD;;AAEO;AACP,eAAe,qDAAW;AAC1B;;AAEO;AACP,eAAe,qDAAW;AAC1B;;AAEO;AACP,eAAe,qDAAW;AAC1B;;AAEO;AACP,eAAe,qDAAW;AAC1B;;AAEO;AACP,eAAe,qDAAW;AAC1B;;AAEO;AACP,WAAW,iFAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA,yTAAyT,yDAAe,2DAA2D,yDAAe,kEAAkE,yDAAe,uDAAuD,yDAAe,0BAA0B,yDAAe,6BAA6B,sDAAY,yCAAyC,qEAAO,CAAC,sEAAM;AAClrB,yCAAyC,sEAAS;AAClD,yBAAyB,sEAAO;AAChC,gCAAgC,mEAAI,oCAAoC,qEAAI,MAAM,mEAAI;AACtF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,2BAA2B,4EAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0EAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAI;AACzB;AACA;AACA,qBAAqB,qEAAI;AACzB;AACA;AACA,qBAAqB,qEAAI;AACzB;AACA;AACA,qBAAqB,qEAAI;AACzB;AACA;AACA,qBAAqB,qEAAI;AACzB;AACA,KAAK;AACL;;AAEO;AACP,WAAW,kFAAiB,OAAO,iFAAgB,2BAA2B,oDAAU;AACxF;AACA,eAAe,mFAAkB;AACjC,KAAK;AACL;;AAEO;AACP,WAAW,kFAAiB,OAAO,iFAAgB,4BAA4B,qDAAW,2BAA2B,oDAAU;AAC/H;AACA,eAAe,mFAAkB;AACjC,KAAK;AACL;;AAEO;AACP,WAAW,kFAAiB,OAAO,iFAAgB,2BAA2B,oDAAU;AACxF;AACA,eAAe,mFAAkB;AACjC,KAAK;AACL;;AAEO;AACP,WAAW,kFAAiB,OAAO,iFAAgB,4BAA4B,qDAAW,2BAA2B,oDAAU;AAC/H;AACA,eAAe,mFAAkB;AACjC,KAAK;AACL;;AAEO;AACP,WAAW,kFAAiB,OAAO,iFAAgB,4BAA4B,qDAAW,2BAA2B,oDAAU;AAC/H;AACA,eAAe,mFAAkB;AACjC,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzViE;AACiG;;AAE3J,yBAAyB,iEAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,+EAAU;AACrB;;AAEO,qBAAqB,iEAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,+EAAU,0DAA0D,4EAAW,aAAa,4EAAW;AAClH;;AAEO,0BAA0B,iEAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,+EAAU,uEAAuE,4EAAW,cAAc,+EAAU,kDAAkD,+EAAU;AAC3L;;AAEO,4BAA4B,iEAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,+EAAU;AACrB;;AAEO,0BAA0B,kEAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,gFAAW,iEAAiE,4EAAW,oDAAoD,8EAAS,4CAA4C,0EAAS,yBAAyB,gFAAW,CAAC,4EAAW,8BAA8B,gFAAW,2CAA2C,gFAAW,CAAC,2EAAU;AAC9W;;AAEO,8BAA8B,iEAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,+EAAU,2EAA2E,4EAAW,cAAc,+EAAU,kDAAkD,+EAAU,2CAA2C,yEAAQ;AAClP;;AAEO,2BAA2B,kEAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,gFAAW,0EAA0E,2EAAU,oBAAoB,4EAAW,oBAAoB,4EAAW,uBAAuB,+EAAU,8CAA8C,4EAAW,EAAE,4EAAW;AAC/Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GiE;AACqC;AACpD;AAClD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,6CAAK,CAAC,uDAAiB;AAC3C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;AACA,gCAAgC,gCAAgC;AAChE;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,uBAAuB,uDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA,uBAAuB,uDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,8BAA8B,kCAAkC;AAChE;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,sDAAU;AAC9B;AACA,4CAA4C,iDAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA,sBAAsB,iDAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACO;AACP,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,sDAAU;AAC9B,oBAAoB,sDAAU;AAC9B;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAsD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gBAAgB,6CAAK,CAAC,uDAAiB;AACvC;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,6CAAK,CAAC,uDAAiB;AAChD;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA,kDAAkD,6CAAK,CAAC,uDAAiB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACO;AACP;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/yCuE;AACjB;AACJ;AACA;AACE;AACuB;AACnB;AACxD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,+DAAa;AACxB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,+DAAa;AACxB;AACO;AACP,sBAAsB,+DAAiB;AACvC;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACO;AACP;AACA;AACO;AACP,uBAAuB,iBAAiB;AACxC;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,+DAAa;AACxB;AACA;AACA;AACA,4BAA4B,iEAAgB;AAC5C,SAAS;AACT;AACA;AACA,6BAA6B,oEAAsB;AACnD,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,uCAAuC,+DAAa,+CAA+C,iEAAe;AAClH;AACA;AACA;AACA;AACA;AACA,WAAW,+DAAa,UAAU,iEAAe;AACjD;AACO;AACP,wFAAwF,oEAAsB;AAC9G;AACA;AACO;AACP,WAAW,+DAAa;AACxB;AACO,qCAAqC,+DAAiB;AACtD;AACP,WAAW,+DAAa;AACxB;AACA,4CAA4C,iEAAqB;AACjE,2CAA2C,iEAAqB;AAChE;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP,WAAW,+DAAa;AACxB;AACO;AACP,WAAW,+DAAa,sBAAsB,iEAAe;AAC7D;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,+DAAa;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,oEAAsB;AACnD,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2BAA2B,wDAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;;;;;;;AC7J+B;AAC7C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAsB;AACtD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iEAAsB;AAClD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAsB;AACtD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAsB;AAC1D;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjLwwC;AACvuC;AAC+D;AACnD;AACqC;AAC9C;AAC3C;AACO;AACP,wBAAwB,oDAAU;AAClC;AACA;AACO;AACP;AACA,uBAAuB,wEAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,yBAAyB,wEAA0B;AACnD;AACA;AACA;AACA;AACO;AACP,WAAW,wEAA0B;AACrC;AACA;AACO;AACP,WAAW,uFAAyC;AACpD;AACA;AACO;AACP,WAAW,qEAAuB;AAClC;AACA;AACO;AACP,WAAW,sEAAwB;AACnC;AACA;AACO,aAAa,iEAAmB;AACvC;AACO,YAAY,gEAAkB;AACrC;AACO,YAAY,gEAAkB;AACrC;AACO;AACP,WAAW,wEAA0B;AACrC;AACA;AACO;AACP,WAAW,iEAAmB;AAC9B;AACA;AACO;AACP,WAAW,gEAAkB;AAC7B;AACA;AACO;AACP,WAAW,wEAA0B;AACrC;AACA;AACO;AACP;AACA,eAAe,wEAA0B,CAAC,qDAAW;AACrD;AACA;AACA,eAAe,wEAA0B;AACzC;AACA;AACA;AACO;AACP,WAAW,qEAAuB;AAClC;AACA;AACO;AACP,WAAW,oEAAsB;AACjC;AACA;AACO;AACP,WAAW,qEAAuB;AAClC;AACA;AACO;AACP,WAAW,sEAAwB;AACnC;AACA;AACO;AACP,WAAW,qEAAuB;AAClC;AACA;AACO;AACP,WAAW,sEAAwB;AACnC;AACA;AACO;AACP,WAAW,qEAAuB;AAClC;AACA;AACO;AACP,WAAW,sEAAwB;AACnC;AACA;AACO;AACP,WAAW,sEAAwB;AACnC;AACA;AACO;AACP,WAAW,sEAAwB;AACnC;AACA;AACO;AACP,WAAW,uEAAyB;AACpC;AACA;AACO;AACP,WAAW,kEAAoB;AAC/B;AACA;AACO;AACP,WAAW,oEAAsB;AACjC;AACA;AACO;AACP,WAAW,mEAAqB;AAChC;AACA;AACO;AACP,WAAW,kDAAQ;AACnB;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,gDAAQ;AACnB;AACA;AACO;AACP,WAAW,mDAAU;AACrB;AACA;AACO,iBAAiB,iEAAmB;AAC3C;AACO,gBAAgB,gEAAkB;AACzC;AACO;AACP,WAAW,6EAA+B;AAC1C;AACA;AACO;AACP,WAAW,gFAAkC;AAC7C;AACA;AACO;AACP,WAAW,6EAA+B;AAC1C;AACA;AACO;AACP,WAAW,6EAA+B;AAC1C;AACA;AACO;AACP,WAAW,4EAA8B;AACzC;AACA;AACO;AACP,WAAW,mFAAqC;AAChD;AACA;AACO;AACP,WAAW,+EAAiC;AAC5C;AACA;AACO;AACP,WAAW,+EAAiC;AAC5C;AACA;AACO;AACP,WAAW,8EAAgC;AAC3C;AACA;AACO;AACP,WAAW,+EAAiC;AAC5C;AACA;AACO;AACP,WAAW,8EAAgC;AAC3C;AACA;AACO;AACP,WAAW,gFAAkC;AAC7C;AACA;AACO;AACP,WAAW,6EAA+B;AAC1C;AACA;AACO;AACP,WAAW,oFAAsC;AACjD;AACA;AACO;AACP,WAAW,gFAAkC;AAC7C;AACA;AACO;AACP,WAAW,uFAAyC;AACpD;AACA;AACO;AACP,WAAW,6EAA+B;AAC1C;AACA;AACO;AACP,WAAW,+EAAiC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,QAAQ,gDAAQ;AAChB;AACA;AACA;AACA,2BAA2B,iDAAS;AACpC,6CAA6C,6EAA+B,CAAC,wEAA0B;AACvG,iCAAiC,qDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,oBAAoB,iDAAS;AAC7B,sDAAsD,mDAAS,iCAAiC,mDAAS;AACzG,0CAA0C,8CAAI;AAC9C,2BAA2B,kDAAO,CAAC,iDAAO,gCAAgC,8CAAI,0DAA0D,8CAAI;AAC5I;AACA;AACA,+CAA+C,+EAAiC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAe;AACxD,2CAA2C,+EAAiC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAe;AACxD,2CAA2C,+EAAiC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+CAAK;AACzB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,oCAAoC,8CAAI,iBAAiB,6EAA+B,CAAC,8EAAgC,qBAAqB,qDAAW;AACzJ;AACA;AACA;AACA;AACA,+BAA+B,6EAA+B,CAAC,wEAA0B;AACzF;AACA;AACA;AACA,2CAA2C,6CAAG,CAAC,uDAAiB;AAChE,sCAAsC,6BAA6B;AACnE;AACA;AACA;AACA,wBAAwB,+CAAI;AAC5B,0CAA0C,8CAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAI;AAC5B;AACA;AACA;AACA;AACA,0CAA0C,8CAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+CAAK;AACzB;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtVqC;AACkC;AACoG;AACjH;AACa;AAC5B;AACQ;AACnD;AACO,qBAAqB,6CAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,2DAAW,+CAA+C,sDAAU,cAAc,0DAAU,CAAC,sDAAU;AAClH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,kDAAQ;AAC1C;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO,gCAAgC,kDAAQ;AAC/C;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AACtF;AACA;AACA;AACA;AACA,iDAAiD,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AAClH,mBAAmB,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AACpF;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,YAAY,gDAAM,IAAI,kDAAQ;AAC9B;AACA;AACA,iBAAiB,gDAAM,CAAC,oDAAU,IAAI,kDAAQ,gBAAgB,kDAAQ;AACtE,qBAAqB,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AACtF,oBAAoB,qDAAW,IAAI,kDAAQ;AAC3C;AACA;AACA;AACA,kDAAkD,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW,gDAAgD,qDAAW,IAAI,kDAAQ;AAC1L,mBAAmB,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AACpF;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,wCAAwC,wDAAc,0BAA0B,kDAAQ;AACxF;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AACpF;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA,mDAAmD,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,gBAAgB,qDAAW;AACtH,kFAAkF,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,gBAAgB,qDAAW;AACrJ,6BAA6B,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AAC9F;AACA;AACA;AACA;AACO;AACP,gBAAgB,+CAAI;AACpB;AACA;AACA;AACA;AACO;AACP;AACA,WAAW,8CAAG,SAAS,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,oBAAoB,qDAAW;AAC9F;AACA;AACO;AACP;AACO,uCAAuC,qDAAU;AACxD;AACO;AACP;AACA;AACA;AACA;AACA,2DAA2D,qDAAU;AACrE;AACA;AACA,eAAe,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AAChF,KAAK;AACL;AACA;AACO;AACP;AACA,WAAW,qDAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8CAAG,4EAA4E,qDAAU;AACpG;AACA;AACA,eAAe,+CAAK,CAAC,oDAAU,CAAC,qDAAW,CAAC,qDAAW,cAAc,qDAAW;AAChF,KAAK;AACL;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,qDAAW;AACtB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,kDAAQ;AAC3B;AACA;AACA,oBAAoB,qDAAW;AAC/B;AACA;AACA;AACA;AACA,mBAAmB,qDAAW,uBAAuB,qDAAW;AAChE;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO,8BAA8B,kDAAQ;AAC7C;AACO,iCAAiC,kDAAQ;AAChD;AACO,+BAA+B,kDAAQ;AAC9C;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,+BAA+B,+CAAI;AACnC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,iDAAO,IAAI,kDAAQ,sBAAsB,kDAAQ;AAClE;AACA,oBAAoB,oCAAoC;AACxD,2BAA2B,+CAAK,CAAC,oDAAU,CAAC,qDAAW;AACvD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,eAAe,qDAAW;AAC1B;AACA;AACA,kBAAkB,kDAAQ;AAC1B,kCAAkC,QAAQ;AAC1C,kBAAkB,qDAAW,CAAC,qDAAW,yBAAyB,qDAAW;AAC7E;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACO;AACP;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAokBAAkB,qDAAW,CAAC,qDAAW;AACzC,oBAAoB,qDAAW;AAC/B,wBAAwB,+CAAK,CAAC,uDAAa;AAC3C;AACA,YAAY,iDAAO,MAAM,kDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,gBAAgB,qDAAW;AAC3B,oBAAoB,oBAAoB;AACxC,gDAAgD,qDAAW,MAAM,qDAAW;AAC5E;AACA;AACA;AACA;AACO;AACP;AACA,gBAAgB,qDAAW,CAAC,qDAAW,eAAe,qDAAW;AACjE,mCAAmC,+CAAK,CAAC,uDAAa;AACtD,mCAAmC,+CAAK,CAAC,qDAAW;AACpD;AACA;AACA;AACO;AACP;AACA;AACA;AACA,YAAY,iDAAO,IAAI,kDAAQ;AAC/B,wBAAwB,qDAAW;AACnC,2CAA2C,+CAAK,CAAC,uDAAa;AAC9D;AACA,oBAAoB,qDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,gBAAgB,qDAAW;AAC3B,YAAY,kDAAQ;AACpB,oBAAoB,eAAe;AACnC,oBAAoB,qDAAW,CAAC,qDAAW,iCAAiC,qDAAW;AACvF,uCAAuC,+CAAK,CAAC,uDAAa;AAC1D,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,oBAAoB;AACxC,oBAAoB,qDAAW;AAC/B,gBAAgB,kDAAQ;AACxB;AACA,wBAAwB,oBAAoB;AAC5C,wBAAwB,qDAAW;AACnC,wBAAwB,qDAAW,CAAC,qDAAW,CAAC,qDAAW,uBAAuB,qDAAW;AAC7F,yBAAyB,+CAAK,CAAC,uDAAa;AAC5C,gBAAgB,qDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oCAAoC,6CAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,2DAAW,4EAA4E,sDAAU,iBAAiB,sDAAU,SAAS,sDAAU,YAAY,sDAAU,YAAY,sDAAU,aAAa,sDAAU,cAAc,0DAAU,CAAC,sDAAU;AAChQ;AACA;AACO;AACP,2HAA2H,qDAAU;AACrI;AACA;AACO;AACP;AACO;AACP;AACA,oCAAoC,kDAAQ;AAC5C,2BAA2B,qDAAW,OAAO,qDAAW;AACxD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,qDAAU;AAC9C;AACO,+BAA+B,qDAAU;AAChD;AACO,kCAAkC,qDAAU,kDAAkD,kDAAQ;AAC7G;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,+CAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,qDAAW,CAAC,qDAAW;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA,YAAY,qDAAW,MAAM,qDAAW;AACxC,YAAY,iDAAO,IAAI,kDAAQ;AAC/B;AACA;AACA;AACA,qBAAqB,+CAAK,CAAC,uDAAa;AACxC,kBAAkB,qDAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,kBAAkB,qDAAW,MAAM,kDAAQ;AAC3C;AACA;AACA,gBAAgB,qDAAW,MAAM,qDAAW,MAAM,qDAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA,YAAY,qDAAW,MAAM,qDAAW;AACxC,YAAY,iDAAO,IAAI,kDAAQ;AAC/B;AACA;AACA;AACA,qBAAqB,+CAAK,CAAC,uDAAa;AACxC,kBAAkB,qDAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,kBAAkB,qDAAW,MAAM,kDAAQ;AAC3C;AACA;AACA,gBAAgB,qDAAW,MAAM,qDAAW,MAAM,qDAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,+CAAK,CAAC,qDAAW,CAAC,qDAAW,CAAC,qDAAW,CAAC,qDAAW,8CAA8C,qDAAW,2BAA2B,qDAAW,0FAA0F,+CAAK,CAAC,qDAAW,CAAC,qDAAW,CAAC,qDAAW,CAAC,qDAAW,8CAA8C,qDAAW,2BAA2B,qDAAW,CAAC,qDAAW,sBAAsB,kDAAQ;AAC1f;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA,sBAAsB,sBAAsmBAAmB,kDAAQ;AAC3B;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA,mBAAmB,qDAAW,CAAC,qDAAW,uDAAuD,sDAAY,CAAC,qDAAW;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAW,CAAC,qDAAW,CAAC,qDAAW,yDAAyD,sDAAY,CAAC,qDAAW,sFAAsF,sDAAY,CAAC,qDAAW;AACrP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAI;AAC3B;AACA;AACA,4BAA4B,8CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iDAAO;AACxB,gCAAgC,8CAAI;AACpC,8DAA8D,8CAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAI,CAAC,uDAAa;AAC7C;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAK,aAAa,+CAAK;AAC1D,QAAQ,iDAAO;AACf;AACA;AACA;AACA,eAAe,gDAAI,KAAK,iDAAO;AAC/B;AACA;AACA;AACO;AACP;AACA,QAAQ,yDAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC36CwoB;AACzlB;AACD;AACL;AACkF;AACtE;AACjB;AACpC;AACO,yBAAyB,6CAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAAmB,sCAAsC,4DAAqB;AACrG;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU,0CAA0C,0DAAU;AACzE;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAU,sBAAsB,uDAAoB;AACjF;AACA;AACA;AACA,CAAC;AACD;AACO;AACP,QAAQ,2DAAoB,QAAQ,4DAAqB;AACzD,sCAAsC,4DAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAkB;AACrC;AACA;AACA,mBAAmB,yDAAkB;AACrC;AACA;AACA,gBAAgB,0DAAmB;AACnC,uBAAuB,0DAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB;AACnC,uBAAuB,0DAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAe;AAClC;AACA;AACA,mBAAmB,sDAAe;AAClC;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAmB;AACpC;AACA;AACA;AACA,wBAAwB,0DAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAe;AAClC;AACA;AACA,mBAAmB,sDAAe;AAClC;AACA;AACA,iBAAiB,0DAAmB;AACpC;AACA;AACA;AACA,wBAAwB,0DAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAmB;AACvC;AACA;AACA,oBAAoB,0DAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,6CAA6C,wDAAiB;AAC9D;AACA;AACA;AACO;AACP,WAAW,mDAAQ;AACnB;AACA;AACO;AACP;AACA,qEAAqE,2DAAoB;AACzF;AACA;AACA,sEAAsE,2DAAoB,CAAC,0DAAgB,CAAC,qDAAW;AACvH;AACA;AACA,sEAAsE,2DAAoB,CAAC,iEAAsB;AACjH;AACA;AACA;AACO;AACP,QAAQ,iDAAO,IAAI,kDAAQ;AAC3B,qEAAqE,2DAAoB;AACzF;AACA,aAAa,gDAAM,IAAI,kDAAQ;AAC/B,sEAAsE,uDAAgB,CAAC,2DAAoB,CAAC,kDAAQ,kCAAkC,mDAAgB;AACtK;AACA;AACA,sEAAsE,2DAAoB,CAAC,0DAAgB;AAC3G;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAsB;AAChE;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,0CAA0C,iEAAsB,8BAA8B,yDAAkB,CAAC,iEAAsB;AACvI;AACA;AACA,sEAAsE,yDAAkB;AACxF;AACA;AACA;AACO;AACP,QAAQ,uDAAgB;AACxB,yCAAyC,uDAAgB;AACzD;AACA;AACA,yCAAyC,uDAAgB;AACzD;AACA;AACA;AACO;AACP,qCAAqC,uDAAgB;AACrD;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,0DAAmB;AAClC;AACA;AACA;AACO;AACP;AACA,eAAe,yDAAkB;AACjkBAAkB,uDAAgB;AAClC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,qCAAqC,0DAAmB;AACxD;AACA;AACO;AACP,qCAAqC,yDAAkB;AACvD;AACA;AACO;AACP,qCAAqC,0DAAmB;AACxD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAgB;AACzD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAAgB;AACnC;AACA;AACA,mBAAmB,uDAAgB;AACnC;AACA;AACA,gBAAgB,0DAAmB;AACnC,uBAAuB,0DAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAAgB;AACnC;AACA;AACA,mBAAmB,uDAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB;AACnC,uBAAuB,0DAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA,mBAAmB,0DAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0DAAmB,CAAC,uDAAgB,0BAA0B,mDAAgB,qCAAqC,uDAAgB;AAC7K;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,kBAAkB,4DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,4DAAqB;AACpC;AACA;AACA;AACO;AACP;AACA,eAAe,kDAAQ;AACvB;AACA;AACA,kBAAkB,4DAAqB;AACvC,YAAY,iDAAO,IAAI,mDAAS,CAAC,kDAAQ;AACzC,mBAAmB,qDAAW,CAAC,qDAAW,wCAAwC,mDAAS;AAC3F;AACA,wDAAwD,gDAAM,IAAI,mDAAS,CAAC,qDAAW,CAAC,kDAAQ,iCAAiC,kDAAQ;AACzI,mBAAmB,kDAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,eAAe,kDAAQ;AACvB;AACA;AACA,eAAe,4DAAqB;AACpC;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,2DAAoB;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,eAAe,mDAAO;AACtB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4DAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4DAAqB;AAClE;AACA;AACA;AACA,yCAAyC,4DAAqB;AAC9D;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,2DAAoB;AACnC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,yCAAyC,6DAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjlCmC;AACU;AACV;AACnC;AACO,6BAA6B,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO,6BAA6B,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO,6BAA6B,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO,6BAA6B,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO,6BAA6B,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO,6BAA6B,4CAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACkG;AAC/B;AAC5D;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAY;AACpB,QAAQ,sDAAY;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAY;AAC3B,YAAY,sDAAY;AACxB,YAAY,sDAAY;AACxB,YAAY,sDAAY;AACxB,YAAY,sDAAY;AACxB,YAAY,sDAAY;AACxB,YAAY,sDAAY;AACxmDAAS;AACrB,gDAAgD;AAChD,wBAAwB,sEAA4B;AACpD;AACA;AACA;AACA;AACA,yCAAyC,oDAAU;AACnD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oDAAU;AACpD;AACA;AACO;AACP,WAAW,sEAA4B,iBAAiB,oDAAU;AAClE;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChoBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO,gBAAgB,kDAAY;AAC5B,kBAAkB,kDAAY;AAC9B;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpbW;AACI;AACvC,iEAAe,mDAAO,EAAC;AAChB,qBAAqB,mDAAO;AAC5B,oBAAoB,mDAAO;AAC3B,yBAAyB,mDAAO;AAChC,yBAAyB,mDAAO;AAChC,yBAAyB,mDAAO;AAChC;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP,mBAAmB,mDAAO;AAC1B;AACA;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACO;AACP;AACA,gCAAgC,mDAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACO;AACP,yBAAyB,gDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mDAAO;AAC3B;AACA;AACA;AACA,kBAAkB,mDAAO;AACzB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrL0E;AAC1E;AACO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,sCAAsC,oDAAc,EAAE,4CAAM;AAC5D;AACA;AACO;AACP,sCAAsC,kDAAY;AAClD;AACA;AACO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,2CAA2C,6CAAO;AAClD;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCgE;AACiC;AAC9B;AACnE;AACO;AACP;AACA,eAAe,gDAAM;AACrB,KAAK;AACL;AACA,eAAe,wDAAc;AAC7B,KAAK;AACL;AACA;AACO;AACP;AACA,eAAe,gDAAM;AACrB,KAAK;AACL;AACA,eAAe,wDAAc;AAC7B,KAAK;AACL;AACA;AACO;AACP,WAAW,qFAA6B;AACxC;AACA;AACO;AACP,WAAW,qFAA6B;AACxC;AACA;AACO;AACP,WAAW,+EAAuB;AAClC;AACA;AACO;AACP,WAAW,+EAAuB;AAClC;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,YAAY,gDAAM;AAClB;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,QAAQ,gFAA+B;AACvC;AACA,KAAK;AACL;AACA;AACO;AACP;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;;;AClFA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;;;;;;;;;;;;;;;;;;;;;;AChBA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrmC;AACuF;AACtF;AACmC;AACsI;AAC5I;AACuR;AACxV;AACO,yBAAyB,6CAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAI,IAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gDAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wDAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAU;AACzB;AACA;AACA;AACA,eAAe,uDAAa;AAC5B;AACA;AACA;AACO;AACP,WAAW,2DAAW,8EAA8E,2DAAW;AAC/G;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2DAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,yBAAyB,wDAAgB;AACzC;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,gBAAgB,+CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,mDAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,oDAAW;AACtB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,mBAAmB,mDAAU;AAC7B;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,yBAAyB,yDAAiB;AAC1C;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP,kCAAkC,gDAAI;AACtC;AACA;AACO;AACP;AACA;AACA,yBAAyB,yDAAiB;AAC1C;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP,WAAW,sDAAa;AACxB;AACA;AACO;AACP;AACA;AACA,yBAAyB,yDAAiB;AAC1C;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,yBAAyB,yDAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,2DAAkB;AAC7B;AACA;AACO;AACP;AACA;AACA,yBAAyB,yDAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,gCAAgC,iDAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAO;AAC5C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,yBAAyB,wDAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,yBAAyB,wDAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2DAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP,mBAAmB,kDAAS;AAC5B;AACA;AACO;AACP,mBAAmB,8CAAK,UAAU,sDAAa;AAC/C;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,0BAA0B,iEAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4DAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,yBAAyB,sDAAU;AACnC,uBAAuB,sDAAU;AACjC;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,0BAA0B,iEAAyB;AACnD;AACA;AACA,0BAA0B,4DAAoB;AAC9C;AACA;AACA;AACA;AACO;AACP;AACA,0BAA0B,6DAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAAuB;AACjD;AACA;AACA;AACO;AACP;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,mBAAmB,mDAAU;AAC7B;AACA;AACO;AACP,mBAAmB,8CAAK,UAAU,mDAAU;AAC5C;AACA;AACO;AACP,mBAAmB,8CAAK,UAAU,oDAAW;AAC7C;AACA;AACO;AACP,mBAAmB,8CAAK,UAAU,oDAAW,CAAC,8CAAK;AACnD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,2DAAmB;AAC7C,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,2DAAmB;AAC7C,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC13CqC;AACI;AACzC,iEAAe,8CAAY,EAAC;AACrB,iBAAiB,8CAAY;AAC7B,gBAAgB,6CAAW;AAC3B,oBAAoB,6CAAW;AAC/B,uBAAuB,kDAAgB;AACvC,oBAAoB,kDAAgB;AACpC,oBAAoB,gDAAc;AAClC,mBAAmB,gDAAc;AACjC,yBAAyB,gDAAc;AACvC,qBAAqB,mDAAiB;AACtC,sBAAsB,oDAAkB;AACxC,8BAA8B,4DAA0B;AACxD,sBAAsB,6CAAW;AACjC,qBAAqB,4CAAU;AAC/B,uBAAuB,6CAAW;AAClC,sBAAsB,6CAAW;AACjC,oBAAoB,kDAAgB;AACpC,2BAA2B,yDAAuB;AAClD,uBAAuB,qDAAmB;AAC1C,8BAA8B,4DAA0B;AACxD,oBAAoB,gDAAc;AAClC,sBAAsB,mDAAiB;AACvC,eAAe,gDAAc;AAC7B,gBAAgB,iDAAe;AAC/B,gBAAgB,iDAAe;AAC/B,iBAAiB,kDAAgB;AACjC,kBAAkB,mDAAiB;AACnC,mBAAmB,oDAAkB;AACrC,mBAAmB,oDAAkB;AACrC,kBAAkB,mDAAiB;AACnC,cAAc,+CAAa;AAC3B,gBAAgB,iDAAe;AAC/B,iBAAiB,kDAAgB;AACjC,iBAAiB,kDAAgB;AACjC,mBAAmB,oDAAkB;AACrC,oBAAoB,qDAAmB;AACvC,2BAA2B,4DAA0B;AACrD,4BAA4B,6DAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,uBAAuB,oDAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kDAAgB;AAC3B;AACO;AACP,gBAAgB,kDAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAkB;AACrC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,+CAA+C,oDAAkB;AACjE;AACO;AACP,WAAW,kDAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJ6F;AACxC;AACwF;AAC7F;AACiE;AAC7E;AACqF;AAC9E;AAC+B;AAC1E;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAO;AAClC;AACA;AACA,qCAAqC,iDAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iDAAO;AACpC;AACA;AACA,qCAAqC,iDAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gDAAI;AAC3C;AACA,2DAA2D,iDAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iDAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gDAAI;AAC3C;AACA,yDAAyD,iDAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iDAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iDAAO;AACxlC;AACA;AACA;AACA,2BAA2B,8CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAO;AAC1B;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA,gBAAgB,+CAAI;AACpB;AACA;AACA;AACA;AACO;AACP,WAAW,8CAAM;AACjB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACO;AACP,QAAQ,qDAAW;AACnB;AACA;AACA,0BAA0B,gDAAU;AACpC;AACA;AACA;AACA,mBAAmB,uDAAa;AAChC;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACO,0CAA0C,6CAAM;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,2DAAW,gGAAgG,yDAAS,CAAC,2DAAW,sDAAsD,qDAAS;AAC1M;AACA;AACO;AACP;AACA;AACA;AACA,aAAa,iDAAS;AACtB,yBAAyB,8CAAI;AAC7B,sBAAsB,8CAAI;AAC1B;AACA;AACA;AACA,gCAAgC,yDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAO;AAC1B;AACA;AACA;AACA;AACA;AACO;AACP,qEAAqE,mDAAS;AAC9E;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,iDAAS;AACtB,gBAAgB,8CAAI;AACpB,0BAA0B,8CAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,iDAAS;AACtB,gBAAgB,8CAAI;AACpB,0BAA0B,8CAAI;AAC9B;AACA;AACA;AACA;AACA,wDAAwD,8CAAI;AAC5D,4BAA4B,iDAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAS;AACzB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,WAAW,+CAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAa;AACpC;AACA,2BAA2B,uDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gDAAM,oBAAoB,gDAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAW;AAC/B;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAI,IAAI,GAAG,4CAAK,SAAS,kDAAM,IAAI,EAAE,GAAG,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAW;AAC9B;AACA,wCAAwC,iDAAO;AAC/C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gDAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA,QAAQ,gDAAS;AACjB;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,sCAAsC,uFAAsC;AAC5E,CAAC;AACD;AACO;AACP;AACA;AACA;AACO;AACP,qBAAqB,uFAAsC;AAC3D;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,kBAAkB,iDAAO;AACzB;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,8CAAK;AAChB;AACA;AACO;AACP,WAAW,8CAAK;AAChB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,uBAAuB,uDAAa;AACpC;AACA;AACA;AACA,oCAAoC,wDAAc;AAClD,oCAAoC,wDAAc;AAClD;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,4CAAK;AAChB;AACA;AACO;AACP,WAAW,6CAAM;AACjB;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP,WAAW,gDAAS;AACpB;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,qBAAqB,uFAAsC;AAC3D;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACv5CmC;AACA;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY,gDAAM;AAClB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/GmE;AACH;AACzB;AACM;AACe;AACzB;AACnC;AACO;AACP;AACA,0BAA0B,gDAAS;AACnC;AACA;AACA;AACA;AACA,2BAA2B,uDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAa;AAC5B;AACA;AACA;AACA,eAAe,uDAAa,CAAC,+CAAM;AACnC;AACA;AACA,eAAe,oDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAc;AACtB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4CAAG;AAClB;AACA;AACA;AACA,eAAe,4CAAG;AAClB;AACA;AACA;AACA,eAAe,4CAAG;AAClB;AACA;AACA;AACA,QAAQ,gDAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAW,uBAAuB,gDAAS;AAC7D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gDAAI,CAAC,4DAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,qBAAqB,uDAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtQO;AACA;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnD4D;AAC5D;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gDAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtF6C;AAC8C;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA,iEAAiE;AACjE,kDAAkD;AAClD,4BAA4B,gCAAgC;AAC5D,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAW;AACjC,iBAAiB,iDAAO,QAAQ,qDAAW,8DAA8D,kDAAQ,6BAA6B,+CAAK,CAAC,qDAAW,CAAC,oDAAU,yCAAyC,kDAAQ,iBAAiB,qDAAW;AACvP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1LoC;AACK;AACW;AACmB;AACJ;AACnE;AACO;AACP,iCAAiC,iDAAO;AACxC;AACA;AACA;AACA;AACA;AACA,iCAAiC,iDAAO;AACxC;AACA;AACA;AACA;AACO;AACP;AACA,WAAW,8CAAK,OAAO,+CAAM;AAC7B;AACA;AACO;AACP,gDAAgD,oDAAQ,IAAI,mDAAW;AACvE;AACA;AACO;AACP,gDAAgD,sDAAS,qBAAqB,oDAAa;AAC3F;AACA;AACO;AACP;AACA;AACA;AACO;AACP,gDAAgD,kDAAQ,eAAe,iDAAa;AACpF;AACA;AACO;AACP,gDAAgD,kDAAQ,cAAc,iDAAa;AACnF;AACA;AACO;AACP;AACA,WAAW,8CAAK,OAAO,+CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtD2C;AAC+B;AACvC;AACiB;AAC7C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP,yBAAyB,oDAAU;AACnC;AACA,WAAW,0DAAgB;AAC3B;AACO;AACP,8BAA8B;AAC9B;AACA,eAAe,yDAAe;AAC9B;AACA;AACA;AACA,eAAe,yDAAe;AAC9B;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,qBAAqB,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACO;AACP,kEAAkE,4CAAK;AACvE;AACO;AACP,mEAAmE,6CAAM;AACzE;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA,uDAAuD,gBAAgB,UAAU,cAAc;AAC/F;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,uDAAuD,eAAe,UAAU,cAAc;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAY;AACnC;AACA,2BAA2B,mDAAO;AAClC;AACA;AACA;AACA;AACA,gEAAgE,WAAW;AAC3E;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnbO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACO;AACP,mCAAmC,EAAE;AACrC;AACO;AACP,sCAAsC,EAAE;AACxC;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,uBAAuB;AACvB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D,6BAA6B,IAAI,IAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClI6G;AACvE;AACO;AACQ;AACgB;AAC6Z;AACvS;AACzI;AAClD;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,uDAAa;AAC/B;AACA;AACA;AACA,oCAAoC;AACpC;AACA,6BAA6B,mDAAQ;AACrC;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,YAAY,sDAAY;AACxB,YAAY,qDAAW;AACvB;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gDAAI;AACvC;AACA;AACA;AACA;AACA,gCAAgC,qDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,uDAAa;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAa;AAC5C;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,gBAAgB,gDAAI;AACpB;AACA;AACA,wBAAwB,iDAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAO;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sBAAsB,iDAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,QAAQ,kEAAiB;AACzB;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA,WAAW,uDAAa;AACxB;AACA;AACO;AACP,uBAAuB,uDAAa;AACpC;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,uBAAuB,oDAAW;AAClC;AACA;AACO;AACP;AACA;AACA;AACO;AACP,sBAAsB,gDAAU;AAChC,eAAe,iDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,QAAQ,qDAAW;AACnB,eAAe,iDAAS;AACxB;AACA,2BAA2B,gDAAU;AACrC;AACA;AACA;AACA,eAAe,+CAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,+BAA+B,uDAAa;AAC5C,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP,kDAAkD,gDAAI;AACtD;AACA,YAAY,sDAAY;AACxB,YAAY,qDAAW;AACvB;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA,YAAY,gDAAM;AAClB;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,+EAA+E,gDAAI;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAI;AAC1B;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP,WAAW,sDAAa;AACxB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,2DAAkB;AAC7B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP,WAAW,mDAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP,WAAW,oDAAW;AACtB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,QAAQ,qDAAW;AACnB,eAAe,kDAAS;AACxB;AACA,2BAA2B,gDAAU;AACrC,eAAe,iDAAS;AACxB;AACA;AACA;AACA;AACA,oEAAoE,gDAAI;AACxE;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,QAAQ,qDAAW;AACnB;AACA;AACA,2BAA2B,gDAAU;AACrC,eAAe,iDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACO;AACP,QAAQ,qDAAW;AACnB,eAAe,kDAAS;AACxB;AACA,2BAA2B,gDAAU;AACrC,eAAe,iDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gDAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gDAAI;AACpE;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP,QAAQ,qDAAW;AACnB;AACA;AACA,2BAA2B,gDAAU;AACrC,eAAe,gDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACO;AACP,8FAA8F,gDAAI;AAClG,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP,wGAAwG,gDAAI;AAC5G,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA,sHAAsH,gDAAI;AAC1H,KAAK;AACL;AACA,YAAY,qDAAW;AACvB;AACA;AACA,YAAY,qDAAW;AACvB;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA,sHAAsH,gDAAI;AAC1H,KAAK;AACL;AACA,YAAY,qDAAW;AACvB;AACA;AACA,YAAY,qDAAW;AACvB;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA,2KAA2K,gDAAI;AAC/K,KAAK;AACL;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAa;AAC5B;AACA;AACA,eAAe,oDAAU;AACzB;AACA;AACA;AACA,eAAe,uDAAa;AAC5B;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,+DAAc;AACtB,YAAY,+CAAK;AACjB;AACA;AACA,oBAAoB,iDAAO;AAC3B;AACA,wBAAwB,iDAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAW;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK,kBAAkB,+DAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iDAAO;AAC7C;AACA;AACA,0CAA0C,uDAAa;AACvD,kCAAkC,gDAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qDAAW;AACnC,sCAAsC,gDAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP,yBAAyB,kDAAS;AAClC;AACA;AACA;AACO;AACP,yBAAyB,sDAAa;AACtC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,+BAA+B,kDAAS;AACxC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP,+BAA+B,mDAAU;AACzC;AACA;AACO;AACP;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA,uBAAuB,gDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP,0KAA0K,gDAAI;AAC9K,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP,yHAAyH,gDAAI;AAC7H,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,+BAA+B,mDAAU;AACzC;AACA;AACO;AACP,+BAA+B,8CAAK,UAAU,oDAAW;AACzD;AACA;AACO;AACP,+BAA+B,8CAAK,UAAU,mDAAU;AACxD;AACA;AACO;AACP,+BAA+B,8CAAK,UAAU,oDAAW,CAAC,8CAAK;AAC/D;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,+BAA+B,kDAAS;AACxC;AACA;AACO;AACP,+BAA+B,8CAAK,UAAU,sDAAa;AAC3D;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA,kCAAkC,2DAAmB;AACrD;AACA;AACA;AACA,KAAK;AACL,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAI;AAC3B;AACA;AACA;AACA,sCAAsC,2DAAmB;AACzD;AACA;AACA;AACA;AACA;AACA,mBAAmB,gDAAI,CAAC,iDAAO;AAC/B;AACA,KAAK;AACL,QAAQ,qDAAW;AACnB,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA,oEAAoE,gDAAI;AACxE;AACA;AACA;AACA,kCAAkC,2DAAmB;AACrD;AACA;AACA;AACA,KAAK;AACL,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,gDAAI;AAC3B;AACA;AACA,kCAAkC,2DAAmB;AACrD;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA,0CAA0C,2DAAmB;AAC7D;AACA;AACA;AACA,oEAAoE,gDAAI;AACxE;AACA,KAAK;AACL,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,0BAA0B,2DAAmB;AAC7C;AACA;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA,kCAAkC,2DAAmB;AACrD;AACA;AACA;AACA,KAAK;AACL,QAAQ,qDAAW;AACnB,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACp+C6F;AACxC;AACP;AAC8G;AAC1G;AAC8C;AAC7D;AACkG;AAC3C;AAC1F;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAO;AAClC;AACA;AACA,qCAAqC,iDAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iDAAO;AACpC;AACA;AACA,qCAAqC,iDAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA,mBAAmB,gDAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAO;AACtB;AACA;AACA;AACO,0CAA0C,6CAAM;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,2DAAW,0FAA0F,yDAAS,CAAC,2DAAW,gDAAgD,qDAAS;AAC9L;AACA;AACO;AACP;AACA;AACA;AACA,aAAa,iDAAS;AACtB,sBAAsB,8CAAI;AAC1B,yBAAyB,8CAAI;AAC7B;AACA;AACA;AACA,gCAAgC,yDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAO;AAC1B;AACA;AACA;AACA;AACA;AACO;AACP,qEAAqE,mDAAW;AAChF;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,YAAY,iDAAS;AACrB;AACA;AACA,iBAAiB,8CAAI;AACrB,sBAAsB,8CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,iDAAS;AACtB,gBAAgB,8CAAI;AACpB,0BAA0B,8CAAI;AAC9B;AACA;AACA;AACA;AACA,wDAAwD,8CAAI;AAC5D,4BAA4B,iDAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAS;AACzB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,aAAa,iDAAS;AACtB,iBAAiB,iDAAS;AAC1B,oBAAoB,8CAAI;AACxB,wBAAwB,8CAAI;AAC5B,qCAAqC,8CAAI;AACzC,qCAAqC,8CAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8CAAI,iCAAiC,8CAAI;AAC9F,qDAAqD,8CAAI,iCAAiC,8CAAI;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iDAAS;AACtD,gDAAgD,8CAAI;AACpD;AACA,uDAAuD,8CAAI;AAC3D,uDAAuD,8CAAI;AAC3D;AACA,sDAAsD,iDAAS;AAC/D,oDAAoD,8CAAI;AACxD;AACA,2DAA2D,8CAAI;AAC/D,2DAA2D,8CAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iDAAS;AAC3D,gDAAgD,8CAAI;AACpD;AACA,uDAAuD,8CAAI;AAC3D,uDAAuD,8CAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yDAAe;AAC5E;AACA;AACA;AACA;AACA;AACA,6DAA6D,yDAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yDAAe;AAC5E;AACA;AACA;AACA;AACA;AACA,6DAA6D,yDAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,8CAAI,iCAAiC,8CAAI;AAC1F,iDAAiD,8CAAI,wBAAwB,8CAAI;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAS;AAC9C,wCAAwC,8CAAI;AAC5C;AACA,+CAA+C,8CAAI;AACnD,+CAA+C,8CAAI;AACnD;AACA,8CAA8C,iDAAS;AACvD,4CAA4C,8CAAI;AAChD;AACA,mDAAmD,8CAAI;AACvD,mDAAmD,8CAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iDAAS;AACnD,wCAAwC,8CAAI;AAC5C;AACA,+CAA+C,8CAAI;AACnD,+CAA+C,8CAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,8CAAI,wBAAwB,8CAAI;AAC7E,6CAA6C,8CAAI,iCAAiC,8CAAI;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAS;AAC9C,wCAAwC,8CAAI;AAC5C;AACA,+CAA+C,8CAAI;AACnD,+CAA+C,8CAAI;AACnD;AACA,8CAA8C,iDAAS;AACvD,4CAA4C,8CAAI;AAChD;AACA,mDAAmD,8CAAI;AACvD,mDAAmD,8CAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iDAAS;AACnD,wCAAwC,8CAAI;AAC5C;AACA,+CAA+C,8CAAI;AACnD,+CAA+C,8CAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8CAAI;AAC7C,yCAAyC,8CAAI;AAC7C;AACA;AACA;AACA;AACA;AACA,mCAAmC,8CAAI;AACvC;AACA;AACA,6BAA6B,iDAAS;AACtC,gCAAgC,8CAAI;AACpC;AACA,uCAAuC,8CAAI;AAC3C,qCAAqC,8CAAI;AACzC;AACA,sCAAsC,iDAAS;AAC/C,oCAAoC,8CAAI;AACxC;AACA,2CAA2C,8CAAI;AAC/C,2CAA2C,8CAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iDAAS;AAC3C,gCAAgC,8CAAI;AACpC;AACA,uCAAuC,8CAAI;AAC3C,uCAAuC,8CAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,yDAAe;AAC5D;AACA;AACA;AACA;AACA;AACA,6CAA6C,yDAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,yDAAe;AAC5D;AACA;AACA;AACA;AACA;AACA,6CAA6C,yDAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAI;AAC7B,iCAAiC,8CAAI;AACrC;AACA;AACA,yBAAyB,iDAAS;AAClC,4BAA4B,8CAAI;AAChC;AACA,mCAAmC,8CAAI;AACvC,mCAAmC,8CAAI;AACvC;AACA,kCAAkC,iDAAS;AAC3C,gCAAgC,8CAAI;AACpC;AACA,uCAAuC,8CAAI;AAC3C,uCAAuC,8CAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iDAAS;AACvC,4BAA4B,8CAAI;AAChC;AACA,mCAAmC,8CAAI;AACvC,mCAAmC,8CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAe;AACxD;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAe;AACxD;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAI;AACjC,6BAA6B,8CAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iDAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,mDAAW,MAAM,mDAAW;AACjF;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAI;AAClC;AACA;AACA;AACA,2BAA2B,8CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAO;AAC1B;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA,gBAAgB,+CAAI;AACpB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,+CAAM;AACjB;AACA;AACO;AACP,WAAW,8CAAM;AACjB;AACA;AACO;AACP,QAAQ,qDAAW;AACnB;AACA;AACA,0BAA0B,gDAAU;AACpC;AACA;AACA;AACA,mBAAmB,uDAAa;AAChC;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAI,IAAI,GAAG,4CAAK;AAC1C;AACA,mBAAmB,mDAAQ;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA,QAAQ,gDAAS;AACjB;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrjB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,uBAAuB,uDAAa;AACpC;AACA;AACA;AACA,0BAA0B,wDAAc;AACxC;AACA;AACA;AACA,QAAQ,qDAAW;AACnB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,6CAAM;AACjB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,4CAAK;AAChB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,WAAW,6CAAM;AACjB;AACA;AACO;AACP,sBAAsB,mDAAO;AAC7B,eAAe,uEAAuB,KAAK,qEAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA;AACO;AACP;AACA,WAAW,+CAAQ;AACnB;AACA;AACO;AACP,WAAW,+CAAQ;AACnB;AACA;AACO;AACP;AACA;AACA,eAAe,+CAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,8CAAK;AACtB,QAAQ,+CAAQ;AAChB,eAAe,+CAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/3DqD;AACqE;AACrF;AACC;AACtC;AACA;AACA,wBAAwB,iCAAiC,IAAI,aAAa;AAC1E;AACA,WAAW,oDAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAS;AACjB;AACA;AACA,sBAAsB,qDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAO;AAC7B;AACA;AACA;AACA,0CAA0C,wDAAW,mBAAmB,wDAAW;AACnF;AACA;AACA;AACA,0CAA0C,0DAAa,mBAAmB,0DAAa;AACvF;AACA;AACA,sBAAsB,kDAAK;AAC3B;AACA;AACA,sBAAsB,kDAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kDAAY;AAC1B;AACA;AACA,cAAc,mDAAQ;AACtB;AACA;AACA;AACA,kDAAkD;AAClD,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAS;AACrB;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAO;AACjC;AACA;AACA;AACA,8CAA8C,wDAAW,mBAAmB,wDAAW;AACvF;AACA;AACA;AACA,8CAA8C,0DAAa,mBAAmB,0DAAa;AAC3F;AACA;AACA;AACA;AACA,0BAA0B,oDAAO,CAAC,qDAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,kDAAK,yBAAyB,kDAAK;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qDAAQ;AAC9C;AACA;AACA;AACA,kCAAkC,oDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,kBAAkB,kDAAY;AAC9B;AACA;AACA,kBAAkB,mDAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,kCAAkC,kDAAM;AACxC;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,8CAAM;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACO;AACP;AACA;AACA;AACA,0BAA0B,kDAAM;AAChC;AACA;AACO;AACP;AACA;AACA,wCAAwC,kDAAM;AAC9C;AACO;AACP;AACA;AACA,uCAAuC,kDAAM;AAC7C;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP,cAAc,YAAY;AAC1B;AACO;AACP,iCAAiC,kBAAkB;AACnD;AACO;AACP;AACA,yDAAyD,EAAE,uCAAuC;AAClG,yDAAyD,EAAE,WAAW;AACtE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3gBqE;AACxB;AACI;AACX;AACtC;AACO;AACP;AACA;AACA,aAAa,yDAAa;AAC1B;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAI;AACnB;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP,qBAAqB,uDAAa;AAClC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP,qBAAqB,mDAAQ;AAC7B;AACA;AACA;AACO;AACP,qBAAqB,mDAAQ;AAC7B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP,qBAAqB,mDAAQ;AAC7B;AACA;AACA;AACO;AACP,qBAAqB,kDAAM;AAC3B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,qDAAS,CAAC,mDAAQ;AAC7B;AACA;AACO;AACP,IAAI,+CAAK;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC9GuC;AACM;AAC7C;AACO,8BAA8B,gDAAS;AAC9C;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU,oDAAoD,0DAAU;AACnF;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAU;AACrB;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BuI;AAChI;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,qBAAqB,gGAAgG;AACrH;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wDAAc;AAC5D,4BAA4B,oDAAU;AACtC,eAAe,0DAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAe;AACjC;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAe;AACjC;AACA;AACA;AACA,mBAAmB,uDAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA,cAAc,oFAAoF;AAClG;AACA;AACA,kDAAkD,wDAAc;AAChE,WAAW,0DAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAe;AAC7B;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,iBAAiB,gDAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAe;AAC7B;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,2BAA2B,iDAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe;AACf,iBAAiB;AACjB,oBAAoB;AACpB,oBAAoB;AACpB,uBAAuB;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP,eAAe;AACf,iBAAiB;AACjB,oBAAoB;AACpB,oBAAoB;AACpB,uBAAuB;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5MA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA,0DAA0D,UAAU,YAAY,OAAO;AACvF;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA,0DAA0D,UAAU,YAAY,OAAO;AACvF;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkwBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/jBA;AACA;AAC8C;AACP;AACvC;AACA;AACA,oBAAoB,OAAO,0DAAgB,oCAAoC;AAC/E,gBAAgB,sBAAsB;AACtC,mBAAmB,qBAAqB;AACxC,KAAK,+CAAM;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK;AACX,MAAM,eAAe;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sCAAsC;AACtD;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,kBAAkB,gCAAgC;AAClD;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK;AACX,OAAO,QAAQ;AACf,OAAO,QAAQ;AACf,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,GAAG;AAChD;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,IAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA,gBAAgB,MAAM;AACtB;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAAQ;AACf,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI;AACvC;AACA;AACA;AACA,gBAAgB,IAAI;AACpB;AACA;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAAQ;AACf,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,iEAAe,GAAG,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACv0BnB;AACA;AACA;AACuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA;AACO;AACP;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,0CAA0C;AAC1C,6CAA6C;AAC7C,sCAAsC;AACtC,eAAe,+CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,sDAAsD,aAAa;AACnE;AACA;AACA,WAAW,GAAG;AACd,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,wBAAwB;AACxB;AACA,WAAW,QAAQ;AACnB,WAAW,mBAAmB;AAC9B,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,mBAAmB;AAC9B,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,WAAW,sBAAsB,+CAA+C;AAChF,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB,+CAA+C;AAChF,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,SAAS;AACpB,aAAa;AACb;AACA,YAAY,YAAY;AACxB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,gEAAgE,kBAAkB;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,kBAAkB;AAC7F;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,iFAAiF,oBAAoB;AACrG;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,oFAAoF,uBAAuB;AAC3G;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa,QAAQ;AACrB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,mBAAmB;AAC5F;AACA,WAAW,qBAAqB;AAChC,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,kBAAkB;AACrE;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,oBAAoB;AACnG;AACA,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,oBAAoB;AAChG;AACA,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,mBAAmB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,kBAAkB;AACtF;AACA,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACA;AACA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,qBAAqB;AAChC,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,qBAAqB;AAClH;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G,sBAAsB;AACnI;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG,8BAA8B;AACtI;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;AACA;AACA,wGAAwG,8BAA8B;AACtI;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,sBAAsB;AACnH;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,uBAAuB;AACrH;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,UAAU;AACV,aAAa,iBAAiB;AAC9B;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,iBAAiB;AAC9B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,aAAa,iBAAiB;AAC9B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,UAAU;AACrB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,UAAU;AACrB,aAAa,MAAM;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC/yCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;ACN4D;AACsC;AACnB;AAC7B;AACR;AAC4B;;AAE/D;;AAEA;AACP,8BAA8B,sDAAY,EAAE,uDAAa;AACzD;AACA;AACA,CAAC;;AAEM,6BAA6B,uFAAU;;AAEvC;AACP;AACA;AACA,wBAAwB,gFAAG,CAAC,0FAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,8BAA8B,4FAAc,CAAC,+DAAI,UAAU,uDAAS;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gFAAG,CAAC,0FAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD,kBAAkB,mFAAI,8BAA8B,IAAI;AACxD,CAAC","sources":["webpack:///./src/Assets.fs.js","webpack:///./src/Audio.Platform.fs.js","webpack:///./src/CrossPlatform/AI.fs.js","webpack:///./src/CrossPlatform/Audio.fs.js","webpack:///./src/CrossPlatform/Compression.fs.js","webpack:///./src/CrossPlatform/Dissolver.fs.js","webpack:///./src/CrossPlatform/Game.fs.js","webpack:///./src/CrossPlatform/Map.fs.js","webpack:///./src/CrossPlatform/Ray.fs.js","webpack:///./src/CrossPlatform/Render.fs.js","webpack:///./src/CrossPlatform/Update.fs.js","webpack:///./src/Graphics.Common.fs.js","webpack:///./src/Graphics.fs.js","webpack:///./src/Model.Platform.fs.js","webpack:///./src/Model.fs.js","webpack:///./src/Render.Primitives.fs.js","webpack:///./src/Scene.fs.js","webpack:///./src/Utils.fs.js","webpack:///./src/fable_modules/Fable.SimpleHttp.3.1.0/Http.fs.js","webpack:///./src/fable_modules/Fable.SimpleHttp.3.1.0/Types.fs.js","webpack:///./src/fable_modules/fable-library.3.7.14/Array.js","webpack:///./src/fable_modules/fable-library.3.7.14/Async.js","webpack:///./src/fable_modules/fable-library.3.7.14/AsyncBuilder.js","webpack:///./src/fable_modules/fable-library.3.7.14/BigInt.js","webpack:///./src/fable_modules/fable-library.3.7.14/BigInt/n.js","webpack:///./src/fable_modules/fable-library.3.7.14/BigInt/z.js","webpack:///./src/fable_modules/fable-library.3.7.14/Choice.js","webpack:///./src/fable_modules/fable-library.3.7.14/Date.js","webpack:///./src/fable_modules/fable-library.3.7.14/Decimal.js","webpack:///./src/fable_modules/fable-library.3.7.14/FSharp.Collections.js","webpack:///./src/fable_modules/fable-library.3.7.14/FSharp.Core.js","webpack:///./src/fable_modules/fable-library.3.7.14/Global.js","webpack:///./src/fable_modules/fable-library.3.7.14/Int32.js","webpack:///./src/fable_modules/fable-library.3.7.14/List.js","webpack:///./src/fable_modules/fable-library.3.7.14/Long.js","webpack:///./src/fable_modules/fable-library.3.7.14/Map.js","webpack:///./src/fable_modules/fable-library.3.7.14/MapUtil.js","webpack:///./src/fable_modules/fable-library.3.7.14/MutableSet.js","webpack:///./src/fable_modules/fable-library.3.7.14/Numeric.js","webpack:///./src/fable_modules/fable-library.3.7.14/Option.js","webpack:///./src/fable_modules/fable-library.3.7.14/Random.js","webpack:///./src/fable_modules/fable-library.3.7.14/Range.js","webpack:///./src/fable_modules/fable-library.3.7.14/Reflection.js","webpack:///./src/fable_modules/fable-library.3.7.14/RegExp.js","webpack:///./src/fable_modules/fable-library.3.7.14/Seq.js","webpack:///./src/fable_modules/fable-library.3.7.14/Set.js","webpack:///./src/fable_modules/fable-library.3.7.14/String.js","webpack:///./src/fable_modules/fable-library.3.7.14/System.Text.js","webpack:///./src/fable_modules/fable-library.3.7.14/SystemException.js","webpack:///./src/fable_modules/fable-library.3.7.14/Types.js","webpack:///./src/fable_modules/fable-library.3.7.14/Util.js","webpack:///./src/fable_modules/fable-library.3.7.14/lib/big.js","webpack:///./src/fable_modules/fable-library.3.7.14/lib/long.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/App.fs.js"],"sourcesContent":["\nexport const isShareware = true;\n\nexport const extension = isShareware ? \"WL1\" : \"WL6\";\n\nexport const GAMEMAPS = `GAMEMAPS.${extension}`;\n\nexport const MAPHEAD = `MAPHEAD.${extension}`;\n\nexport const VSWAP = `VSWAP.${extension}`;\n\nexport function isSharewareSprite(index) {\n    if ((index <= 186) ? true : ((index >= 296) && (index <= 306))) {\n        return true;\n    }\n    else if (index >= 408) {\n        return index <= 435;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function audioFilename(extension_1, soundEffect) {\n    const prefix = (soundEffect.tag === 1) ? \"001_Dog\" : ((soundEffect.tag === 2) ? \"002_DoorClose\" : ((soundEffect.tag === 3) ? \"003_DoorOpen\" : ((soundEffect.tag === 4) ? \"004_PlayerMachineGun\" : ((soundEffect.tag === 5) ? \"005_PlayerPistol\" : ((soundEffect.tag === 6) ? \"006_PlayerChainGun_Question\" : ((soundEffect.tag === 7) ? \"007_Hooffafo\" : ((soundEffect.tag === 8) ? \"008_GutenTag\" : ((soundEffect.tag === 9) ? \"009_Mutti\" : ((soundEffect.tag === 10) ? \"010_GuardChainGun_Question\" : ((soundEffect.tag === 11) ? \"011_GuardMachineGun_Question\" : ((soundEffect.tag === 12) ? \"012_Aaarggh\" : ((soundEffect.tag === 13) ? \"013_Aieeee\" : ((soundEffect.tag === 14) ? \"014_Ooof\" : ((soundEffect.tag === 15) ? \"015_SecretDoor\" : ((soundEffect.tag === 16) ? \"026_MeinLeben\" : ((soundEffect.tag === 17) ? \"027_GuardPistol\" : ((soundEffect.tag === 18) ? \"028_Bubbles_Question\" : ((soundEffect.tag === 19) ? \"057_VictoryYeah\" : ((soundEffect.tag === 20) ? \"095_Tick\" : \"000_UttGuards\")))))))))))))))))));\n    return `${prefix}.${extension_1}`;\n}\n\n","import { map, toArray } from \"./fable_modules/fable-library.3.7.14/Seq.js\";\nimport { rangeDouble } from \"./fable_modules/fable-library.3.7.14/Range.js\";\nimport { FSharpMap__get_Item, ofList } from \"./fable_modules/fable-library.3.7.14/Map.js\";\nimport { map as map_1 } from \"./fable_modules/fable-library.3.7.14/List.js\";\nimport { escapeUriString } from \"./fable_modules/fable-library.3.7.14/Util.js\";\nimport { audioFilename } from \"./Assets.fs.js\";\nimport { printf, toText } from \"./fable_modules/fable-library.3.7.14/String.js\";\nimport { SoundEffect_get_All } from \"./Model.fs.js\";\n\nfunction createOverlayingAudioPlayer(path) {\n    const audioPlayers = toArray(map((_arg1) => (new Audio(path)), rangeDouble(0, 1, 4)));\n    let currentIndex = 0;\n    return (volume) => {\n        audioPlayers[currentIndex].volume = volume;\n        audioPlayers[currentIndex].play();\n        currentIndex = (((currentIndex === (audioPlayers.length - 1)) ? 0 : (currentIndex + 1)) | 0);\n    };\n}\n\nconst soundEffects = ofList(map_1((tupledArg) => [tupledArg[0], createOverlayingAudioPlayer(tupledArg[1])], map_1((soundEffectType) => {\n    let arg10;\n    return [soundEffectType, (arg10 = escapeUriString(audioFilename(\"mp3\", soundEffectType)), toText(printf(\"assets/sounds/%s\"))(arg10))];\n}, SoundEffect_get_All())));\n\nexport function playSoundEffect(soundEffect) {\n    FSharpMap__get_Item(soundEffects, soundEffect)(1);\n}\n\nexport function playSoundEffectAtVolume(volume, soundEffect) {\n    FSharpMap__get_Item(soundEffects, soundEffect)(volume);\n}\n\n","import { nonSeeded } from \"../fable_modules/fable-library.3.7.14/Random.js\";\nimport { reverse as reverse_1, ofArray, filter, tryHead, length, item } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { GameObject, Enemy__get_IsAlive, PathState, BasicGameObject as BasicGameObject_4, Vector2D_op_Addition_3C4D5180, Vector2D__get_Magnitude, Vector2D_op_Multiply_Z23A8CFC1, Vector2D_op_Subtraction_3C4D5180, Game, ViewportFilter as ViewportFilter_1, OverlayAnimation_Blood_5E38073B, Player as Player_1, Enemy__get_IsVisible, Game__get_IsPlayerRunning, Enemy__get_IsBoss, SoundEffect, Enemy_AnimationTimeForState_4C3F69DE, MapDirection_Diagonal, Enemy, EnemyStateType, Game__get_PlayerMapPosition, MapDirection__Reverse, BasicGameObject__get_MapPosition, MapDirection__ToDelta, MapDirection, Vector2D__Abs, Vector2D_op_Division_Z23A8CFC1, Vector2D__Normalize, Vector2D__Rotate_Z114CB6F, Vector2D, Enemy__get_DirectionVector } from \"../Model.fs.js\";\nimport { canEnemyTraverse, cast, isPointInTriangle } from \"./Ray.fs.js\";\nimport { comparePrimitives, max, equals } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { log } from \"../Utils.fs.js\";\nimport { tryHead as tryHead_1, reverse, map } from \"../fable_modules/fable-library.3.7.14/Array.js\";\nimport { singleton, append, delay, toArray } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { map as map_1, defaultArgWith, some, value as value_1 } from \"../fable_modules/fable-library.3.7.14/Option.js\";\nimport { playAttackSound, playSoundEffect } from \"./Audio.fs.js\";\n\nconst randomGenerator = nonSeeded();\n\nexport function List_random(values) {\n    return item(randomGenerator.Next2(0, length(values)), values);\n}\n\nexport function inFieldOfView(game, enemy) {\n    const matchValue = Enemy__get_DirectionVector(enemy);\n    if (matchValue != null) {\n        const directionVector = matchValue;\n        const fieldOfViewAngle = ((60 * 3.141592653589793) / 180) * 1;\n        return isPointInTriangle(new Vector2D(0, 0), Vector2D__Rotate_Z114CB6F(Vector2D__Normalize(directionVector), -fieldOfViewAngle), Vector2D__Rotate_Z114CB6F(Vector2D__Normalize(directionVector), fieldOfViewAngle), Vector2D_op_Division_Z23A8CFC1(Vector2D__Normalize(new Vector2D(game.Camera.Position.vX - enemy.BasicGameObject.Position.vX, game.Camera.Position.vY - enemy.BasicGameObject.Position.vY)), 2));\n    }\n    else {\n        return true;\n    }\n}\n\nexport function isPlayerVisibleToEnemy(game, enemy) {\n    if (inFieldOfView(game, enemy)) {\n        const vectorToEnemy = new Vector2D(game.Camera.Position.vX - enemy.BasicGameObject.Position.vX, game.Camera.Position.vY - enemy.BasicGameObject.Position.vY);\n        const absVectorToEnemy = Vector2D__Abs(vectorToEnemy);\n        const rayDirection = Vector2D__Normalize(vectorToEnemy);\n        return !cast(() => [false, enemy.BasicGameObject.Position.vX, enemy.BasicGameObject.Position.vY, rayDirection], (tupledArg) => {\n            const mapX = tupledArg[3] | 0;\n            const mapY = tupledArg[4] | 0;\n            if ((!tupledArg[0]) && ((((mapX >= 0) && (mapX < length(item(0, game.Map)))) && (mapY >= 0)) && (mapY < length(game.Map)))) {\n                if (Math.abs(tupledArg[1]) < absVectorToEnemy.vX) {\n                    return true;\n                }\n                else {\n                    return Math.abs(tupledArg[2]) < absVectorToEnemy.vY;\n                }\n            }\n            else {\n                return false;\n            }\n        }, game)[0];\n    }\n    else {\n        return false;\n    }\n}\n\nexport function canMove(game, enemy, mapDirection) {\n    if (equals(mapDirection, new MapDirection(8))) {\n        return false;\n    }\n    else {\n        const patternInput = MapDirection__ToDelta(mapDirection);\n        const patternInput_1 = BasicGameObject__get_MapPosition(enemy.BasicGameObject);\n        const patternInput_2 = [patternInput_1[0] + patternInput[0], patternInput_1[1] + patternInput[1]];\n        return canEnemyTraverse(game, patternInput_2[0], patternInput_2[1]);\n    }\n}\n\nexport function setupChaseState(game, enemy) {\n    let d;\n    const turnaround = MapDirection__Reverse(enemy.Direction);\n    const patternInput = Game__get_PlayerMapPosition(game);\n    const patternInput_1 = BasicGameObject__get_MapPosition(enemy.BasicGameObject);\n    const enemyY = patternInput_1[1] | 0;\n    const enemyX = patternInput_1[0] | 0;\n    const deltaX = (patternInput[0] - enemyX) | 0;\n    const deltaY = (patternInput[1] - enemyY) | 0;\n    log(`Setting up chase state: ${enemyX}, ${enemyY}`);\n    const dir = map((d_1) => {\n        if (equals(d_1, turnaround)) {\n            return new MapDirection(8);\n        }\n        else {\n            return d_1;\n        }\n    }, (d = toArray(delay(() => append((deltaX > 0) ? singleton(new MapDirection(6)) : ((deltaX < 0) ? singleton(new MapDirection(2)) : singleton(new MapDirection(8))), delay(() => ((deltaY > 0) ? singleton(new MapDirection(4)) : ((deltaY < 0) ? singleton(new MapDirection(0)) : singleton(new MapDirection(8)))))))), (Math.abs(deltaY) > Math.abs(deltaX)) ? reverse(d) : d));\n    const updateEnemy = (withDirection) => {\n        const patternInput_2 = MapDirection__ToDelta(withDirection);\n        const patternInput_3 = BasicGameObject__get_MapPosition(enemy.BasicGameObject);\n        const patternInput_4 = [patternInput_3[0] + patternInput_2[0], patternInput_3[1] + patternInput_2[1]];\n        return new Enemy(enemy.EnemyType, enemy.BasicGameObject, withDirection, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, enemy.TimeUntilNextAnimationFrame, new EnemyStateType(6, patternInput_4[0], patternInput_4[1]), enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed);\n    };\n    const onNone = (func, optionValue) => {\n        if (optionValue == null) {\n            return func();\n        }\n        else {\n            return some(value_1(optionValue));\n        }\n    };\n    return defaultArgWith(onNone(() => (canMove(game, enemy, turnaround) ? updateEnemy(turnaround) : (void 0)), onNone(() => {\n        let values;\n        return map_1(updateEnemy, tryHead(filter((direction) => canMove(game, enemy, direction), (values = ofArray([new MapDirection(0), new MapDirection(7), new MapDirection(6)]), (randomGenerator.Next1(255) > 128) ? values : reverse_1(values)))));\n    }, onNone(() => (canMove(game, enemy, enemy.Direction) ? updateEnemy(enemy.Direction) : (void 0)), onNone(() => (canMove(game, enemy, dir[1]) ? updateEnemy(dir[1]) : (void 0)), canMove(game, enemy, dir[0]) ? updateEnemy(dir[0]) : (void 0))))), () => (new Enemy(enemy.EnemyType, enemy.BasicGameObject, new MapDirection(8), enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, enemy.TimeUntilNextAnimationFrame, new EnemyStateType(0), enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed)));\n}\n\nexport function setupChaseStateWithDodge(game, enemy) {\n    let array, dt_2, dt, dt_1, arg10;\n    const turnaround = enemy.IsFirstAttack ? (new MapDirection(8)) : MapDirection__Reverse(enemy.Direction);\n    const patternInput = Game__get_PlayerMapPosition(game);\n    const patternInput_1 = BasicGameObject__get_MapPosition(enemy.BasicGameObject);\n    const deltaX_1 = (patternInput[0] - patternInput_1[0]) | 0;\n    const deltaY_1 = (patternInput[1] - patternInput_1[1]) | 0;\n    const directionOption = tryHead_1((array = ((dt_2 = ((dt = ((dt_1 = toArray(delay(() => append(singleton(new MapDirection(8)), delay(() => append((deltaX_1 > 0) ? singleton(new MapDirection(6)) : singleton(new MapDirection(2)), delay(() => append((deltaY_1 > 0) ? singleton(new MapDirection(4)) : singleton(new MapDirection(0)), delay(() => append((deltaX_1 > 0) ? singleton(new MapDirection(2)) : singleton(new MapDirection(6)), delay(() => ((deltaY_1 > 0) ? singleton(new MapDirection(0)) : singleton(new MapDirection(4))))))))))))), (Math.abs(deltaX_1) > Math.abs(deltaY_1)) ? [dt_1[0], dt_1[2], dt_1[1], dt_1[4], dt_1[3]] : dt_1)), (randomGenerator.Next1(255) < 128) ? [dt[0], dt[2], dt[1], dt[4], dt[3]] : dt)), [(arg10 = dt_2[2], MapDirection_Diagonal(dt_2[1], arg10)), dt_2[1], dt_2[2], dt_2[3], dt_2[4]])), array.filter((direction) => {\n        if (equals(direction, new MapDirection(8)) ? true : equals(direction, turnaround)) {\n            return false;\n        }\n        else {\n            return canMove(game, enemy, direction);\n        }\n    })));\n    if (directionOption == null) {\n        return enemy;\n    }\n    else {\n        const direction_1 = directionOption;\n        const patternInput_2 = MapDirection__ToDelta(direction_1);\n        const patternInput_3 = BasicGameObject__get_MapPosition(enemy.BasicGameObject);\n        const patternInput_4 = [patternInput_3[0] + patternInput_2[0], patternInput_3[1] + patternInput_2[1]];\n        return new Enemy(enemy.EnemyType, enemy.BasicGameObject, direction_1, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, enemy.TimeUntilNextAnimationFrame, new EnemyStateType(6, patternInput_4[0], patternInput_4[1]), enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed);\n    }\n}\n\nexport function createAttackState(game, enemy) {\n    return new Enemy(enemy.EnemyType, enemy.BasicGameObject, new MapDirection(8), enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, 0, Enemy_AnimationTimeForState_4C3F69DE(new EnemyStateType(2)), new EnemyStateType(2), false, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed);\n}\n\nexport function createChaseState(canSeePlayer, game, enemy) {\n    let updatedEnemy;\n    if (canSeePlayer) {\n        const matchValue = enemy.State;\n        switch (matchValue.tag) {\n            case 1:\n            case 0:\n            case 3: {\n                playSoundEffect(game, enemy.BasicGameObject.Position, new SoundEffect(0));\n                break;\n            }\n            default: {\n            }\n        }\n        const patternInput = BasicGameObject__get_MapPosition(enemy.BasicGameObject);\n        const patternInput_1 = Game__get_PlayerMapPosition(game);\n        const absDeltaX = Math.abs(patternInput[0] - patternInput_1[0]) | 0;\n        const absDeltaY = Math.abs(patternInput[1] - patternInput_1[1]) | 0;\n        const distance = ((absDeltaX > absDeltaY) ? absDeltaX : absDeltaY) | 0;\n        updatedEnemy = (((log(`Shoot Distance: ${distance}`), (distance <= 1) ? true : (equals(enemy.State, new EnemyStateType(2)) ? (randomGenerator.Next1(255) < (~(~(255 / distance)))) : (randomGenerator.Next1(255) < (~(~(255 / max(comparePrimitives, 1, (~(~(distance / 3))) * 2)))))))) ? createAttackState(game, enemy) : setupChaseStateWithDodge(game, enemy));\n    }\n    else {\n        updatedEnemy = setupChaseState(game, enemy);\n    }\n    if (updatedEnemy.MoveToChaseRequired) {\n        playSoundEffect(game, enemy.BasicGameObject.Position, new SoundEffect(0));\n    }\n    return new Enemy(updatedEnemy.EnemyType, updatedEnemy.BasicGameObject, updatedEnemy.Direction, updatedEnemy.DeathSpriteIndexes, updatedEnemy.AttackSpriteIndexes, updatedEnemy.SpriteBlocks, updatedEnemy.FramesPerBlock, updatedEnemy.CurrentAnimationFrame, updatedEnemy.TimeUntilNextAnimationFrame, updatedEnemy.State, updatedEnemy.IsFirstAttack, updatedEnemy.FireAtPlayerRequired, false, updatedEnemy.HitPoints, updatedEnemy.HurtSpriteIndex, updatedEnemy.PatrolSpeed, updatedEnemy.ChaseSpeed);\n}\n\nexport function getNextState(canSeePlayer, game, enemy) {\n    const matchValue = [enemy.State, canSeePlayer];\n    let pattern_matching_result;\n    if (matchValue[0].tag === 0) {\n        if (matchValue[1]) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n    }\n    else if (matchValue[0].tag === 1) {\n        if (matchValue[1]) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n    }\n    else if (matchValue[0].tag === 2) {\n        pattern_matching_result = 1;\n    }\n    else {\n        pattern_matching_result = 2;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return createChaseState(canSeePlayer, game, enemy);\n        }\n        case 1: {\n            if (enemy.TimeUntilNextAnimationFrame < 0) {\n                return createChaseState(canSeePlayer, game, enemy);\n            }\n            else {\n                return enemy;\n            }\n        }\n        case 2: {\n            return enemy;\n        }\n    }\n}\n\nexport function preProcess(canSeePlayer, enemy, game) {\n    return [getNextState(canSeePlayer, game, enemy), game];\n}\n\nexport function firingOnPlayer(canSeePlayer, enemy, game) {\n    let inputRecord;\n    let damage;\n    if (enemy.FireAtPlayerRequired && canSeePlayer) {\n        const patternInput = BasicGameObject__get_MapPosition(enemy.BasicGameObject);\n        const patternInput_1 = Game__get_PlayerMapPosition(game);\n        const deltaX = Math.abs(patternInput[0] - patternInput_1[0]) | 0;\n        const deltaY = Math.abs(patternInput[1] - patternInput_1[1]) | 0;\n        let distance;\n        const matchValue = [enemy.EnemyType, Enemy__get_IsBoss(enemy)];\n        let pattern_matching_result;\n        if (matchValue[0].tag === 2) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[1]) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                distance = (~(~((max(comparePrimitives, deltaX, deltaY) * 2) / 3)));\n                break;\n            }\n            case 1: {\n                distance = max(comparePrimitives, deltaX, deltaY);\n                break;\n            }\n        }\n        const hitchance = (Game__get_IsPlayerRunning(game) ? (Enemy__get_IsVisible(enemy) ? (160 - (distance * 16)) : (160 - (distance * 8))) : (Enemy__get_IsVisible(enemy) ? (256 - (distance * 16)) : (160 - (distance * 8)))) | 0;\n        playAttackSound(game, enemy.BasicGameObject.Position, enemy.EnemyType);\n        damage = ((randomGenerator.Next1(255) < hitchance) ? ((distance < 2) ? (randomGenerator.Next1(255) >> 2) : ((distance < 4) ? (randomGenerator.Next1(255) >> 3) : (randomGenerator.Next1(255) >> 4))) : 0);\n    }\n    else {\n        damage = 0;\n    }\n    return [enemy, new Game(game.Level, game.Map, game.Areas, game.CompositeAreas, game.GameObjects, (inputRecord = game.Player, new Player_1(inputRecord.Score, inputRecord.Lives, game.Player.Health - (damage * 1), inputRecord.Radius, inputRecord.CurrentWeaponIndex, inputRecord.Ammunition, inputRecord.Weapons, inputRecord.CurrentFaceIndex, inputRecord.TimeToFaceChangeMs)), game.Camera, game.ControlState, game.IsFiring, game.TimeToNextWeaponFrame, game.Doors, (damage > 0) ? (new ViewportFilter_1(1, OverlayAnimation_Blood_5E38073B(damage / 64))) : game.ViewportFilter, game.PixelDissolver, game.ResetLevel)];\n}\n\nexport function updateBasedOnCurrentState(canSeePlayer, frameTime, enemy, game) {\n    let inputRecord, inputRecord_1, inputRecord_2, inputRecord_3;\n    const matchValue = [enemy.State, Enemy__get_DirectionVector(enemy)];\n    let pattern_matching_result, previousState, direction, targetMapX, targetMapY, direction_1, pathState;\n    if (matchValue[0].tag === 4) {\n        pattern_matching_result = 0;\n        previousState = matchValue[0].fields[0];\n    }\n    else if (matchValue[0].tag === 6) {\n        if (matchValue[1] != null) {\n            pattern_matching_result = 1;\n            direction = matchValue[1];\n            targetMapX = matchValue[0].fields[0];\n            targetMapY = matchValue[0].fields[1];\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else if (matchValue[0].tag === 3) {\n        if (matchValue[1] != null) {\n            pattern_matching_result = 2;\n            direction_1 = matchValue[1];\n            pathState = matchValue[0].fields[0];\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else if (matchValue[0].tag === 0) {\n        pattern_matching_result = 3;\n    }\n    else {\n        pattern_matching_result = 4;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            if (enemy.TimeUntilNextAnimationFrame < 0) {\n                return [new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, Enemy_AnimationTimeForState_4C3F69DE(previousState), previousState, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed), game];\n            }\n            else {\n                return [enemy, game];\n            }\n        }\n        case 1: {\n            const targetPosition = new Vector2D(targetMapX + 0.5, targetMapY + 0.5);\n            const distanceToTarget = Vector2D_op_Subtraction_3C4D5180(targetPosition, enemy.BasicGameObject.Position);\n            const frameRateBasedDelta = Vector2D_op_Multiply_Z23A8CFC1(direction, (frameTime / 1000) * enemy.ChaseSpeed);\n            if (Vector2D__get_Magnitude(distanceToTarget) > Vector2D__get_Magnitude(frameRateBasedDelta)) {\n                return [new Enemy(enemy.EnemyType, (inputRecord = enemy.BasicGameObject, new BasicGameObject_4(Vector2D_op_Addition_3C4D5180(enemy.BasicGameObject.Position, frameRateBasedDelta), inputRecord.PlayerRelativePosition, inputRecord.UnsquaredDistanceFromPlayer, inputRecord.SpriteIndex, inputRecord.CollidesWithBullets, inputRecord.Pickupable, inputRecord.HitpointsRestored, inputRecord.AmmoRestored, inputRecord.LivesRestored, inputRecord.Score, inputRecord.Blocking)), enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, enemy.TimeUntilNextAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed), game];\n            }\n            else {\n                return [createChaseState(canSeePlayer, game, new Enemy(enemy.EnemyType, (inputRecord_1 = enemy.BasicGameObject, new BasicGameObject_4(targetPosition, inputRecord_1.PlayerRelativePosition, inputRecord_1.UnsquaredDistanceFromPlayer, inputRecord_1.SpriteIndex, inputRecord_1.CollidesWithBullets, inputRecord_1.Pickupable, inputRecord_1.HitpointsRestored, inputRecord_1.AmmoRestored, inputRecord_1.LivesRestored, inputRecord_1.Score, inputRecord_1.Blocking)), enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, enemy.TimeUntilNextAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed)), game];\n            }\n        }\n        case 2: {\n            const targetMapX_1 = pathState.TargetX | 0;\n            const targetMapY_1 = pathState.TargetY | 0;\n            const targetPosition_1 = new Vector2D(targetMapX_1 + 0.5, targetMapY_1 + 0.5);\n            const distanceToTarget_1 = Vector2D_op_Subtraction_3C4D5180(targetPosition_1, enemy.BasicGameObject.Position);\n            const frameRateBasedDelta_1 = Vector2D_op_Multiply_Z23A8CFC1(direction_1, (frameTime / 1000) * enemy.PatrolSpeed);\n            if (Vector2D__get_Magnitude(distanceToTarget_1) > Vector2D__get_Magnitude(frameRateBasedDelta_1)) {\n                return [new Enemy(enemy.EnemyType, (inputRecord_2 = enemy.BasicGameObject, new BasicGameObject_4(Vector2D_op_Addition_3C4D5180(enemy.BasicGameObject.Position, frameRateBasedDelta_1), inputRecord_2.PlayerRelativePosition, inputRecord_2.UnsquaredDistanceFromPlayer, inputRecord_2.SpriteIndex, inputRecord_2.CollidesWithBullets, inputRecord_2.Pickupable, inputRecord_2.HitpointsRestored, inputRecord_2.AmmoRestored, inputRecord_2.LivesRestored, inputRecord_2.Score, inputRecord_2.Blocking)), enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, enemy.TimeUntilNextAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed), game];\n            }\n            else if ((canSeePlayer ? true : pathState.ChaseOnTargetReached) ? true : enemy.MoveToChaseRequired) {\n                return [createChaseState(canSeePlayer, game, enemy), game];\n            }\n            else {\n                let newDirection;\n                const matchValue_1 = item(targetMapX_1, item(targetMapY_1, game.Map));\n                newDirection = ((matchValue_1.tag === 2) ? matchValue_1.fields[0] : enemy.Direction);\n                const patternInput = MapDirection__ToDelta(newDirection);\n                const turnedEnemy = new Enemy(enemy.EnemyType, (inputRecord_3 = enemy.BasicGameObject, new BasicGameObject_4(targetPosition_1, inputRecord_3.PlayerRelativePosition, inputRecord_3.UnsquaredDistanceFromPlayer, inputRecord_3.SpriteIndex, inputRecord_3.CollidesWithBullets, inputRecord_3.Pickupable, inputRecord_3.HitpointsRestored, inputRecord_3.AmmoRestored, inputRecord_3.LivesRestored, inputRecord_3.Score, inputRecord_3.Blocking)), newDirection, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, enemy.TimeUntilNextAnimationFrame, new EnemyStateType(3, new PathState(targetMapX_1 + patternInput[0], targetMapY_1 + patternInput[1], pathState.ChaseOnTargetReached)), enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed);\n                return [isPlayerVisibleToEnemy(game, turnedEnemy) ? createChaseState(canSeePlayer, game, turnedEnemy) : turnedEnemy, game];\n            }\n        }\n        case 3: {\n            if (enemy.MoveToChaseRequired) {\n                return [createChaseState(canSeePlayer, game, enemy), game];\n            }\n            else {\n                return [enemy, game];\n            }\n        }\n        case 4: {\n            return [enemy, game];\n        }\n    }\n}\n\nexport function applyAi(frameTime, game, gameObject, newObjects) {\n    if (gameObject.tag === 1) {\n        const enemy = gameObject.fields[0];\n        if (Enemy__get_IsAlive(enemy)) {\n            const canSeePlayer = isPlayerVisibleToEnemy(game, enemy);\n            let patternInput;\n            let tupledArg_2;\n            let tupledArg_1;\n            const tupledArg = [enemy, game];\n            tupledArg_1 = preProcess(canSeePlayer, tupledArg[0], tupledArg[1]);\n            tupledArg_2 = updateBasedOnCurrentState(canSeePlayer, frameTime, tupledArg_1[0], tupledArg_1[1]);\n            patternInput = firingOnPlayer(canSeePlayer, tupledArg_2[0], tupledArg_2[1]);\n            return [patternInput[1], new GameObject(1, patternInput[0]), newObjects];\n        }\n        else {\n            return [game, gameObject, newObjects];\n        }\n    }\n    else {\n        return [game, gameObject, newObjects];\n    }\n}\n\n","import { nonSeeded } from \"../fable_modules/fable-library.3.7.14/Random.js\";\nimport { ofArray, length, item } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { SoundEffect, Vector2D_op_Subtraction_3C4D5180, Vector2D__get_Magnitude, Game__get_PlayerMapPosition } from \"../Model.fs.js\";\nimport { log } from \"../Utils.fs.js\";\nimport { contains } from \"../fable_modules/fable-library.3.7.14/Set.js\";\nimport { comparePrimitives, max } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { playSoundEffectAtVolume } from \"../Audio.Platform.fs.js\";\n\nconst random = nonSeeded();\n\nexport function List_random(set$) {\n    return item(random.Next1(length(set$)), set$);\n}\n\nexport function isSoundInArea(game, position) {\n    const patternInput = [~(~position.vX), ~(~position.vY)];\n    const patternInput_1 = Game__get_PlayerMapPosition(game);\n    const playerX = patternInput_1[0] | 0;\n    const soundArea = item(patternInput[0], item(patternInput[1], game.Areas)) | 0;\n    const playerArea = item(playerX, item(patternInput_1[1], game.Areas)) | 0;\n    if ((soundArea === -1) ? true : (playerX === -1)) {\n        log(\"Unable to find area for sound\");\n        return true;\n    }\n    else {\n        return contains(soundArea, item(playerArea, game.CompositeAreas).ConnectedTo);\n    }\n}\n\nfunction calculateVolumeAtPositionRelativeToPlayer(volumeRange, sectorVolumeAdjustment, game, position) {\n    const distance = Vector2D__get_Magnitude(Vector2D_op_Subtraction_3C4D5180(game.Camera.Position, position));\n    const maximumDistanceAtWhichSoundCanBeHeard = volumeRange;\n    if (distance > maximumDistanceAtWhichSoundCanBeHeard) {\n        return 0;\n    }\n    else {\n        return (isSoundInArea(game, position) ? ((x) => x) : ((input) => max(comparePrimitives, 0, input - sectorVolumeAdjustment)))((distance <= 1) ? 1 : (1 - (Math.log(distance) / Math.log(maximumDistanceAtWhichSoundCanBeHeard))));\n    }\n}\n\nexport const calculateVolumeOfEnemyRelativeToPlayer = (game) => ((position) => calculateVolumeAtPositionRelativeToPlayer(16, 0.3, game, position));\n\nexport const calculateVolumeOfPlayerRelativeToEnemy = (game) => ((position) => calculateVolumeAtPositionRelativeToPlayer(32, 1, game, position));\n\nexport function playRandomEnemyDeathSoundEffectAtVolume(game, position) {\n    const soundEffect = List_random(ofArray([new SoundEffect(12), new SoundEffect(13)]));\n    playSoundEffectAtVolume(calculateVolumeOfEnemyRelativeToPlayer(game)(position), soundEffect);\n}\n\nexport function playAttackSound(game, position, enemyType) {\n    const soundEffect = (enemyType.tag === 0) ? (new SoundEffect(17)) : (new SoundEffect(17));\n    playSoundEffectAtVolume(calculateVolumeOfEnemyRelativeToPlayer(game)(position), soundEffect);\n}\n\nexport function playSoundEffect(game, position, soundEffect) {\n    playSoundEffectAtVolume(calculateVolumeOfEnemyRelativeToPlayer(game)(position), soundEffect);\n}\n\n","import { unfold } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { fold, iterate } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { rangeDouble } from \"../fable_modules/fable-library.3.7.14/Range.js\";\n\nexport function rlewDecode(createDataView, mapHeadView, inView) {\n    const rlewTag = mapHeadView.getUint16(0, true);\n    const outView = createDataView(~(~inView.getUint16(0, true)));\n    unfold((tupledArg) => {\n        const inOffset = tupledArg[0] | 0;\n        const outOffset = tupledArg[1] | 0;\n        let patternInput;\n        const w = inView.getUint16(inOffset, true);\n        const newInOffset = (inOffset + 2) | 0;\n        if (w === rlewTag) {\n            const n = inView.getUint16(newInOffset, true);\n            const x = inView.getUint16(newInOffset + 2, true);\n            iterate((i) => {\n                outView.setUint16(outOffset + (i * 2), x, true);\n            }, rangeDouble(0, 1, (~(~n)) - 1));\n            patternInput = [newInOffset + 4, outOffset + (2 * (~(~n)))];\n        }\n        else {\n            outView.setUint16(outOffset, w, true);\n            patternInput = [newInOffset, outOffset + 2];\n        }\n        const nextInOffset = patternInput[0] | 0;\n        return (nextInOffset < inView.byteLength) ? [void 0, [nextInOffset, patternInput[1]]] : (void 0);\n    }, [2, 0]);\n    return outView;\n}\n\nexport function carmackDecode(createDataView, inView) {\n    const outView = createDataView(~(~inView.getUint16(0, true)));\n    const isNearPointer = (possiblePointer) => (possiblePointer === 167);\n    unfold((tupledArg) => {\n        let possiblePointer_1;\n        const inOffset = tupledArg[0] | 0;\n        const outOffset = tupledArg[1] | 0;\n        let patternInput;\n        const x = inView.getUint8(inOffset + 1);\n        if ((possiblePointer_1 = x, isNearPointer(possiblePointer_1) ? true : (possiblePointer_1 === 168))) {\n            const n = inView.getUint8(inOffset);\n            if (n === 0) {\n                outView.setUint8(outOffset, inView.getUint8(inOffset + 2));\n                outView.setUint8(outOffset + 1, x);\n                patternInput = [inOffset + 3, outOffset + 2];\n            }\n            else if (isNearPointer(x)) {\n                const offset = (2 * (~(~inView.getUint8(inOffset + 2)))) | 0;\n                patternInput = [inOffset + 3, fold((foldOffset, _arg1) => {\n                    outView.setUint16(foldOffset, outView.getUint16(foldOffset - offset, true), true);\n                    return (foldOffset + 2) | 0;\n                }, outOffset, rangeDouble(0, 1, (~(~n)) - 1))];\n            }\n            else {\n                const offset_1 = (2 * (~(~inView.getUint16(inOffset + 2, true)))) | 0;\n                patternInput = [inOffset + 4, fold((foldOffset_1, i) => {\n                    outView.setUint16(foldOffset_1, outView.getUint16(offset_1 + (2 * i), true), true);\n                    return (foldOffset_1 + 2) | 0;\n                }, outOffset, rangeDouble(0, 1, (~(~n)) - 1))];\n            }\n        }\n        else {\n            outView.setUint16(outOffset, inView.getUint16(inOffset, true), true);\n            patternInput = [inOffset + 2, outOffset + 2];\n        }\n        const newInOffset = patternInput[0] | 0;\n        return (newInOffset >= inView.byteLength) ? (void 0) : [void 0, [newInOffset, patternInput[1]]];\n    }, [2, 0]);\n    return outView;\n}\n\n","import { nonSeeded } from \"../fable_modules/fable-library.3.7.14/Random.js\";\nimport { map, concat, sortBy, toList } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { rangeDouble } from \"../fable_modules/fable-library.3.7.14/Range.js\";\nimport { comparePrimitives } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { empty } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { PixelDissolver, PixelDissolverState } from \"../Model.fs.js\";\n\nconst random = (() => {\n    const objectArg = nonSeeded();\n    return (arg00) => objectArg.Next1(arg00);\n})();\n\nexport function create(width, height, zoom) {\n    const dissolveWidth = (width / zoom) - zoom;\n    return new PixelDissolver(toList(sortBy((_arg1) => random(width * height), concat(map((y) => map((x) => [x, y], rangeDouble(0, 1, (~(~dissolveWidth)) + 1)), rangeDouble(0, 1, (~(~((height / zoom) - zoom))) + 1))), {\n        Compare: comparePrimitives,\n    })), empty(), zoom, 750, new PixelDissolverState(0));\n}\n\n","import { singleton as singleton_1, item, ofArray, empty } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { WeaponType, CompositeArea, DifficultyLevel, Game, ViewportFilter, Camera as Camera_2, Vector2D, Player as Player_1 } from \"../Model.fs.js\";\nimport { singleton } from \"../fable_modules/fable-library.3.7.14/AsyncBuilder.js\";\nimport { loadGraphics } from \"../Graphics.Common.fs.js\";\nimport { scaleSprite, loadStatusBar, loadSprites } from \"../Graphics.fs.js\";\nimport { getWeapon, loadLevelFromRawMap, loadRawMap } from \"./Map.fs.js\";\nimport { map, toList } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { ofList } from \"../fable_modules/fable-library.3.7.14/Set.js\";\nimport { comparePrimitives } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { rangeDouble } from \"../fable_modules/fable-library.3.7.14/Range.js\";\nimport { updateFrame } from \"./Update.fs.js\";\nimport { create } from \"./Dissolver.fs.js\";\n\nconst initialGameState = new Game(-1, empty(), empty(), empty(), empty(), new Player_1(0, 3, 100, 0.5, -1, 9, empty(), 0, 1500), new Camera_2(new Vector2D(12, 6), new Vector2D(-1, 0), new Vector2D(0, 1), 1), 0, false, void 0, empty(), new ViewportFilter(0), void 0, (g, _arg1) => g);\n\nexport function init(statusBarScale, initScene) {\n    return singleton.Delay(() => {\n        const startingLevel = 0;\n        return singleton.Bind(loadGraphics(), (_arg1) => singleton.Bind(loadSprites(), (_arg2) => {\n            const sprites = _arg2;\n            return singleton.Bind(loadStatusBar(statusBarScale), (_arg3) => singleton.Bind(loadRawMap(0), (_arg4) => singleton.Bind(loadRawMap(1), (_arg5) => singleton.Bind(loadRawMap(2), (_arg6) => singleton.Bind(loadRawMap(3), (_arg7) => singleton.Bind(loadRawMap(4), (_arg8) => singleton.Bind(loadRawMap(5), (_arg9) => singleton.Bind(loadRawMap(6), (_arg10) => singleton.Bind(loadRawMap(7), (_arg11) => singleton.Bind(loadRawMap(8), (_arg12) => singleton.Bind(loadRawMap(9), (_arg13) => {\n                const levels = ofArray([_arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12, _arg13]);\n                const patternInput = initScene();\n                const viewportHeight = patternInput[2] | 0;\n                const level = loadLevelFromRawMap(new DifficultyLevel(3), item(startingLevel, levels));\n                const resetLevel = (game_2, player) => (new Game(startingLevel, level.Map, level.Areas, toList(map((i_1) => (new CompositeArea(i_1, ofList(singleton_1(i_1), {\n                    Compare: comparePrimitives,\n                }))), rangeDouble(0, 1, level.NumberOfAreas - 1))), level.GameObjects, new Player_1(player.Score, player.Lives, 100, player.Radius, 1, 9, ofArray([getWeapon(sprites, new WeaponType(0), (image) => scaleSprite(viewportHeight, viewportHeight, image)), getWeapon(sprites, new WeaponType(1), (image_1) => scaleSprite(viewportHeight, viewportHeight, image_1))]), player.CurrentFaceIndex, player.TimeToFaceChangeMs), level.PlayerStartingPosition, game_2.ControlState, game_2.IsFiring, game_2.TimeToNextWeaponFrame, level.Doors, game_2.ViewportFilter, game_2.PixelDissolver, game_2.ResetLevel));\n                let gameState;\n                const inputRecord = resetLevel(initialGameState, initialGameState.Player);\n                gameState = (new Game(1, inputRecord.Map, inputRecord.Areas, inputRecord.CompositeAreas, inputRecord.GameObjects, inputRecord.Player, inputRecord.Camera, inputRecord.ControlState, inputRecord.IsFiring, inputRecord.TimeToNextWeaponFrame, inputRecord.Doors, inputRecord.ViewportFilter, inputRecord.PixelDissolver, resetLevel));\n                return singleton.Return([(game) => ((frameTime) => updateFrame(game, (inputGame) => {\n                    const newLevel = loadLevelFromRawMap(new DifficultyLevel(3), item(inputGame.Level + 1, levels));\n                    return new Game(inputGame.Level + 1, newLevel.Map, newLevel.Areas, toList(map((i) => (new CompositeArea(i, ofList(singleton_1(i), {\n                        Compare: comparePrimitives,\n                    }))), rangeDouble(0, 1, newLevel.NumberOfAreas - 1))), newLevel.GameObjects, inputGame.Player, newLevel.PlayerStartingPosition, inputGame.ControlState, inputGame.IsFiring, inputGame.TimeToNextWeaponFrame, newLevel.Doors, inputGame.ViewportFilter, inputGame.PixelDissolver, inputGame.ResetLevel);\n                }, frameTime, () => create(patternInput[1], viewportHeight, 2), patternInput[0](_arg3)(_arg1)(sprites)(game))), (game_1) => ((controlState) => (new Game(game_1.Level, game_1.Map, game_1.Areas, game_1.CompositeAreas, game_1.GameObjects, game_1.Player, game_1.Camera, game_1.ControlState ^ controlState, game_1.IsFiring, game_1.TimeToNextWeaponFrame, game_1.Doors, game_1.ViewportFilter, game_1.PixelDissolver, game_1.ResetLevel))), gameState]);\n            })))))))))));\n        }));\n    });\n}\n\n","import { FSharpException } from \"../fable_modules/fable-library.3.7.14/Types.js\";\nimport { class_type } from \"../fable_modules/fable-library.3.7.14/Reflection.js\";\nimport { numberHash, partialApply, equalArrays, uncurry, equals } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { reverse, contains, ofArray, tryFind, mapIndexed, empty, singleton as singleton_1, append, length, item, toArray, map as map_1 } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { PlayerWeapon, WeaponType, WolfensteinMap, GameObject, PathState, BasicGameObject__get_MapPosition, MapDirection__ToDelta, EnemyType, Enemy, Enemy_AnimationTimeForState_4C3F69DE, BasicGameObject as BasicGameObject_2, Vector2D__UnsquaredDistanceFrom_Z41DD997C, Vector2D_op_Subtraction_3C4D5180, PathState_get_Empty, EnemyStateType, MapDirection, DoorStatus, DoorDirection, DoorState, RawMap, Camera, Vector2D__get_CrossProduct, Vector2D_op_Multiply_Z23A8CFC1, Vector2D, Cell, Wall } from \"../Model.fs.js\";\nimport { toList, iterate, fold, filter, map as map_2, concat } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { map as map_3, value as value_6 } from \"../fable_modules/fable-library.3.7.14/Option.js\";\nimport { rangeDouble } from \"../fable_modules/fable-library.3.7.14/Range.js\";\nimport { singleton } from \"../fable_modules/fable-library.3.7.14/AsyncBuilder.js\";\nimport { loadAsset } from \"../Utils.fs.js\";\nimport { MAPHEAD, GAMEMAPS } from \"../Assets.fs.js\";\nimport { carmackDecode, rlewDecode } from \"./Compression.fs.js\";\nimport { map as map_4 } from \"../fable_modules/fable-library.3.7.14/Array.js\";\n\nexport class MapLoadException extends FSharpException {\n    constructor(Data0) {\n        super();\n        this.Data0 = Data0;\n    }\n}\n\nexport function MapLoadException$reflection() {\n    return class_type(\"App.Map.MapLoadException\", void 0, MapLoadException, class_type(\"System.Exception\"));\n}\n\nfunction MapLoadException__Equals_229D3F39(this$, obj) {\n    if (!equals(this$, null)) {\n        if (!equals(obj, null)) {\n            if (obj instanceof MapLoadException) {\n                return this$.Data0 === obj.Data0;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else if (!equals(obj, null)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nexport class PlayerStartingPositionNotFoundException extends FSharpException {\n    constructor() {\n        super();\n    }\n}\n\nexport function PlayerStartingPositionNotFoundException$reflection() {\n    return class_type(\"App.Map.PlayerStartingPositionNotFoundException\", void 0, PlayerStartingPositionNotFoundException, class_type(\"System.Exception\"));\n}\n\nfunction PlayerStartingPositionNotFoundException__Equals_229D3F39(this$, obj) {\n    if (!equals(this$, null)) {\n        if (!equals(obj, null)) {\n            if (obj instanceof PlayerStartingPositionNotFoundException) {\n                return 1;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else if (!equals(obj, null)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nexport class InvalidDoorException extends FSharpException {\n    constructor() {\n        super();\n    }\n}\n\nexport function InvalidDoorException$reflection() {\n    return class_type(\"App.Map.InvalidDoorException\", void 0, InvalidDoorException, class_type(\"System.Exception\"));\n}\n\nfunction InvalidDoorException__Equals_229D3F39(this$, obj) {\n    if (!equals(this$, null)) {\n        if (!equals(obj, null)) {\n            if (obj instanceof InvalidDoorException) {\n                return 1;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else if (!equals(obj, null)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nfunction startingHitPoints(difficultyLevel, enemyType) {\n    switch (difficultyLevel.tag) {\n        case 1: {\n            switch (enemyType.tag) {\n                case 1: {\n                    return 50;\n                }\n                case 2: {\n                    return 100;\n                }\n                case 3: {\n                    return 1;\n                }\n                case 4: {\n                    return 55;\n                }\n                case 5: {\n                    return 300;\n                }\n                case 6: {\n                    return 950;\n                }\n                case 7: {\n                    return 950;\n                }\n                case 8: {\n                    return 950;\n                }\n                case 9: {\n                    return 850;\n                }\n                case 10: {\n                    return 950;\n                }\n                case 11: {\n                    return 950;\n                }\n                case 12: {\n                    return 25;\n                }\n                default: {\n                    return 25;\n                }\n            }\n        }\n        case 2: {\n            switch (enemyType.tag) {\n                case 1: {\n                    return 50;\n                }\n                case 2: {\n                    return 100;\n                }\n                case 3: {\n                    return 1;\n                }\n                case 4: {\n                    return 55;\n                }\n                case 5: {\n                    return 400;\n                }\n                case 6: {\n                    return 1050;\n                }\n                case 7: {\n                    return 1050;\n                }\n                case 8: {\n                    return 1550;\n                }\n                case 9: {\n                    return 1050;\n                }\n                case 10: {\n                    return 1050;\n                }\n                case 11: {\n                    return 1050;\n                }\n                case 12: {\n                    return 25;\n                }\n                default: {\n                    return 25;\n                }\n            }\n        }\n        case 3: {\n            switch (enemyType.tag) {\n                case 1: {\n                    return 50;\n                }\n                case 2: {\n                    return 100;\n                }\n                case 3: {\n                    return 1;\n                }\n                case 4: {\n                    return 65;\n                }\n                case 5: {\n                    return 500;\n                }\n                case 6: {\n                    return 1200;\n                }\n                case 7: {\n                    return 1200;\n                }\n                case 8: {\n                    return 2400;\n                }\n                case 9: {\n                    return 1200;\n                }\n                case 10: {\n                    return 1200;\n                }\n                case 11: {\n                    return 1200;\n                }\n                case 12: {\n                    return 25;\n                }\n                default: {\n                    return 25;\n                }\n            }\n        }\n        default: {\n            switch (enemyType.tag) {\n                case 1: {\n                    return 50;\n                }\n                case 2: {\n                    return 100;\n                }\n                case 3: {\n                    return 1;\n                }\n                case 4: {\n                    return 45;\n                }\n                case 5: {\n                    return 200;\n                }\n                case 6: {\n                    return 800;\n                }\n                case 7: {\n                    return 850;\n                }\n                case 8: {\n                    return 850;\n                }\n                case 9: {\n                    return 850;\n                }\n                case 10: {\n                    return 850;\n                }\n                case 11: {\n                    return 850;\n                }\n                case 12: {\n                    return 25;\n                }\n                default: {\n                    return 25;\n                }\n            }\n        }\n    }\n}\n\nexport function mapFromTextures(source) {\n    return map_1((row) => map_1((textureIndex) => {\n        if (textureIndex > 0) {\n            return new Cell(0, new Wall(textureIndex, textureIndex));\n        }\n        else {\n            return new Cell(3);\n        }\n    }, row), source);\n}\n\nexport function getPlaneValue(plane, x, y) {\n    return plane.getUint16(2 * (x + (64 * y)), true);\n}\n\nfunction traverseMap(handler, mapPlane) {\n    const mapSize = (~(~Math.sqrt(~(~(mapPlane.byteLength / 2))))) | 0;\n    return concat(map_2((rowIndex) => map_2(value_6, filter((option) => (option != null), map_2((colIndex) => handler(colIndex, rowIndex, getPlaneValue(mapPlane, colIndex, rowIndex)), rangeDouble(0, 1, mapSize - 1)))), rangeDouble(0, 1, mapSize - 1)));\n}\n\nfunction getStartingPosition(mapSize, plane1) {\n    const cameraOption = fold((outerCameraOption, row) => fold((innerCameraOption, column) => {\n        if (innerCameraOption == null) {\n            const mapValue = getPlaneValue(plane1, column, row);\n            if ((19 <= mapValue) && (mapValue <= 22)) {\n                const direction = (mapValue === 19) ? (new Vector2D(0, -1)) : ((mapValue === 20) ? (new Vector2D(-1, 0)) : ((mapValue === 21) ? (new Vector2D(0, 1)) : ((mapValue === 22) ? (new Vector2D(1, 0)) : (new Vector2D(1, 0)))));\n                const fieldOfView = 1;\n                return new Camera(new Vector2D((mapSize - column) - 0.5, row + 0.5), direction, Vector2D_op_Multiply_Z23A8CFC1(Vector2D__get_CrossProduct(direction), fieldOfView), fieldOfView);\n            }\n            else {\n                return void 0;\n            }\n        }\n        else {\n            return innerCameraOption;\n        }\n    }, outerCameraOption, rangeDouble(0, 1, mapSize)), void 0, rangeDouble(0, 1, mapSize));\n    if (cameraOption != null) {\n        return cameraOption;\n    }\n    else {\n        throw (new PlayerStartingPositionNotFoundException());\n    }\n}\n\nexport function loadRawMap(levelIndex) {\n    return singleton.Delay(() => {\n        const createDataView = (size) => (new DataView(new ArrayBuffer(size)));\n        return singleton.Bind(loadAsset(GAMEMAPS), (_arg1) => singleton.Bind(loadAsset(MAPHEAD), (_arg2) => {\n            let matchValue, copyOfStruct, copyOfStruct_1, mapHeadView, offset, mapHeader, plane0View, plane1View, plane2View;\n            return singleton.Return((matchValue = [_arg1, _arg2], (copyOfStruct = matchValue[0], (copyOfStruct.tag === 0) ? ((copyOfStruct_1 = matchValue[1], (copyOfStruct_1.tag === 0) ? ((mapHeadView = (new DataView(copyOfStruct_1.fields[0])), (offset = mapHeadView.getUint32(2 + (4 * levelIndex), true), (mapHeader = (new DataView(copyOfStruct.fields[0], (~(~offset)), 42)), (plane0View = (new DataView(copyOfStruct.fields[0], (~(~mapHeader.getUint32(0, true))), mapHeader.getUint16(12, true))), (plane1View = (new DataView(copyOfStruct.fields[0], (~(~mapHeader.getUint32(4, true))), mapHeader.getUint16(14, true))), (plane2View = (new DataView(copyOfStruct.fields[0], (~(~mapHeader.getUint32(4, true))), mapHeader.getUint16(14, true))), new RawMap(64, rlewDecode(createDataView, mapHeadView, carmackDecode(createDataView, plane0View)), rlewDecode(createDataView, mapHeadView, carmackDecode(createDataView, plane1View)), rlewDecode(createDataView, mapHeadView, carmackDecode(createDataView, plane2View)))))))))) : (() => {\n                throw (new MapLoadException(\"Unexpected error\"));\n            })())) : (() => {\n                throw (new MapLoadException(\"Unexpected error\"));\n            })())));\n        }));\n    });\n}\n\nexport function calculateAreasFromMap(map, doors) {\n    let areas = toArray(map_1((row) => toArray(map_1((_arg1) => -1, row)), map));\n    let currentArea = 0;\n    const walk = (rowIndex, colIndex) => {\n        if ((((rowIndex >= 0) && (rowIndex < 64)) && (colIndex >= 0)) && (colIndex < 64)) {\n            if (areas[rowIndex][colIndex] === -1) {\n                const matchValue = item(colIndex, item(rowIndex, map));\n                switch (matchValue.tag) {\n                    case 3:\n                    case 2: {\n                        areas[rowIndex][colIndex] = (currentArea | 0);\n                        walk(rowIndex - 1, colIndex);\n                        walk(rowIndex + 1, colIndex);\n                        walk(rowIndex, colIndex - 1);\n                        walk(rowIndex, colIndex + 1);\n                        return true;\n                    }\n                    default: {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    iterate((rowIndex_1) => {\n        iterate((colIndex_1) => {\n            if (walk(rowIndex_1, colIndex_1)) {\n                currentArea = ((currentArea + 1) | 0);\n            }\n        }, rangeDouble(0, 1, length(item(rowIndex_1, map)) - 1));\n    }, rangeDouble(0, 1, length(map) - 1));\n    const doorsPatchedWithAreas = map_1((door) => {\n        const patternInput = door.MapPosition;\n        const doorY = patternInput[1] | 0;\n        const doorX = patternInput[0] | 0;\n        if (door.DoorDirection.tag === 1) {\n            areas[doorY][doorX] = (areas[doorY - 1][doorX] | 0);\n            return new DoorState(door.TextureIndex, door.DoorDirection, door.Status, door.Offset, door.TimeRemainingInAnimationState, door.MapPosition, areas[doorY - 1][doorX], areas[doorY + 1][doorX]);\n        }\n        else {\n            areas[doorY][doorX] = (areas[doorY][doorX - 1] | 0);\n            return new DoorState(door.TextureIndex, door.DoorDirection, door.Status, door.Offset, door.TimeRemainingInAnimationState, door.MapPosition, areas[doorY][doorX - 1], areas[doorY][doorX + 1]);\n        }\n    }, doors);\n    return [areas, doorsPatchedWithAreas, currentArea];\n}\n\nexport function loadLevelFromRawMap(difficulty, raw) {\n    const patternInput_2 = fold((tupledArg, rowIndex) => {\n        const patternInput_1 = fold(uncurry(2, (tupledArg_1) => {\n            const row = tupledArg_1[0];\n            const innerDoors = tupledArg_1[1];\n            return (colIndex) => {\n                const rawMapCell = raw.Plane0.getUint16(2 * (colIndex + (64 * rowIndex)), true);\n                if (rawMapCell <= 63) {\n                    const textureIndex = ((2 * (~(~rawMapCell))) - 1) | 0;\n                    return [append(row, singleton_1(new Cell(0, new Wall(textureIndex, textureIndex - 1)))), innerDoors];\n                }\n                else if ((rawMapCell >= 90) && (rawMapCell <= 101)) {\n                    let patternInput;\n                    if (rawMapCell === 90) {\n                        patternInput = [99, new DoorDirection(0)];\n                    }\n                    else if (rawMapCell === 92) {\n                        patternInput = [105, new DoorDirection(0)];\n                    }\n                    else if (rawMapCell === 94) {\n                        patternInput = [105, new DoorDirection(0)];\n                    }\n                    else if (rawMapCell === 100) {\n                        patternInput = [103, new DoorDirection(0)];\n                    }\n                    else if (rawMapCell === 91) {\n                        patternInput = [98, new DoorDirection(1)];\n                    }\n                    else if (rawMapCell === 93) {\n                        patternInput = [104, new DoorDirection(1)];\n                    }\n                    else if (rawMapCell === 95) {\n                        patternInput = [104, new DoorDirection(1)];\n                    }\n                    else if (rawMapCell === 101) {\n                        patternInput = [102, new DoorDirection(1)];\n                    }\n                    else {\n                        throw (new InvalidDoorException());\n                    }\n                    const doorState = new DoorState(patternInput[0], patternInput[1], new DoorStatus(3), 0, 0, [colIndex, rowIndex], -1, -1);\n                    return [append(row, singleton_1(new Cell(1, length(innerDoors)))), append(innerDoors, singleton_1(doorState))];\n                }\n                else {\n                    const objectValue = getPlaneValue(raw.Plane1, colIndex, rowIndex);\n                    return [append(row, singleton_1((objectValue === 90) ? (new Cell(2, new MapDirection(2))) : ((objectValue === 91) ? (new Cell(2, new MapDirection(1))) : ((objectValue === 92) ? (new Cell(2, new MapDirection(0))) : ((objectValue === 93) ? (new Cell(2, new MapDirection(7))) : ((objectValue === 94) ? (new Cell(2, new MapDirection(6))) : ((objectValue === 95) ? (new Cell(2, new MapDirection(5))) : ((objectValue === 96) ? (new Cell(2, new MapDirection(4))) : ((objectValue === 97) ? (new Cell(2, new MapDirection(3))) : (new Cell(3))))))))))), innerDoors];\n                }\n            };\n        }), [empty(), tupledArg[1]], rangeDouble(0, 1, raw.MapSize - 1));\n        return [append(tupledArg[0], singleton_1(patternInput_1[0])), patternInput_1[1]];\n    }, [empty(), empty()], rangeDouble(0, 1, raw.MapSize - 1));\n    const doors = patternInput_2[1];\n    const patchedPlane0 = mapIndexed((rowIndex_1, row_1) => mapIndexed((colIndex_1, cell_1) => {\n        if (cell_1.tag === 0) {\n            const wall = cell_1.fields[0];\n            return new Cell(0, new Wall(((tryFind((doorState_1) => equalArrays(doorState_1.MapPosition, [colIndex_1 + 1, rowIndex_1]), doors) != null) ? true : (tryFind((doorState_2) => equalArrays(doorState_2.MapPosition, [colIndex_1 - 1, rowIndex_1]), doors) != null)) ? 100 : wall.NorthSouthTextureIndex, ((tryFind((doorState_3) => equalArrays(doorState_3.MapPosition, [colIndex_1, rowIndex_1 + 1]), doors) != null) ? true : (tryFind((doorState_4) => equalArrays(doorState_4.MapPosition, [colIndex_1, rowIndex_1 - 1]), doors) != null)) ? 101 : wall.EastWestTextureIndex));\n        }\n        else {\n            return cell_1;\n        }\n    }, row_1), patternInput_2[0]);\n    const playerStartingPosition = getStartingPosition(raw.MapSize, raw.Plane1);\n    const standingOrMoving = (baseValue, value) => {\n        if ((value - baseValue) < 4) {\n            return new EnemyStateType(0);\n        }\n        else {\n            return new EnemyStateType(3, PathState_get_Empty());\n        }\n    };\n    let gameObjects;\n    const createEnemy = (spriteIndex_1, spriteBlocks, framesPerBlock, deathSprites, hurtSpriteIndex, attackingSprites, score, patrolSpeed, chaseSpeed, enemyType, x, y, directionIntOption, startingState) => {\n        let directionOption, direction_1;\n        const position = new Vector2D((raw.MapSize - x) - 0.5, y + 0.5);\n        const State = (raw.Plane0.getUint16(2 * (x + (64 * y)), true) === 106) ? (new EnemyStateType(1)) : startingState;\n        return new Enemy(enemyType, new BasicGameObject_2(position, Vector2D_op_Subtraction_3C4D5180(position, playerStartingPosition.Position), Vector2D__UnsquaredDistanceFrom_Z41DD997C(position, playerStartingPosition.Position), spriteIndex_1, true, false, 0, 0, 0, score, true), (directionOption = directionIntOption, (directionOption == null) ? (new MapDirection(8)) : ((direction_1 = directionOption, (direction_1 === 0) ? (new MapDirection(2)) : ((direction_1 === 1) ? (new MapDirection(0)) : ((direction_1 === 2) ? (new MapDirection(6)) : ((direction_1 === 3) ? (new MapDirection(4)) : (() => {\n            throw (new MapLoadException(`Direction of ${direction_1} int not between 0 and 3`));\n        })())))))), deathSprites, attackingSprites, spriteBlocks, framesPerBlock, 0, Enemy_AnimationTimeForState_4C3F69DE(startingState), State, true, false, false, startingHitPoints(difficulty, enemyType), hurtSpriteIndex, patrolSpeed, chaseSpeed);\n    };\n    const guardEnemy = partialApply(4, createEnemy, [50, 4, 8, ofArray([90, 91, 92, 93, 95]), 94, ofArray([96, 97, 98]), 100, 0.5, 1, new EnemyType(0)]);\n    const dogEnemy = partialApply(4, createEnemy, [99, 3, 8, ofArray([131, 132, 133, 134]), 131, ofArray([135, 136, 137]), 200, 1, 1.5, new EnemyType(3)]);\n    const officerEnemy = partialApply(4, createEnemy, [138, 4, 8, ofArray([179, 180, 181, 183]), 182, ofArray([184, 185, 186]), 500, 0.5, 1.25, new EnemyType(2)]);\n    const zombieEnemy = partialApply(4, createEnemy, [187, 4, 8, ofArray([228, 229, 230, 232, 233]), 231, ofArray([234, 235, 236, 237]), 700, 0.5, 1, new EnemyType(4)]);\n    const leonEnemy = partialApply(4, createEnemy, [238, 4, 8, ofArray([279, 280, 281, 283, 284]), 282, ofArray([285, 286, 287]), 400, 0.5, 1.25, new EnemyType(1)]);\n    const hansEnemy = partialApply(4, createEnemy, [296, 1, 4, ofArray([304, 305, 306, 303]), 304, ofArray([300, 301, 302]), 2000, 0.5, 1, new EnemyType(10)]);\n    const schabbsEnemy = partialApply(4, createEnemy, [307, 1, 4, ofArray([313, 314, 315, 316]), 313, ofArray([311, 312]), 2000, 0.5, 1, new EnemyType(8)]);\n    const fakeAdolfEnemy = partialApply(4, createEnemy, [321, 1, 4, ofArray([328, 329, 330, 331, 332, 333]), 328, singleton_1(325), 2000, 0.5, 1, new EnemyType(5)]);\n    const adolfEnemy = partialApply(4, createEnemy, [345, 1, 4, ofArray([353, 354, 355, 356, 357, 358, 359, 352]), 353, ofArray([349, 350, 351]), 5000, 0.5, 1, new EnemyType(6)]);\n    const ottoEnemy = partialApply(4, createEnemy, [360, 1, 4, ofArray([366, 367, 368, 369]), 366, ofArray([364, 365]), 5000, 0.5, 1, new EnemyType(11)]);\n    const gretelEnemy = partialApply(4, createEnemy, [385, 1, 4, ofArray([393, 394, 395, 392]), 393, ofArray([389, 390, 391]), 5000, 0.5, 1, new EnemyType(9)]);\n    const fettgesichtEnemy = partialApply(4, createEnemy, [396, 1, 4, ofArray([404, 405, 406, 407]), 404, ofArray([400, 401, 402, 403]), 5000, 0.5, 1, new EnemyType(7)]);\n    const withHitPoints = (pts, go) => (new BasicGameObject_2(go.Position, go.PlayerRelativePosition, go.UnsquaredDistanceFromPlayer, go.SpriteIndex, go.CollidesWithBullets, true, pts, go.AmmoRestored, go.LivesRestored, go.Score, go.Blocking));\n    const withScore = (pts_1, go_1) => (new BasicGameObject_2(go_1.Position, go_1.PlayerRelativePosition, go_1.UnsquaredDistanceFromPlayer, go_1.SpriteIndex, go_1.CollidesWithBullets, true, go_1.HitpointsRestored, go_1.AmmoRestored, go_1.LivesRestored, pts_1, go_1.Blocking));\n    gameObjects = map_1((gameObject) => {\n        let patternInput_3, patternInput_4, patternInput_5;\n        if (gameObject.tag === 1) {\n            const e_1 = gameObject.fields[0];\n            return new GameObject(1, (e_1.State.tag === 3) ? ((patternInput_3 = MapDirection__ToDelta(e_1.Direction), (patternInput_4 = BasicGameObject__get_MapPosition(e_1.BasicGameObject), (patternInput_5 = [patternInput_4[0] + patternInput_3[0], patternInput_4[1] + patternInput_3[1]], new Enemy(e_1.EnemyType, e_1.BasicGameObject, e_1.Direction, e_1.DeathSpriteIndexes, e_1.AttackSpriteIndexes, e_1.SpriteBlocks, e_1.FramesPerBlock, e_1.CurrentAnimationFrame, e_1.TimeUntilNextAnimationFrame, new EnemyStateType(3, new PathState(patternInput_5[0], patternInput_5[1], false)), e_1.IsFirstAttack, e_1.FireAtPlayerRequired, e_1.MoveToChaseRequired, e_1.HitPoints, e_1.HurtSpriteIndex, e_1.PatrolSpeed, e_1.ChaseSpeed))))) : e_1);\n        }\n        else {\n            return gameObject;\n        }\n    }, toList(traverseMap((colIndex_2, rowIndex_2, value_2) => {\n        let position_1, basicGameObject, SpriteIndex, go_2, go_3, bo, deadGuard, inputRecord;\n        if ((value_2 >= 23) && (value_2 <= 70)) {\n            return new GameObject(0, (position_1 = (new Vector2D((raw.MapSize - colIndex_2) - 0.5, rowIndex_2 + 0.5)), (basicGameObject = ((SpriteIndex = (((~(~value_2)) - 21) | 0), new BasicGameObject_2(position_1, Vector2D_op_Subtraction_3C4D5180(position_1, playerStartingPosition.Position), Vector2D__UnsquaredDistanceFrom_Z41DD997C(position_1, playerStartingPosition.Position), SpriteIndex, false, false, 0, 0, 0, 0, false))), (value_2 === 29) ? withHitPoints(4, basicGameObject) : ((value_2 === 47) ? withHitPoints(10, basicGameObject) : ((value_2 === 48) ? withHitPoints(25, basicGameObject) : ((value_2 === 49) ? ((go_2 = basicGameObject, new BasicGameObject_2(go_2.Position, go_2.PlayerRelativePosition, go_2.UnsquaredDistanceFromPlayer, go_2.SpriteIndex, go_2.CollidesWithBullets, true, go_2.HitpointsRestored, 8, go_2.LivesRestored, go_2.Score, go_2.Blocking))) : ((value_2 === 52) ? withScore(100, basicGameObject) : ((value_2 === 53) ? withScore(500, basicGameObject) : ((value_2 === 54) ? withScore(1000, basicGameObject) : ((value_2 === 55) ? withScore(5000, basicGameObject) : ((value_2 === 56) ? ((go_3 = basicGameObject, new BasicGameObject_2(go_3.Position, go_3.PlayerRelativePosition, go_3.UnsquaredDistanceFromPlayer, go_3.SpriteIndex, go_3.CollidesWithBullets, true, go_3.HitpointsRestored, go_3.AmmoRestored, 1, go_3.Score, go_3.Blocking))) : ((bo = basicGameObject, contains(value_2, ofArray([25, 26, 30, 34, 35, 36, 38, 39, 40, 41, 59, 60, 68, 69, 70, 71]), {\n                Equals: (x_1, y_1) => (x_1 === y_1),\n                GetHashCode: numberHash,\n            }) ? (new BasicGameObject_2(bo.Position, bo.PlayerRelativePosition, bo.UnsquaredDistanceFromPlayer, bo.SpriteIndex, bo.CollidesWithBullets, bo.Pickupable, bo.HitpointsRestored, bo.AmmoRestored, bo.LivesRestored, bo.Score, true)) : bo)))))))))))));\n        }\n        else if (value_2 >= 108) {\n            return map_3((e) => (new GameObject(1, e)), ((108 <= value_2) && (value_2 < 116)) ? guardEnemy(colIndex_2)(rowIndex_2)((value_2 - 108) % 4)(standingOrMoving(108, value_2)) : (((144 <= value_2) && (value_2 < 152)) ? guardEnemy(colIndex_2)(rowIndex_2)((value_2 - 144) % 4)(standingOrMoving(144, value_2)) : (((180 <= value_2) && (value_2 < 188)) ? guardEnemy(colIndex_2)(rowIndex_2)((value_2 - 180) % 4)(standingOrMoving(180, value_2)) : (((116 <= value_2) && (value_2 < 124)) ? leonEnemy(colIndex_2)(rowIndex_2)((value_2 - 116) % 4)(standingOrMoving(116, value_2)) : (((152 <= value_2) && (value_2 < 160)) ? leonEnemy(colIndex_2)(rowIndex_2)((value_2 - 152) % 4)(standingOrMoving(152, value_2)) : (((188 <= value_2) && (value_2 < 196)) ? leonEnemy(colIndex_2)(rowIndex_2)((value_2 - 188) % 4)(standingOrMoving(188, value_2)) : (((126 <= value_2) && (value_2 < 134)) ? officerEnemy(colIndex_2)(rowIndex_2)((value_2 - 126) % 4)(standingOrMoving(126, value_2)) : (((162 <= value_2) && (value_2 < 170)) ? officerEnemy(colIndex_2)(rowIndex_2)((value_2 - 162) % 4)(standingOrMoving(162, value_2)) : (((198 <= value_2) && (value_2 < 206)) ? officerEnemy(colIndex_2)(rowIndex_2)((value_2 - 198) % 4)(standingOrMoving(198, value_2)) : ((124 === value_2) ? ((deadGuard = guardEnemy(colIndex_2)(rowIndex_2)((value_2 - 108) % 4)(new EnemyStateType(8)), new Enemy(deadGuard.EnemyType, (inputRecord = deadGuard.BasicGameObject, new BasicGameObject_2(inputRecord.Position, inputRecord.PlayerRelativePosition, inputRecord.UnsquaredDistanceFromPlayer, inputRecord.SpriteIndex, inputRecord.CollidesWithBullets, inputRecord.Pickupable, inputRecord.HitpointsRestored, inputRecord.AmmoRestored, inputRecord.LivesRestored, inputRecord.Score, false)), deadGuard.Direction, deadGuard.DeathSpriteIndexes, deadGuard.AttackSpriteIndexes, deadGuard.SpriteBlocks, deadGuard.FramesPerBlock, length(deadGuard.DeathSpriteIndexes) - 1, deadGuard.TimeUntilNextAnimationFrame, deadGuard.State, deadGuard.IsFirstAttack, deadGuard.FireAtPlayerRequired, deadGuard.MoveToChaseRequired, deadGuard.HitPoints, deadGuard.HurtSpriteIndex, deadGuard.PatrolSpeed, deadGuard.ChaseSpeed))) : (((138 <= value_2) && (value_2 < 142)) ? dogEnemy(colIndex_2)(rowIndex_2)((value_2 - 138) % 4)(new EnemyStateType(3, PathState_get_Empty())) : (((174 <= value_2) && (value_2 < 178)) ? dogEnemy(colIndex_2)(rowIndex_2)((value_2 - 174) % 4)(new EnemyStateType(3, PathState_get_Empty())) : (((210 <= value_2) && (value_2 < 214)) ? dogEnemy(colIndex_2)(rowIndex_2)((value_2 - 210) % 4)(new EnemyStateType(3, PathState_get_Empty())) : (((216 <= value_2) && (value_2 < 224)) ? zombieEnemy(colIndex_2)(rowIndex_2)((value_2 - 216) % 4)(standingOrMoving(216, value_2)) : (((234 <= value_2) && (value_2 < 242)) ? zombieEnemy(colIndex_2)(rowIndex_2)((value_2 - 234) % 4)(standingOrMoving(234, value_2)) : ((value_2 === 160) ? fakeAdolfEnemy(colIndex_2)(rowIndex_2)(void 0)(new EnemyStateType(1)) : ((value_2 === 178) ? adolfEnemy(colIndex_2)(rowIndex_2)(void 0)(new EnemyStateType(1)) : ((value_2 === 179) ? fettgesichtEnemy(colIndex_2)(rowIndex_2)(void 0)(new EnemyStateType(1)) : ((value_2 === 196) ? schabbsEnemy(colIndex_2)(rowIndex_2)(void 0)(new EnemyStateType(1)) : ((value_2 === 197) ? gretelEnemy(colIndex_2)(rowIndex_2)(void 0)(new EnemyStateType(1)) : ((value_2 === 214) ? hansEnemy(colIndex_2)(rowIndex_2)(void 0)(new EnemyStateType(1)) : ((value_2 === 215) ? ottoEnemy(colIndex_2)(rowIndex_2)(void 0)(new EnemyStateType(1)) : (void 0)))))))))))))))))))))));\n        }\n        else {\n            return void 0;\n        }\n    }, raw.Plane1)));\n    const map = map_1(reverse, patchedPlane0);\n    const patternInput_6 = calculateAreasFromMap(map, map_1((door) => {\n        let tupledArg_2;\n        return new DoorState(door.TextureIndex, door.DoorDirection, door.Status, door.Offset, door.TimeRemainingInAnimationState, (tupledArg_2 = door.MapPosition, [(raw.MapSize - 1) - tupledArg_2[0], tupledArg_2[1]]), door.AreaOne, door.AreaTwo);\n    }, doors));\n    return new WolfensteinMap(raw.MapSize, raw.MapSize, map, ofArray(map_4(ofArray, patternInput_6[0])), patternInput_6[2] + 1, gameObjects, playerStartingPosition, patternInput_6[1]);\n}\n\nexport function createAmmo(playerPosition, mapX, mapY) {\n    let SpriteIndex;\n    const position = new Vector2D(mapX + 0.5, mapY + 0.5);\n    return new GameObject(0, (SpriteIndex = ((49 - 21) | 0), new BasicGameObject_2(position, Vector2D_op_Subtraction_3C4D5180(position, playerPosition), Vector2D__UnsquaredDistanceFrom_Z41DD997C(position, playerPosition), SpriteIndex, false, true, 0, 4, 0, 0, false)));\n}\n\nexport function getWeapon(sprites, weaponType, scaleSprite) {\n    const toSpriteSet = (sequence) => toList(map_2((i) => scaleSprite(sprites[i]), sequence));\n    switch (weaponType.tag) {\n        case 1: {\n            return new PlayerWeapon(append(toSpriteSet(rangeDouble(421, 1, 425)), toSpriteSet(rangeDouble(424, 1, 422))), 0, 25, false, true, 1, new WeaponType(1));\n        }\n        case 2: {\n            return new PlayerWeapon(toSpriteSet(rangeDouble(426, 1, 430)), 0, 25, true, true, 2, new WeaponType(2));\n        }\n        case 3: {\n            return new PlayerWeapon(toSpriteSet(rangeDouble(431, 1, 435)), 0, 25, true, true, 3, new WeaponType(3));\n        }\n        default: {\n            return new PlayerWeapon(toSpriteSet(rangeDouble(416, 1, 420)), 0, 25, false, false, 0, new WeaponType(0));\n        }\n    }\n}\n\n","import { initializeInfinite, scan, skipWhile, head } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { equalArrays, equals, uncurry } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { GameObject__get_BasicGameObject, BasicGameObject__get_MapPosition, Game__get_PlayerMapPosition, Vector2D, Side } from \"../Model.fs.js\";\nimport { tryFind, item } from \"../fable_modules/fable-library.3.7.14/List.js\";\n\nexport function cast(setup, terminator, game) {\n    const patternInput = setup();\n    const rayDirection = patternInput[3];\n    const posY = patternInput[2];\n    const posX = patternInput[1];\n    const mapX = (~(~posX)) | 0;\n    const mapY = (~(~posY)) | 0;\n    const deltaDistX = (rayDirection.vX === 0) ? 1.7976931348623157E+308 : Math.abs(1 / rayDirection.vX);\n    const deltaDistY = (rayDirection.vY === 0) ? 1.7976931348623157E+308 : Math.abs(1 / rayDirection.vY);\n    const halfStepDeltaX = (rayDirection.vX === 0) ? 1.7976931348623157E+308 : Math.sqrt(1 + (((rayDirection.vY * rayDirection.vY) / rayDirection.vX) * rayDirection.vX));\n    const halfStepDeltaY = (rayDirection.vY === 0) ? 1.7976931348623157E+308 : Math.sqrt(1 + (((rayDirection.vX * rayDirection.vX) / rayDirection.vY) * rayDirection.vY));\n    const patternInput_1 = (rayDirection.vX < 0) ? [-1, (posX - mapX) * deltaDistX] : [1, ((mapX + 1) - posX) * deltaDistX];\n    const stepX = patternInput_1[0] | 0;\n    const patternInput_2 = (rayDirection.vY < 0) ? [-1, (posY - mapY) * deltaDistY] : [1, ((mapY + 1) - posY) * deltaDistY];\n    const stepY = patternInput_2[0] | 0;\n    const patternInput_5 = head(skipWhile(terminator, scan(uncurry(2, (tupledArg) => {\n        const isHit = tupledArg[0];\n        const currentRayDistanceX = tupledArg[1];\n        const currentRayDistanceY = tupledArg[2];\n        const currentMapX = tupledArg[3] | 0;\n        const currentMapY = tupledArg[4] | 0;\n        const currentSide = tupledArg[5];\n        return (_arg2) => {\n            let matchValue, doorState, mapX2, mapY2, adjacent, rayMultiplier, rayPosition, trueDeltaX, trueDeltaY, halfStepInY, halfStepInX;\n            if (!terminator([isHit, currentRayDistanceX, currentRayDistanceY, currentMapX, currentMapY, currentSide])) {\n                return [isHit, currentRayDistanceX, currentRayDistanceY, currentMapX, currentMapY, currentSide];\n            }\n            else {\n                const patternInput_3 = (currentRayDistanceX < currentRayDistanceY) ? [currentMapX + stepX, currentMapY, new Side(0)] : [currentMapX, currentMapY + stepY, new Side(1)];\n                const newSide = patternInput_3[2];\n                const newMapY = patternInput_3[1] | 0;\n                const newMapX = patternInput_3[0] | 0;\n                const patternInput_4 = (currentRayDistanceX < currentRayDistanceY) ? [currentRayDistanceX + deltaDistX, currentRayDistanceY] : [currentRayDistanceX, currentRayDistanceY + deltaDistY];\n                return [(matchValue = item(newMapX, item(newMapY, game.Map)), (matchValue.tag === 3) ? false : ((matchValue.tag === 0) ? true : ((matchValue.tag === 1) ? ((doorState = item(matchValue.fields[0], game.Doors), (doorState.Status.tag === 2) ? false : ((mapX2 = (((posX < newMapX) ? (newMapX - 1) : newMapX) | 0), (mapY2 = (((posY > newMapY) ? (newMapY + 1) : newMapY) | 0), (adjacent = (equals(newSide, new Side(1)) ? (mapY2 - posY) : ((mapX2 - posX) + 1)), (rayMultiplier = (equals(newSide, new Side(1)) ? (adjacent / rayDirection.vY) : (adjacent / rayDirection.vX)), (rayPosition = (new Vector2D(posX + (rayDirection.vX * rayMultiplier), posY + (rayDirection.vY * rayMultiplier))), (trueDeltaX = ((halfStepDeltaX < 0.0001) ? 100 : halfStepDeltaX), (trueDeltaY = ((halfStepDeltaY < 0.0001) ? 100 : halfStepDeltaY), equals(newSide, new Side(0)) ? ((halfStepInY = (rayPosition.vY + ((stepY * Math.sqrt((trueDeltaX * trueDeltaX) - 1)) / 2)), (Math.floor(halfStepInY) === newMapY) && ((halfStepInY - newMapY) < (1 - (doorState.Offset / 64))))) : ((halfStepInX = (rayPosition.vX + ((stepX * Math.sqrt((trueDeltaY * trueDeltaY) - 1)) / 2)), (Math.floor(halfStepInX) === newMapX) && ((halfStepInX - newMapX) < (1 - (doorState.Offset / 64))))))))))))))) : patternInput[0]))), patternInput_4[0], patternInput_4[1], newMapX, newMapY, newSide];\n            }\n        };\n    }), [false, patternInput_1[1], patternInput_2[1], mapX, mapY, new Side(0)], initializeInfinite((_arg1) => 0))));\n    return [patternInput_5[0], deltaDistX, deltaDistY, patternInput_5[1], patternInput_5[2], patternInput_5[3], patternInput_5[4], patternInput_5[5]];\n}\n\nexport function isPointInTriangle(p1, p2, p3, testPoint) {\n    const a = (((p2.vY - p3.vY) * (testPoint.vX - p3.vX)) + ((p3.vX - p2.vX) * (testPoint.vY - p3.vY))) / (((p2.vY - p3.vY) * (p1.vX - p3.vX)) + ((p3.vX - p2.vX) * (p1.vY - p3.vY)));\n    const b = (((p3.vY - p1.vY) * (testPoint.vX - p3.vX)) + ((p1.vX - p3.vX) * (testPoint.vY - p3.vY))) / (((p2.vY - p3.vY) * (p1.vX - p3.vX)) + ((p3.vX - p2.vX) * (p1.vY - p3.vY)));\n    const c = (1 - a) - b;\n    if (((((a >= 0) && (a <= 1)) && (b >= 0)) && (b <= 1)) && (c >= 0)) {\n        return c <= 1;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function canTraverse(game, checkPlayer, mapX, mapY) {\n    if ((((mapX < 0) ? true : (mapX > 63)) ? true : (mapY < 0)) ? true : (mapY > 63)) {\n        return false;\n    }\n    else if (checkPlayer && equalArrays([mapX, mapY], Game__get_PlayerMapPosition(game))) {\n        return false;\n    }\n    else {\n        const cell = item(mapX, item(mapY, game.Map));\n        if ((cell.tag === 1) ? (item(cell.fields[0], game.Doors).Status.tag === 2) : (!(cell.tag === 0))) {\n            return tryFind((go) => {\n                if (equalArrays(BasicGameObject__get_MapPosition(GameObject__get_BasicGameObject(go)), [mapX, mapY])) {\n                    return GameObject__get_BasicGameObject(go).Blocking;\n                }\n                else {\n                    return false;\n                }\n            }, game.GameObjects) == null;\n        }\n        else {\n            return false;\n        }\n    }\n}\n\nexport function canPlayerTraverse(game, pos_0, pos_1) {\n    const pos = [pos_0, pos_1];\n    return canTraverse(game, false, pos[0], pos[1]);\n}\n\nexport function canEnemyTraverse(game, pos_0, pos_1) {\n    const pos = [pos_0, pos_1];\n    return canTraverse(game, true, pos[0], pos[1]);\n}\n\n","import { map, toArray, iterate, fold } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { Player__get_CurrentWeapon, PlayerWeapon__get_CurrentSprite, Enemy__get_DirectionVector, Enemy__get_BaseSpriteIndexForState, Vector2D__Rotate_Z114CB6F, Vector2D__Normalize, degreesToRadians, Enemy__get_IsAlive, GameObject__get_BasicGameObject, firingTolerance, WallRenderingResult, textureHeight, Side, textureWidth, Vector2D } from \"../Model.fs.js\";\nimport { isPointInTriangle, cast } from \"./Ray.fs.js\";\nimport { iterate as iterate_1, fold as fold_1, empty, singleton, append, item, length } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { uncurry, equals, min, comparePrimitives, max } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { rangeDouble } from \"../fable_modules/fable-library.3.7.14/Range.js\";\nimport { op_UnaryNegation_Int32 } from \"../fable_modules/fable-library.3.7.14/Int32.js\";\nimport { bind, defaultArg } from \"../fable_modules/fable-library.3.7.14/Option.js\";\nimport { tryFindIndex } from \"../fable_modules/fable-library.3.7.14/Array.js\";\nimport { printf, toText } from \"../fable_modules/fable-library.3.7.14/String.js\";\n\nexport function Walls_draw(width, height, setPixel, getTextureStripOffset, getTextureColor, game) {\n    const posX = game.Camera.Position.vX;\n    const posY = game.Camera.Position.vY;\n    const viewportWidth = width;\n    const viewportHeight = height;\n    return fold((previousResult, viewportX) => {\n        const cameraX = ((2 * viewportX) / viewportWidth) - 1;\n        const rayDirection = new Vector2D(game.Camera.Direction.vX + (game.Camera.Plane.vX * cameraX), game.Camera.Direction.vY + (game.Camera.Plane.vY * cameraX));\n        const patternInput = cast(() => [false, posX, posY, rayDirection], (tupledArg) => {\n            const mapX = tupledArg[3] | 0;\n            const mapY = tupledArg[4] | 0;\n            if (!tupledArg[0]) {\n                if (((mapX >= 0) && (mapX < length(item(0, game.Map)))) && (mapY >= 0)) {\n                    return mapY < length(game.Map);\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }, game);\n        const side = patternInput[7];\n        const hitMapY = patternInput[6] | 0;\n        const hitMapX = patternInput[5] | 0;\n        const perpendicularWallDistance = (side.tag === 1) ? (patternInput[4] - patternInput[2]) : (patternInput[3] - patternInput[1]);\n        const perpendicularWallDistance_1 = (item(hitMapX, item(hitMapY, game.Map)).tag === 1) ? (perpendicularWallDistance + 0.5) : perpendicularWallDistance;\n        const lineHeight = viewportHeight / perpendicularWallDistance_1;\n        const startY = max(comparePrimitives, ((-lineHeight) / 2) + (viewportHeight / 2), 0);\n        const endY = min(comparePrimitives, (lineHeight / 2) + (viewportHeight / 2), viewportHeight - 1);\n        let renderedPartOfDoor;\n        const matchValue_1 = item(hitMapX, item(hitMapY, game.Map));\n        switch (matchValue_1.tag) {\n            case 0: {\n                const wall = matchValue_1.fields[0];\n                const wallX = (side.tag === 1) ? (posX + (perpendicularWallDistance_1 * rayDirection.vX)) : (posY + (perpendicularWallDistance_1 * rayDirection.vY));\n                const rawTextureX = (~(~((wallX - Math.floor(wallX)) * textureWidth))) | 0;\n                const patternInput_1 = (equals(side, new Side(0)) && (rayDirection.vX > 0)) ? [(textureWidth - rawTextureX) - 1, wall.NorthSouthTextureIndex] : ((equals(side, new Side(1)) && (rayDirection.vY < 0)) ? [(textureWidth - rawTextureX) - 1, wall.EastWestTextureIndex] : [rawTextureX, equals(side, new Side(0)) ? wall.NorthSouthTextureIndex : wall.EastWestTextureIndex]);\n                const lineHeight_1 = viewportHeight / perpendicularWallDistance_1;\n                const step = (1 * textureHeight) / lineHeight_1;\n                const texPos = ((startY - (viewportHeight / 2)) + (lineHeight_1 / 2)) * step;\n                const textureOffset = getTextureStripOffset(patternInput_1[1], ~(~patternInput_1[0]));\n                iterate((drawY) => {\n                    setPixel(getTextureColor(textureOffset, (~(~(texPos + (step * drawY)))) & ((~(~textureHeight)) - 1)), ~(~viewportX), drawY + (~(~startY)));\n                }, rangeDouble(0, 1, ~(~(endY - startY))));\n                renderedPartOfDoor = false;\n                break;\n            }\n            case 1: {\n                const door = item(matchValue_1.fields[0], game.Doors);\n                const wallX_1 = equals(side, new Side(0)) ? (posY + (perpendicularWallDistance_1 * rayDirection.vY)) : (posX + (perpendicularWallDistance_1 * rayDirection.vX));\n                const lineHeight_2 = viewportHeight / perpendicularWallDistance_1;\n                const step_1 = (1 * textureHeight) / lineHeight_2;\n                const texPos_1 = ((startY - (viewportHeight / 2)) + (lineHeight_2 / 2)) * step_1;\n                const textureOffset_1 = getTextureStripOffset(door.TextureIndex, ~(~max(comparePrimitives, 0, ((textureWidth - (~(~((wallX_1 - Math.floor(wallX_1)) * textureWidth)))) - 1) - door.Offset)));\n                iterate((drawY_1) => {\n                    setPixel(getTextureColor(textureOffset_1, (~(~(texPos_1 + (step_1 * drawY_1)))) & ((~(~textureHeight)) - 1)), ~(~viewportX), drawY_1 + (~(~startY)));\n                }, rangeDouble(0, 1, ~(~(endY - startY))));\n                renderedPartOfDoor = true;\n                break;\n            }\n            default: {\n                renderedPartOfDoor = false;\n            }\n        }\n        return new WallRenderingResult(append(previousResult.ZIndexes, singleton(perpendicularWallDistance_1)), (viewportX === (viewportWidth / 2)) ? [hitMapX, hitMapY] : previousResult.WallInFrontOfPlayer, (viewportX === (viewportWidth / 2)) ? renderedPartOfDoor : previousResult.IsDoorInFrontOfPlayer, (viewportX === (viewportWidth / 2)) ? perpendicularWallDistance_1 : previousResult.DistanceToWallInFrontOfPlayer, previousResult.SpriteInFrontOfPlayerIndexOption);\n    }, new WallRenderingResult(empty(), [-1, -1], false, -1, void 0), rangeDouble(0, 1, viewportWidth - 1));\n}\n\nexport function Objects_draw(width, height, getPixel, setPixel, isTransparent, getSpriteOffsets, game, sprites, wallRenderResult) {\n    const planeX = game.Camera.Plane.vX;\n    const planeY = game.Camera.Plane.vY;\n    const dirX = game.Camera.Direction.vX;\n    const dirY = game.Camera.Direction.vY;\n    const hitDetectionLeft = ((~(~((~(~width)) / 2))) - (~(~(firingTolerance / 2)))) | 0;\n    const hitDetectionRight = (hitDetectionLeft + firingTolerance) | 0;\n    return new WallRenderingResult(wallRenderResult.ZIndexes, wallRenderResult.WallInFrontOfPlayer, wallRenderResult.IsDoorInFrontOfPlayer, wallRenderResult.DistanceToWallInFrontOfPlayer, fold_1(uncurry(2, (tupledArg_1) => {\n        const gameObjectIndex = tupledArg_1[1] | 0;\n        return (sprite) => {\n            const spriteX = GameObject__get_BasicGameObject(sprite).Position.vX - game.Camera.Position.vX;\n            const spriteY = GameObject__get_BasicGameObject(sprite).Position.vY - game.Camera.Position.vY;\n            const invDet = 1 / ((planeX * dirY) - (planeY * dirX));\n            const transformY = invDet * (((-planeY) * spriteX) + (planeX * spriteY));\n            const spriteScreenX = (width / 2) * (1 + ((invDet * ((dirY * spriteX) - (dirX * spriteY))) / transformY));\n            const spriteHeight = (~(~Math.abs(height / transformY))) | 0;\n            const drawStartY = max(comparePrimitives, 0, (~(~(op_UnaryNegation_Int32(spriteHeight) / 2))) + (~(~((~(~height)) / 2)))) | 0;\n            const drawEndY = min(comparePrimitives, (~(~height)) - 1, (~(~(spriteHeight / 2))) + (~(~((~(~height)) / 2)))) | 0;\n            const spriteWidth = (~(~Math.abs(height / transformY))) | 0;\n            const drawStartX = max(comparePrimitives, 0, (~(~(op_UnaryNegation_Int32(spriteWidth) / 2))) + (~(~spriteScreenX))) | 0;\n            const drawEndX = min(comparePrimitives, (~(~width)) - 1, (~(~(spriteWidth / 2))) + (~(~spriteScreenX))) | 0;\n            let spriteIndex;\n            const gameObject = sprite;\n            if (gameObject.tag === 1) {\n                const e = gameObject.fields[0];\n                spriteIndex = (Enemy__get_IsAlive(e) ? defaultArg(bind((directionVector) => {\n                    const matchValue = e.State;\n                    switch (matchValue.tag) {\n                        case 7:\n                        case 4:\n                        case 2:\n                        case 5: {\n                            return void 0;\n                        }\n                        default: {\n                            const spriteQuadrants = 8;\n                            const quadrantSize = degreesToRadians(360 / spriteQuadrants);\n                            const playerRelativePosition = Vector2D__Normalize(new Vector2D(game.Camera.Position.vX - e.BasicGameObject.Position.vX, game.Camera.Position.vY - e.BasicGameObject.Position.vY));\n                            const playerTestPoint = new Vector2D(playerRelativePosition.vX / 2, playerRelativePosition.vY / 2);\n                            const p1 = new Vector2D(0, 0);\n                            const quadrantIndex = defaultArg(tryFindIndex((tupledArg) => isPointInTriangle(p1, tupledArg[0], tupledArg[1], playerTestPoint), toArray(map((quadrant) => {\n                                const centerAngle = quadrant * quadrantSize;\n                                const endAngle = centerAngle + (quadrantSize / 2);\n                                return [Vector2D__Rotate_Z114CB6F(directionVector, centerAngle - (quadrantSize / 2)), Vector2D__Rotate_Z114CB6F(directionVector, endAngle)];\n                            }, rangeDouble(0, 1, spriteQuadrants - 1)))), 0) | 0;\n                            return Enemy__get_BaseSpriteIndexForState(e) + quadrantIndex;\n                        }\n                    }\n                }, Enemy__get_DirectionVector(e)), Enemy__get_BaseSpriteIndexForState(e)) : item(e.CurrentAnimationFrame, e.DeathSpriteIndexes));\n            }\n            else {\n                spriteIndex = gameObject.fields[0].SpriteIndex;\n            }\n            const spriteTexture = sprites[spriteIndex];\n            const lineHeight = height / transformY;\n            const step = (1 * textureHeight) / lineHeight;\n            return ((drawStartX >= 0) && (drawEndX < (~(~width)))) ? [fold((gameObjectHitIndex, stripe) => {\n                const textureX = (~(~((~(~(((256 * (stripe - ((op_UnaryNegation_Int32(spriteWidth) / 2) + spriteScreenX))) * 64) / spriteWidth))) / 256))) | 0;\n                if ((((transformY > 0) && (stripe > 0)) && (stripe < (~(~width)))) && (transformY < item(stripe, wallRenderResult.ZIndexes))) {\n                    iterate((y_4) => {\n                        const color = getPixel(spriteTexture, textureX, ~(~(((y_4 - (height / 2)) + (lineHeight / 2)) * step)));\n                        if (!isTransparent(color)) {\n                            setPixel(color, stripe, y_4);\n                        }\n                    }, rangeDouble(drawStartY, 1, drawEndY - 1));\n                    if ((GameObject__get_BasicGameObject(sprite).CollidesWithBullets && (stripe > hitDetectionLeft)) && (stripe < hitDetectionRight)) {\n                        return gameObjectIndex;\n                    }\n                    else {\n                        return gameObjectHitIndex;\n                    }\n                }\n                else {\n                    return gameObjectHitIndex;\n                }\n            }, tupledArg_1[0], rangeDouble(drawStartX, 1, drawEndX - 1)), gameObjectIndex + 1] : [void 0, 0];\n        };\n    }), [void 0, 0], game.GameObjects)[0]);\n}\n\nexport function Weapons_drawPlayerWeapon(canvasWidth, canvasHeight, getPixel, setPixel, isTransparent, game) {\n    const weapon = item(game.Player.CurrentWeaponIndex, game.Player.Weapons);\n    const targetWidth = (canvasHeight / PlayerWeapon__get_CurrentSprite(weapon).Height) * PlayerWeapon__get_CurrentSprite(weapon).Width;\n    const xPos = (canvasWidth / 2) - (targetWidth / 2);\n    const scaleX = targetWidth / PlayerWeapon__get_CurrentSprite(weapon).Width;\n    const scaleY = canvasHeight / PlayerWeapon__get_CurrentSprite(weapon).Height;\n    iterate((spriteX) => {\n        iterate((spriteY) => {\n            const color = getPixel(PlayerWeapon__get_CurrentSprite(weapon), spriteX, spriteY);\n            if ((!isTransparent(color)) && (color !== 0)) {\n                const fromX = (~(~(xPos + (spriteX * scaleX)))) | 0;\n                const fromY = (~(~(spriteY * scaleY))) | 0;\n                const toY = (fromY + (~(~scaleY))) | 0;\n                iterate((outX) => {\n                    iterate((outY) => {\n                        setPixel(color, outX, outY);\n                    }, rangeDouble(fromY, 1, toY));\n                }, rangeDouble(fromX, 1, fromX + (~(~scaleX))));\n            }\n        }, rangeDouble(0, 1, PlayerWeapon__get_CurrentSprite(weapon).Height - 1));\n    }, rangeDouble(0, 1, PlayerWeapon__get_CurrentSprite(weapon).Width - 1));\n}\n\nexport function StatusBar_drawStatusBar(statusBarGraphics, drawImage, game) {\n    let index;\n    const playerHp = game.Player.Health | 0;\n    drawImage(statusBarGraphics.Background, 0, 0);\n    drawImage((playerHp > 0) ? ((index = (max(comparePrimitives, 0, (statusBarGraphics.HealthFaces.length - 1) - (~(~(playerHp / 16)))) | 0), statusBarGraphics.HealthFaces[index][game.Player.CurrentFaceIndex])) : statusBarGraphics.Dead, 128, 1);\n    drawImage(statusBarGraphics.Weapons[Player__get_CurrentWeapon(game.Player).StatusBarImageIndex], 247, 3);\n    const drawNumber = (startX, maximumLength, value_1) => {\n        let source;\n        let numberAsString;\n        const arg10 = max(comparePrimitives, 0, value_1) | 0;\n        numberAsString = toText(printf(\"%d\"))(arg10);\n        (source = ((Array((maximumLength - numberAsString.length) + 1).join(\" \")) + numberAsString), fold((x_2, value_4) => {\n            let character;\n            drawImage((character = value_4, statusBarGraphics.Font[(character === \" \") ? 10 : (character.charCodeAt(0) - \"0\".charCodeAt(0))]), x_2, 13);\n            return x_2 + 8;\n        }, startX, source.split(\"\")));\n    };\n    drawNumber(160, 3, playerHp);\n    drawNumber(104, 1, game.Player.Lives);\n    drawNumber(40, 6, game.Player.Score);\n    drawNumber(15, 1, game.Level);\n    drawNumber(209, 2, game.Player.Ammunition);\n}\n\nexport function Dissolve_render(setPixel, game) {\n    const matchValue = game.PixelDissolver;\n    if (matchValue == null) {\n    }\n    else {\n        const pixelDissolver = matchValue;\n        iterate_1((tupledArg) => {\n            const fromX = (~(~(tupledArg[0] * pixelDissolver.PixelSize))) | 0;\n            const fromY = (~(~(tupledArg[1] * pixelDissolver.PixelSize))) | 0;\n            const toY = (~(~((fromY + pixelDissolver.PixelSize) - 1))) | 0;\n            iterate((zx) => {\n                iterate((zy) => {\n                    setPixel(4278190268, zx, zy);\n                }, rangeDouble(fromY, 1, toY));\n            }, rangeDouble(fromX, 1, ~(~((fromX + pixelDissolver.PixelSize) - 1))));\n        }, pixelDissolver.DrawnPixels);\n    }\n}\n\n","import { nonSeeded } from \"../fable_modules/fable-library.3.7.14/Random.js\";\nimport { Union } from \"../fable_modules/fable-library.3.7.14/Types.js\";\nimport { union_type } from \"../fable_modules/fable-library.3.7.14/Reflection.js\";\nimport { some } from \"../fable_modules/fable-library.3.7.14/Option.js\";\nimport { cast, canPlayerTraverse } from \"./Ray.fs.js\";\nimport { PixelDissolverState, PixelDissolver as PixelDissolver_5, PixelDissolver__get_TotalPixels, OverlayAnimation, ViewportFilter as ViewportFilter_1, OverlayAnimation_get_Pickup, Game__get_PlayerMapPosition, Wall__get_IsExit, Vector2D__Normalize, Vector2D__Abs, Vector2D_op_Multiply_Z23A8CFC1, Enemy__get_DirectionVector, Vector2D__UnsquaredDistanceFrom_Z41DD997C, GameObject__UpdateBasicGameObject_6358EEEA, Enemy__get_NumberOfMovementAnimationFrames, Enemy__get_AnimationFrames, BasicGameObject as BasicGameObject_1, Enemy_AnimationTimeForState_4C3F69DE, GameObject__get_BasicGameObject, Vector2D_op_Subtraction_3C4D5180, Vector2D__get_Magnitude, Enemy__get_IsAlive, BasicGameObject__get_MapPosition, EnemyStateType, GameObject, Enemy, PlayerWeapon__get_AnimationFrames, PlayerWeapon, Player__get_CurrentWeapon, Player as Player_8, CompositeArea, DoorState, DoorStatus, SoundEffect, Vector2D_CreateFromMapPosition_Z3227AE51, Cell, Vector2D__get_CrossProduct, Game, Camera as Camera_3, Vector2D } from \"../Model.fs.js\";\nimport { compareArrays, safeHash, min, equalArrays, comparePrimitives, max, uncurry, numberHash, equals } from \"../fable_modules/fable-library.3.7.14/Util.js\";\nimport { isEmpty, skip, take, sortByDescending, singleton, contains as contains_2, filter, append, cons, empty, fold, findIndex, mapIndexed, length, map, item } from \"../fable_modules/fable-library.3.7.14/List.js\";\nimport { playRandomEnemyDeathSoundEffectAtVolume, calculateVolumeOfPlayerRelativeToEnemy, playSoundEffect } from \"./Audio.fs.js\";\nimport { remove, add, contains } from \"../fable_modules/fable-library.3.7.14/Set.js\";\nimport { contains as contains_1 } from \"../fable_modules/fable-library.3.7.14/Seq.js\";\nimport { log } from \"../Utils.fs.js\";\nimport { createAmmo } from \"./Map.fs.js\";\nimport { applyAi } from \"./AI.fs.js\";\n\nconst weaponAnimationFrameTime = 100;\n\nconst actionDistanceTolerance = 0.75;\n\nconst actionDoorDistanceTolerance = actionDistanceTolerance + 0.5;\n\nconst doorOpeningTime = 1000;\n\nconst doorOpenTime = 5000;\n\nconst random = nonSeeded();\n\nexport class PlayerAttackAction extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"DidNotFire\", \"WithGun\", \"WithKnife\"];\n    }\n}\n\nexport function PlayerAttackAction$reflection() {\n    return union_type(\"App.Update.PlayerAttackAction\", [], PlayerAttackAction, () => [[], [], []]);\n}\n\nexport function updateFrame(game, nextLevel, frameTime, createPixelDissolver, renderingResult) {\n    let inputRecord_4, inputRecord_7, inputRecord_8, TimeToNextWeaponFrame_2, matchValue_14, overlay, timeRemainingInFrame, newTimeRemainingInFrame, newOpacity, inputRecord_13, TimeToFaceChangeMs, maxDelta, inputRecord_14, DrawnPixels, DrawnPixels_1, inputRecord_11, inputRecord_12;\n    const $007CIsActive$007C_$007C = (controlState, game_1) => {\n        if ((game_1.ControlState & controlState) > 0) {\n            return some(void 0);\n        }\n        else {\n            return void 0;\n        }\n    };\n    const frameMultiplier = frameTime / 1000;\n    const movementSpeed = 6 * frameMultiplier;\n    const rotationSpeed = 4 * frameMultiplier;\n    const posX = game.Camera.Position.vX;\n    const posY = game.Camera.Position.vY;\n    const dirX = game.Camera.Direction.vX;\n    const dirY = game.Camera.Direction.vY;\n    const move = (speed, inputGame) => {\n        let inputRecord_1, newMapY, tupledArg, tupledArg_1;\n        return new Game(inputGame.Level, inputGame.Map, inputGame.Areas, inputGame.CompositeAreas, inputGame.GameObjects, inputGame.Player, (inputRecord_1 = inputGame.Camera, new Camera_3((newMapY = ((~(~(posY + (dirY * speed)))) | 0), new Vector2D(((tupledArg = [~(~(posX + (dirX * speed))), ~(~posY)], canPlayerTraverse(game, tupledArg[0], tupledArg[1]))) ? (posX + (dirX * speed)) : posX, ((tupledArg_1 = [~(~posX), newMapY], canPlayerTraverse(game, tupledArg_1[0], tupledArg_1[1]))) ? (posY + (dirY * speed)) : posY)), inputRecord_1.Direction, inputRecord_1.Plane, inputRecord_1.FieldOfView)), inputGame.ControlState, inputGame.IsFiring, inputGame.TimeToNextWeaponFrame, inputGame.Doors, inputGame.ViewportFilter, inputGame.PixelDissolver, inputGame.ResetLevel);\n    };\n    const strafe = (speed_1, inputGame_1) => {\n        let inputRecord_3;\n        const strafeDirection = Vector2D__get_CrossProduct(game.Camera.Direction);\n        const strafeX = strafeDirection.vX;\n        const strafeY = strafeDirection.vY;\n        return new Game(inputGame_1.Level, inputGame_1.Map, inputGame_1.Areas, inputGame_1.CompositeAreas, inputGame_1.GameObjects, inputGame_1.Player, (inputRecord_3 = inputGame_1.Camera, new Camera_3(new Vector2D(equals(item(~(~(posX + (strafeX * speed_1))), item(~(~posY), game.Map)), new Cell(3)) ? (posX + (strafeX * speed_1)) : posX, equals(item(~(~posX), item(~(~(posY + (strafeY * speed_1))), game.Map)), new Cell(3)) ? (posY + (strafeY * speed_1)) : posY), inputRecord_3.Direction, inputRecord_3.Plane, inputRecord_3.FieldOfView)), inputGame_1.ControlState, inputGame_1.IsFiring, inputGame_1.TimeToNextWeaponFrame, inputGame_1.Doors, inputGame_1.ViewportFilter, inputGame_1.PixelDissolver, inputGame_1.ResetLevel);\n    };\n    const tryOpenDoor = (doorState) => {\n        if (doorState.Status.tag === 3) {\n            playSoundEffect(game, Vector2D_CreateFromMapPosition_Z3227AE51(doorState.MapPosition), new SoundEffect(3));\n            return new DoorState(doorState.TextureIndex, doorState.DoorDirection, new DoorStatus(0), doorState.Offset, doorOpeningTime, doorState.MapPosition, doorState.AreaOne, doorState.AreaTwo);\n        }\n        else {\n            return doorState;\n        }\n    };\n    const updateCompositeAreas = (doorState_1, compositeAreas) => {\n        const matchValue_1 = doorState_1.Status;\n        switch (matchValue_1.tag) {\n            case 0: {\n                return map((ca) => {\n                    if (contains(doorState_1.AreaOne, ca.ConnectedTo) && (!contains(doorState_1.AreaTwo, ca.ConnectedTo))) {\n                        return new CompositeArea(ca.Area, add(doorState_1.AreaTwo, ca.ConnectedTo));\n                    }\n                    else if (contains(doorState_1.AreaTwo, ca.ConnectedTo) && (!contains(doorState_1.AreaOne, ca.ConnectedTo))) {\n                        return new CompositeArea(ca.Area, add(doorState_1.AreaOne, ca.ConnectedTo));\n                    }\n                    else {\n                        return ca;\n                    }\n                }, compositeAreas);\n            }\n            case 3: {\n                return map((ca_1) => {\n                    if ((ca_1.Area !== doorState_1.AreaOne) && contains_1(doorState_1.AreaOne, ca_1.ConnectedTo, {\n                        Equals: (x, y) => (x === y),\n                        GetHashCode: numberHash,\n                    })) {\n                        return new CompositeArea(ca_1.Area, remove(doorState_1.AreaOne, ca_1.ConnectedTo));\n                    }\n                    else if ((ca_1.Area !== doorState_1.AreaTwo) && contains_1(doorState_1.AreaTwo, ca_1.ConnectedTo, {\n                        Equals: (x_1, y_1) => (x_1 === y_1),\n                        GetHashCode: numberHash,\n                    })) {\n                        return new CompositeArea(ca_1.Area, remove(doorState_1.AreaTwo, ca_1.ConnectedTo));\n                    }\n                    else {\n                        return ca_1;\n                    }\n                }, compositeAreas);\n            }\n            default: {\n                return compositeAreas;\n            }\n        }\n    };\n    const selectWeapon = (index, game_19) => {\n        let inputRecord_15;\n        if (length(game_19.Player.Weapons) > index) {\n            return new Game(game_19.Level, game_19.Map, game_19.Areas, game_19.CompositeAreas, game_19.GameObjects, (inputRecord_15 = game_19.Player, new Player_8(inputRecord_15.Score, inputRecord_15.Lives, inputRecord_15.Health, inputRecord_15.Radius, index, inputRecord_15.Ammunition, inputRecord_15.Weapons, inputRecord_15.CurrentFaceIndex, inputRecord_15.TimeToFaceChangeMs)), game_19.Camera, game_19.ControlState, game_19.IsFiring, game_19.TimeToNextWeaponFrame, game_19.Doors, game_19.ViewportFilter, game_19.PixelDissolver, game_19.ResetLevel);\n        }\n        else {\n            return game_19;\n        }\n    };\n    if (game.PixelDissolver == null) {\n        let game_18;\n        let game_16;\n        let game_12;\n        let game_13;\n        let game_4;\n        let game_17;\n        let game_3;\n        let tupledArg_8;\n        let game_5;\n        let g_8;\n        let g_7;\n        let g_6;\n        let g_5;\n        let g_4;\n        let g_3;\n        let g_2;\n        let g_1;\n        const g = game;\n        g_1 = (($007CIsActive$007C_$007C(1, g) != null) ? move(movementSpeed, g) : g);\n        g_2 = (($007CIsActive$007C_$007C(32, g_1) != null) ? move((-movementSpeed) / 2, g_1) : g_1);\n        g_3 = (($007CIsActive$007C_$007C(8, g_2) != null) ? strafe(-movementSpeed, g_2) : g_2);\n        g_4 = (($007CIsActive$007C_$007C(16, g_3) != null) ? strafe(movementSpeed, g_3) : g_3);\n        let pattern_matching_result;\n        if ($007CIsActive$007C_$007C(2, g_4) != null) {\n            pattern_matching_result = 0;\n        }\n        else if ($007CIsActive$007C_$007C(4, g_4) != null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                const inputGame_2 = g_4;\n                const rotationMultiplier = ($007CIsActive$007C_$007C(4, inputGame_2) != null) ? -1 : (($007CIsActive$007C_$007C(2, inputGame_2) != null) ? 1 : 0);\n                const planeX = game.Camera.Plane.vX;\n                const planeY = game.Camera.Plane.vY;\n                g_5 = (new Game(inputGame_2.Level, inputGame_2.Map, inputGame_2.Areas, inputGame_2.CompositeAreas, inputGame_2.GameObjects, inputGame_2.Player, (inputRecord_4 = inputGame_2.Camera, new Camera_3(inputRecord_4.Position, new Vector2D((dirX * Math.cos(rotationMultiplier * rotationSpeed)) - (dirY * Math.sin(rotationMultiplier * rotationSpeed)), (dirX * Math.sin(rotationMultiplier * rotationSpeed)) + (dirY * Math.cos(rotationMultiplier * rotationSpeed))), new Vector2D((planeX * Math.cos(rotationMultiplier * rotationSpeed)) - (planeY * Math.sin(rotationMultiplier * rotationSpeed)), (planeX * Math.sin(rotationMultiplier * rotationSpeed)) + (planeY * Math.cos(rotationMultiplier * rotationSpeed))), inputRecord_4.FieldOfView)), inputGame_2.ControlState, inputGame_2.IsFiring, inputGame_2.TimeToNextWeaponFrame, inputGame_2.Doors, inputGame_2.ViewportFilter, inputGame_2.PixelDissolver, inputGame_2.ResetLevel));\n                break;\n            }\n            case 1: {\n                g_5 = g_4;\n                break;\n            }\n        }\n        g_6 = (($007CIsActive$007C_$007C(256, g_5) != null) ? selectWeapon(0, g_5) : g_5);\n        g_7 = (($007CIsActive$007C_$007C(512, g_6) != null) ? selectWeapon(1, g_6) : g_6);\n        g_8 = (($007CIsActive$007C_$007C(1024, g_7) != null) ? selectWeapon(2, g_7) : g_7);\n        game_5 = (($007CIsActive$007C_$007C(2048, g_8) != null) ? selectWeapon(3, g_8) : g_8);\n        const isFireKeyPressed = (game_5.ControlState & 64) > 0;\n        const updatePlayerWithWeapon = (weaponIndex, weapon) => {\n            const inputRecord_6 = game_5.Player;\n            return new Player_8(inputRecord_6.Score, inputRecord_6.Lives, inputRecord_6.Health, inputRecord_6.Radius, inputRecord_6.CurrentWeaponIndex, inputRecord_6.Ammunition, mapIndexed((i_1, wp) => {\n                if (i_1 === weaponIndex) {\n                    return weapon;\n                }\n                else {\n                    return wp;\n                }\n            }, game_5.Player.Weapons), inputRecord_6.CurrentFaceIndex, inputRecord_6.TimeToFaceChangeMs);\n        };\n        const currentWeapon = item(game_5.Player.CurrentWeaponIndex, game_5.Player.Weapons);\n        const matchValue_4 = [game_5.IsFiring, game_5.TimeToNextWeaponFrame, isFireKeyPressed];\n        let pattern_matching_result_1;\n        if (matchValue_4[0]) {\n            if (matchValue_4[1] == null) {\n                pattern_matching_result_1 = 2;\n            }\n            else {\n                pattern_matching_result_1 = 1;\n            }\n        }\n        else if (matchValue_4[1] == null) {\n            if (matchValue_4[2]) {\n                pattern_matching_result_1 = 0;\n            }\n            else {\n                pattern_matching_result_1 = 3;\n            }\n        }\n        else {\n            pattern_matching_result_1 = 3;\n        }\n        switch (pattern_matching_result_1) {\n            case 0: {\n                if ((Player__get_CurrentWeapon(game_5.Player).RequiresAmmunition && (game_5.Player.Ammunition > 0)) ? true : (!Player__get_CurrentWeapon(game_5.Player).RequiresAmmunition)) {\n                    const updatedWeapon = new PlayerWeapon(currentWeapon.Sprites, 1, currentWeapon.Damage, currentWeapon.AutoRepeat, currentWeapon.RequiresAmmunition, currentWeapon.StatusBarImageIndex, currentWeapon.WeaponType);\n                    playSoundEffect(game_5, game_5.Camera.Position, new SoundEffect(5));\n                    tupledArg_8 = [new Game(game_5.Level, game_5.Map, game_5.Areas, game_5.CompositeAreas, game_5.GameObjects, (inputRecord_7 = updatePlayerWithWeapon(game_5.Player.CurrentWeaponIndex, updatedWeapon), new Player_8(inputRecord_7.Score, inputRecord_7.Lives, inputRecord_7.Health, inputRecord_7.Radius, inputRecord_7.CurrentWeaponIndex, game_5.Player.Ammunition - (Player__get_CurrentWeapon(game_5.Player).RequiresAmmunition ? 1 : 0), inputRecord_7.Weapons, inputRecord_7.CurrentFaceIndex, inputRecord_7.TimeToFaceChangeMs)), game_5.Camera, game_5.ControlState, true, weaponAnimationFrameTime, game_5.Doors, game_5.ViewportFilter, game_5.PixelDissolver, game_5.ResetLevel), Player__get_CurrentWeapon(game_5.Player).RequiresAmmunition ? (new PlayerAttackAction(1)) : (new PlayerAttackAction(2))];\n                }\n                else if (Player__get_CurrentWeapon(game_5.Player).RequiresAmmunition) {\n                    const newWeaponIndex = findIndex((w) => (!w.RequiresAmmunition), game_5.Player.Weapons) | 0;\n                    const newWeapon = item(newWeaponIndex, game_5.Player.Weapons);\n                    const updatedWeapon_1 = new PlayerWeapon(newWeapon.Sprites, 1, newWeapon.Damage, newWeapon.AutoRepeat, newWeapon.RequiresAmmunition, newWeapon.StatusBarImageIndex, newWeapon.WeaponType);\n                    playSoundEffect(game_5, game_5.Camera.Position, new SoundEffect(5));\n                    tupledArg_8 = [new Game(game_5.Level, game_5.Map, game_5.Areas, game_5.CompositeAreas, game_5.GameObjects, (inputRecord_8 = updatePlayerWithWeapon(newWeaponIndex, updatedWeapon_1), new Player_8(inputRecord_8.Score, inputRecord_8.Lives, inputRecord_8.Health, inputRecord_8.Radius, newWeaponIndex, game_5.Player.Ammunition, inputRecord_8.Weapons, inputRecord_8.CurrentFaceIndex, inputRecord_8.TimeToFaceChangeMs)), game_5.Camera, game_5.ControlState, true, weaponAnimationFrameTime, game_5.Doors, game_5.ViewportFilter, game_5.PixelDissolver, game_5.ResetLevel), new PlayerAttackAction(2)];\n                }\n                else {\n                    tupledArg_8 = [game_5, new PlayerAttackAction(0)];\n                }\n                break;\n            }\n            case 1: {\n                const newTimeRemaining = matchValue_4[1] - frameTime;\n                if (newTimeRemaining < 0) {\n                    if ((currentWeapon.CurrentFrame + 1) < PlayerWeapon__get_AnimationFrames(currentWeapon)) {\n                        const updatedWeapon_2 = new PlayerWeapon(currentWeapon.Sprites, currentWeapon.CurrentFrame + 1, currentWeapon.Damage, currentWeapon.AutoRepeat, currentWeapon.RequiresAmmunition, currentWeapon.StatusBarImageIndex, currentWeapon.WeaponType);\n                        tupledArg_8 = [(TimeToNextWeaponFrame_2 = (weaponAnimationFrameTime + newTimeRemaining), new Game(game_5.Level, game_5.Map, game_5.Areas, game_5.CompositeAreas, game_5.GameObjects, updatePlayerWithWeapon(game_5.Player.CurrentWeaponIndex, updatedWeapon_2), game_5.Camera, game_5.ControlState, game_5.IsFiring, TimeToNextWeaponFrame_2, game_5.Doors, game_5.ViewportFilter, game_5.PixelDissolver, game_5.ResetLevel)), new PlayerAttackAction(0)];\n                    }\n                    else {\n                        const updatedWeapon_3 = new PlayerWeapon(currentWeapon.Sprites, 0, currentWeapon.Damage, currentWeapon.AutoRepeat, currentWeapon.RequiresAmmunition, currentWeapon.StatusBarImageIndex, currentWeapon.WeaponType);\n                        tupledArg_8 = [new Game(game_5.Level, game_5.Map, game_5.Areas, game_5.CompositeAreas, game_5.GameObjects, updatePlayerWithWeapon(game_5.Player.CurrentWeaponIndex, updatedWeapon_3), game_5.Camera, game_5.ControlState, false, void 0, game_5.Doors, game_5.ViewportFilter, game_5.PixelDissolver, game_5.ResetLevel), new PlayerAttackAction(0)];\n                    }\n                }\n                else {\n                    tupledArg_8 = [new Game(game_5.Level, game_5.Map, game_5.Areas, game_5.CompositeAreas, game_5.GameObjects, game_5.Player, game_5.Camera, game_5.ControlState, game_5.IsFiring, newTimeRemaining, game_5.Doors, game_5.ViewportFilter, game_5.PixelDissolver, game_5.ResetLevel), new PlayerAttackAction(0)];\n                }\n                break;\n            }\n            case 2: {\n                tupledArg_8 = [game_5, new PlayerAttackAction(0)];\n                break;\n            }\n            case 3: {\n                tupledArg_8 = [game_5, new PlayerAttackAction(0)];\n                break;\n            }\n        }\n        const game_10 = tupledArg_8[0];\n        const patternInput_5 = fold(uncurry(2, (tupledArg_9) => {\n            const i_3 = tupledArg_9[0] | 0;\n            return (go_1) => {\n                let enemy_2, distance_1, inputRecord_9, inputRecord_10, tupledArg_4, enemy, timeRemainingInAnimationFrame, matchValue_9, go, game_2, inputRecord_5, UnsquaredDistanceFromPlayer;\n                let patternInput_4;\n                let tupledArg_10;\n                let tupledArg_5;\n                let tupledArg_3;\n                const tupledArg_7 = [tupledArg_9[1], go_1, empty()];\n                const gameObject_3 = tupledArg_7[1];\n                tupledArg_3 = [tupledArg_7[0], (gameObject_3.tag === 1) ? ((enemy_2 = gameObject_3.fields[0], new GameObject(1, new Enemy(enemy_2.EnemyType, enemy_2.BasicGameObject, enemy_2.Direction, enemy_2.DeathSpriteIndexes, enemy_2.AttackSpriteIndexes, enemy_2.SpriteBlocks, enemy_2.FramesPerBlock, enemy_2.CurrentAnimationFrame, enemy_2.TimeUntilNextAnimationFrame, enemy_2.State, enemy_2.IsFirstAttack, false, enemy_2.MoveToChaseRequired, enemy_2.HitPoints, enemy_2.HurtSpriteIndex, enemy_2.PatrolSpeed, enemy_2.ChaseSpeed)))) : gameObject_3, tupledArg_7[2]];\n                const beganFiringSequenceOnFrame = tupledArg_8[1];\n                const game_6 = tupledArg_3[0];\n                const gameObject = tupledArg_3[1];\n                const newObjects = tupledArg_3[2];\n                const updateEnemyBasedOnVolume = (e) => {\n                    const matchValue_6 = e.State;\n                    switch (matchValue_6.tag) {\n                        case 0:\n                        case 3: {\n                            const volume = calculateVolumeOfPlayerRelativeToEnemy(game_6)(e.BasicGameObject.Position);\n                            log(`Volume as heard: ${volume}`);\n                            if ((((volume > 0.5) ? true : ((volume > 0.1) && (random.Next1(255) < 128))) ? true : ((volume > 0) && (random.Next1(255) < 64))) && (!equals(e.State, new EnemyStateType(1)))) {\n                                log(`Enemy at ${BasicGameObject__get_MapPosition(e.BasicGameObject)} heard the player`);\n                                return new Enemy(e.EnemyType, e.BasicGameObject, e.Direction, e.DeathSpriteIndexes, e.AttackSpriteIndexes, e.SpriteBlocks, e.FramesPerBlock, e.CurrentAnimationFrame, e.TimeUntilNextAnimationFrame, e.State, e.IsFirstAttack, e.FireAtPlayerRequired, true, e.HitPoints, e.HurtSpriteIndex, e.PatrolSpeed, e.ChaseSpeed);\n                            }\n                            else {\n                                return e;\n                            }\n                        }\n                        default: {\n                            return e;\n                        }\n                    }\n                };\n                if (gameObject.tag === 0) {\n                    tupledArg_5 = [game_6, gameObject, newObjects];\n                }\n                else {\n                    const e_1 = gameObject.fields[0];\n                    if (Enemy__get_IsAlive(e_1)) {\n                        const matchValue_7 = [renderingResult.SpriteInFrontOfPlayerIndexOption, beganFiringSequenceOnFrame];\n                        let pattern_matching_result_2, firingHitGameObjectIndex;\n                        if (matchValue_7[0] != null) {\n                            if (matchValue_7[1].tag === 2) {\n                                pattern_matching_result_2 = 0;\n                                firingHitGameObjectIndex = matchValue_7[0];\n                            }\n                            else if (matchValue_7[1].tag === 1) {\n                                pattern_matching_result_2 = 0;\n                                firingHitGameObjectIndex = matchValue_7[0];\n                            }\n                            else {\n                                pattern_matching_result_2 = 2;\n                            }\n                        }\n                        else if (matchValue_7[1].tag === 1) {\n                            pattern_matching_result_2 = 1;\n                        }\n                        else {\n                            pattern_matching_result_2 = 2;\n                        }\n                        switch (pattern_matching_result_2) {\n                            case 0: {\n                                if (firingHitGameObjectIndex === i_3) {\n                                    const damage = (((Player__get_CurrentWeapon(game_6.Player).WeaponType.tag === 0) ? ((Vector2D__get_Magnitude(Vector2D_op_Subtraction_3C4D5180(GameObject__get_BasicGameObject(gameObject).Position, game_6.Camera.Position)) < 1) ? (random.Next1(255) >> 4) : 0) : ((distance_1 = max(comparePrimitives, Math.abs(GameObject__get_BasicGameObject(gameObject).Position.vX - game_6.Camera.Position.vX), Math.abs(GameObject__get_BasicGameObject(gameObject).Position.vY - game_6.Camera.Position.vY)), (distance_1 < 2) ? (~(~(random.Next1(255) / 4))) : ((distance_1 < 4) ? (~(~(random.Next1(255) / 6))) : (((~(~(random.Next1(255) / 12))) < distance_1) ? 0 : (~(~(random.Next1(255) / 6)))))))) * 1) | 0;\n                                    log(`Damage on enemy: ${damage}`);\n                                    if (damage > 0) {\n                                        const newEnemyHitPoints = (e_1.HitPoints - damage) | 0;\n                                        if (newEnemyHitPoints > 0) {\n                                            const newState = new EnemyStateType(4, e_1.State);\n                                            tupledArg_5 = [game_6, new GameObject(1, new Enemy(e_1.EnemyType, e_1.BasicGameObject, e_1.Direction, e_1.DeathSpriteIndexes, e_1.AttackSpriteIndexes, e_1.SpriteBlocks, e_1.FramesPerBlock, 0, Enemy_AnimationTimeForState_4C3F69DE(newState), newState, e_1.IsFirstAttack, e_1.FireAtPlayerRequired, e_1.MoveToChaseRequired, newEnemyHitPoints, e_1.HurtSpriteIndex, e_1.PatrolSpeed, e_1.ChaseSpeed)), newObjects];\n                                        }\n                                        else {\n                                            playRandomEnemyDeathSoundEffectAtVolume(game_6, e_1.BasicGameObject.Position);\n                                            tupledArg_5 = [new Game(game_6.Level, game_6.Map, game_6.Areas, game_6.CompositeAreas, game_6.GameObjects, (inputRecord_9 = game_6.Player, new Player_8(game_6.Player.Score + e_1.BasicGameObject.Score, inputRecord_9.Lives, inputRecord_9.Health, inputRecord_9.Radius, inputRecord_9.CurrentWeaponIndex, inputRecord_9.Ammunition, inputRecord_9.Weapons, inputRecord_9.CurrentFaceIndex, inputRecord_9.TimeToFaceChangeMs)), game_6.Camera, game_6.ControlState, game_6.IsFiring, game_6.TimeToNextWeaponFrame, game_6.Doors, game_6.ViewportFilter, game_6.PixelDissolver, game_6.ResetLevel), new GameObject(1, new Enemy(e_1.EnemyType, (inputRecord_10 = e_1.BasicGameObject, new BasicGameObject_1(inputRecord_10.Position, inputRecord_10.PlayerRelativePosition, inputRecord_10.UnsquaredDistanceFromPlayer, inputRecord_10.SpriteIndex, false, inputRecord_10.Pickupable, inputRecord_10.HitpointsRestored, inputRecord_10.AmmoRestored, inputRecord_10.LivesRestored, inputRecord_10.Score, false)), e_1.Direction, e_1.DeathSpriteIndexes, e_1.AttackSpriteIndexes, e_1.SpriteBlocks, e_1.FramesPerBlock, 0, Enemy_AnimationTimeForState_4C3F69DE(new EnemyStateType(7)), new EnemyStateType(7), e_1.IsFirstAttack, e_1.FireAtPlayerRequired, e_1.MoveToChaseRequired, e_1.HitPoints, e_1.HurtSpriteIndex, e_1.PatrolSpeed, e_1.ChaseSpeed)), (e_1.EnemyType.tag === 3) ? newObjects : cons((tupledArg_4 = BasicGameObject__get_MapPosition(e_1.BasicGameObject), createAmmo(game_6.Camera.Position, tupledArg_4[0], tupledArg_4[1])), newObjects)];\n                                        }\n                                    }\n                                    else {\n                                        tupledArg_5 = [game_6, new GameObject(1, e_1), newObjects];\n                                    }\n                                }\n                                else {\n                                    tupledArg_5 = ((beganFiringSequenceOnFrame.tag === 1) ? [game_6, new GameObject(1, updateEnemyBasedOnVolume(e_1)), newObjects] : [game_6, new GameObject(1, e_1), newObjects]);\n                                }\n                                break;\n                            }\n                            case 1: {\n                                tupledArg_5 = [game_6, new GameObject(1, updateEnemyBasedOnVolume(e_1)), newObjects];\n                                break;\n                            }\n                            case 2: {\n                                tupledArg_5 = [game_6, new GameObject(1, e_1), newObjects];\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        tupledArg_5 = [game_6, new GameObject(1, e_1), newObjects];\n                    }\n                }\n                const gameObject_1 = tupledArg_5[1];\n                tupledArg_10 = [tupledArg_5[0], (gameObject_1.tag === 1) ? ((enemy = gameObject_1.fields[0], (timeRemainingInAnimationFrame = (enemy.TimeUntilNextAnimationFrame - frameTime), (matchValue_9 = enemy.State, (matchValue_9.tag === 4) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : ((matchValue_9.tag === 2) ? ((enemy.CurrentAnimationFrame < (Enemy__get_AnimationFrames(enemy) - 1)) ? ((timeRemainingInAnimationFrame < 0) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame + 1, Enemy_AnimationTimeForState_4C3F69DE(enemy.State) + timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, (enemy.CurrentAnimationFrame + 1) === (Enemy__get_AnimationFrames(enemy) - 1), enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed)))) : ((enemy.State.tag === 2) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, enemy)))) : ((matchValue_9.tag === 8) ? ((enemy.CurrentAnimationFrame < (Enemy__get_AnimationFrames(enemy) - 1)) ? ((timeRemainingInAnimationFrame < 0) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame + 1, Enemy_AnimationTimeForState_4C3F69DE(enemy.State) + timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, (enemy.CurrentAnimationFrame + 1) === (Enemy__get_AnimationFrames(enemy) - 1), enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed)))) : ((enemy.State.tag === 2) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, enemy)))) : ((matchValue_9.tag === 7) ? ((enemy.CurrentAnimationFrame < (Enemy__get_AnimationFrames(enemy) - 1)) ? ((timeRemainingInAnimationFrame < 0) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame + 1, Enemy_AnimationTimeForState_4C3F69DE(enemy.State) + timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, (enemy.CurrentAnimationFrame + 1) === (Enemy__get_AnimationFrames(enemy) - 1), enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed)))) : ((enemy.State.tag === 2) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, enemy)))) : ((matchValue_9.tag === 6) ? ((timeRemainingInAnimationFrame < 0) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, ((enemy.CurrentAnimationFrame + 1) > Enemy__get_NumberOfMovementAnimationFrames(enemy)) ? 0 : (enemy.CurrentAnimationFrame + 1), Enemy_AnimationTimeForState_4C3F69DE(enemy.State) + timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed)))) : ((matchValue_9.tag === 3) ? ((timeRemainingInAnimationFrame < 0) ? (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, ((enemy.CurrentAnimationFrame + 1) > Enemy__get_NumberOfMovementAnimationFrames(enemy)) ? 0 : (enemy.CurrentAnimationFrame + 1), Enemy_AnimationTimeForState_4C3F69DE(enemy.State) + timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed))) : (new GameObject(1, new Enemy(enemy.EnemyType, enemy.BasicGameObject, enemy.Direction, enemy.DeathSpriteIndexes, enemy.AttackSpriteIndexes, enemy.SpriteBlocks, enemy.FramesPerBlock, enemy.CurrentAnimationFrame, timeRemainingInAnimationFrame, enemy.State, enemy.IsFirstAttack, enemy.FireAtPlayerRequired, enemy.MoveToChaseRequired, enemy.HitPoints, enemy.HurtSpriteIndex, enemy.PatrolSpeed, enemy.ChaseSpeed)))) : (new GameObject(1, enemy))))))))))) : gameObject_1, tupledArg_5[2]];\n                patternInput_4 = applyAi(frameTime, tupledArg_10[0], tupledArg_10[1], tupledArg_10[2]);\n                const updatedGame = patternInput_4[0];\n                return [i_3 + 1, updatedGame, append(cons((go = patternInput_4[1], (game_2 = updatedGame, GameObject__UpdateBasicGameObject_6358EEEA(go, (inputRecord_5 = GameObject__get_BasicGameObject(go), (UnsquaredDistanceFromPlayer = Vector2D__UnsquaredDistanceFrom_Z41DD997C(game_2.Camera.Position, GameObject__get_BasicGameObject(go).Position), new BasicGameObject_1(inputRecord_5.Position, Vector2D_op_Subtraction_3C4D5180(GameObject__get_BasicGameObject(go).Position, game_2.Camera.Position), UnsquaredDistanceFromPlayer, inputRecord_5.SpriteIndex, inputRecord_5.CollidesWithBullets, inputRecord_5.Pickupable, inputRecord_5.HitpointsRestored, inputRecord_5.AmmoRestored, inputRecord_5.LivesRestored, inputRecord_5.Score, inputRecord_5.Blocking)))))), tupledArg_9[2]), patternInput_4[2])];\n            };\n        }), [0, game_10, empty()], game_10.GameObjects);\n        const updatedGame_1 = patternInput_5[1];\n        const game_8 = new Game(updatedGame_1.Level, updatedGame_1.Map, updatedGame_1.Areas, updatedGame_1.CompositeAreas, patternInput_5[2], updatedGame_1.Player, updatedGame_1.Camera, updatedGame_1.ControlState, updatedGame_1.IsFiring, updatedGame_1.TimeToNextWeaponFrame, updatedGame_1.Doors, updatedGame_1.ViewportFilter, updatedGame_1.PixelDissolver, updatedGame_1.ResetLevel);\n        game_3 = fold((innerGame, gameObject_2) => {\n            if (gameObject_2.tag === 1) {\n                const enemy_1 = gameObject_2.fields[0];\n                if (enemy_1.EnemyType.tag === 3) {\n                    return innerGame;\n                }\n                else {\n                    const matchValue_12 = [enemy_1.State, Enemy__get_DirectionVector(enemy_1)];\n                    let pattern_matching_result_3, direction;\n                    if (matchValue_12[0].tag === 3) {\n                        if (matchValue_12[1] != null) {\n                            pattern_matching_result_3 = 0;\n                            direction = matchValue_12[1];\n                        }\n                        else {\n                            pattern_matching_result_3 = 1;\n                        }\n                    }\n                    else if (matchValue_12[0].tag === 6) {\n                        if (matchValue_12[1] != null) {\n                            pattern_matching_result_3 = 0;\n                            direction = matchValue_12[1];\n                        }\n                        else {\n                            pattern_matching_result_3 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_3 = 1;\n                    }\n                    switch (pattern_matching_result_3) {\n                        case 0: {\n                            const maxDistanceToCheck = Vector2D_op_Multiply_Z23A8CFC1(Vector2D__Abs(Vector2D__Normalize(direction)), 1.5);\n                            const patternInput_3 = cast(() => [false, enemy_1.BasicGameObject.Position.vX, enemy_1.BasicGameObject.Position.vY, direction], (tupledArg_6) => {\n                                const mapX_1 = tupledArg_6[3] | 0;\n                                const mapY_1 = tupledArg_6[4] | 0;\n                                if ((!tupledArg_6[0]) && ((((mapX_1 >= 0) && (mapX_1 < length(item(0, game_8.Map)))) && (mapY_1 >= 0)) && (mapY_1 < length(game_8.Map)))) {\n                                    if (Math.abs(tupledArg_6[1]) < maxDistanceToCheck.vX) {\n                                        return true;\n                                    }\n                                    else {\n                                        return Math.abs(tupledArg_6[2]) < maxDistanceToCheck.vY;\n                                    }\n                                }\n                                else {\n                                    return false;\n                                }\n                            }, game_8);\n                            if (patternInput_3[0]) {\n                                const matchValue_13 = item(patternInput_3[5], item(patternInput_3[6], game_8.Map));\n                                if (matchValue_13.tag === 1) {\n                                    const doorIndex_1 = matchValue_13.fields[0] | 0;\n                                    const newDoorState_2 = tryOpenDoor(item(doorIndex_1, innerGame.Doors));\n                                    const Doors_1 = mapIndexed((i_2, d_1) => {\n                                        if (i_2 === doorIndex_1) {\n                                            return newDoorState_2;\n                                        }\n                                        else {\n                                            return d_1;\n                                        }\n                                    }, innerGame.Doors);\n                                    return new Game(innerGame.Level, innerGame.Map, innerGame.Areas, updateCompositeAreas(newDoorState_2, innerGame.CompositeAreas), innerGame.GameObjects, innerGame.Player, innerGame.Camera, innerGame.ControlState, innerGame.IsFiring, innerGame.TimeToNextWeaponFrame, Doors_1, innerGame.ViewportFilter, innerGame.PixelDissolver, innerGame.ResetLevel);\n                                }\n                                else {\n                                    return innerGame;\n                                }\n                            }\n                            else {\n                                return innerGame;\n                            }\n                        }\n                        case 1: {\n                            return innerGame;\n                        }\n                    }\n                }\n            }\n            else {\n                return innerGame;\n            }\n        }, game_8, game_8.GameObjects);\n        if ((((!renderingResult.IsDoorInFrontOfPlayer) && (renderingResult.DistanceToWallInFrontOfPlayer <= actionDistanceTolerance)) ? true : (renderingResult.IsDoorInFrontOfPlayer && (renderingResult.DistanceToWallInFrontOfPlayer <= actionDoorDistanceTolerance))) && ((game_3.ControlState & 128) > 0)) {\n            const patternInput = renderingResult.WallInFrontOfPlayer;\n            const matchValue_2 = item(patternInput[0], item(patternInput[1], game_3.Map));\n            switch (matchValue_2.tag) {\n                case 1: {\n                    const doorIndex = matchValue_2.fields[0] | 0;\n                    const newDoorState = tryOpenDoor(item(doorIndex, game_3.Doors));\n                    const Doors = mapIndexed((i, d) => {\n                        if (i === doorIndex) {\n                            return newDoorState;\n                        }\n                        else {\n                            return d;\n                        }\n                    }, game_3.Doors);\n                    game_17 = (new Game(game_3.Level, game_3.Map, game_3.Areas, updateCompositeAreas(newDoorState, game_3.CompositeAreas), game_3.GameObjects, game_3.Player, game_3.Camera, game_3.ControlState, game_3.IsFiring, game_3.TimeToNextWeaponFrame, Doors, game_3.ViewportFilter, game_3.PixelDissolver, game_3.ResetLevel));\n                    break;\n                }\n                case 0: {\n                    game_17 = (Wall__get_IsExit(matchValue_2.fields[0]) ? nextLevel(game_3) : game_3);\n                    break;\n                }\n                default: {\n                    game_17 = game_3;\n                }\n            }\n        }\n        else {\n            game_17 = game_3;\n        }\n        const playerMapPosition = Game__get_PlayerMapPosition(game_17);\n        const gameObjectsAtLocation = filter((go_3) => {\n            if (equalArrays(BasicGameObject__get_MapPosition(GameObject__get_BasicGameObject(go_3)), playerMapPosition) && GameObject__get_BasicGameObject(go_3).Pickupable) {\n                if (GameObject__get_BasicGameObject(go_3).HitpointsRestored === 0) {\n                    return true;\n                }\n                else {\n                    return game_17.Player.Health < 100;\n                }\n            }\n            else {\n                return false;\n            }\n        }, game_17.GameObjects);\n        if (length(gameObjectsAtLocation) > 0) {\n            const patternInput_7 = Game__get_PlayerMapPosition(game_17);\n            if (Vector2D__get_Magnitude(Vector2D_op_Subtraction_3C4D5180(game_17.Camera.Position, new Vector2D(patternInput_7[0] + 0.5, patternInput_7[1] + 0.5))) < 0.5) {\n                const updatedPlayer = fold((player_1, go_4) => {\n                    const bgo = GameObject__get_BasicGameObject(go_4);\n                    const Ammunition_2 = min(comparePrimitives, 99, player_1.Ammunition + bgo.AmmoRestored) | 0;\n                    const Health = min(comparePrimitives, 100, player_1.Health + bgo.HitpointsRestored) | 0;\n                    return new Player_8(player_1.Score + bgo.Score, min(comparePrimitives, 9, player_1.Lives + bgo.LivesRestored), Health, player_1.Radius, player_1.CurrentWeaponIndex, Ammunition_2, player_1.Weapons, player_1.CurrentFaceIndex, player_1.TimeToFaceChangeMs);\n                }, game_17.Player, gameObjectsAtLocation);\n                const viewportFilter = (game_17.ViewportFilter.tag === 0) ? (new ViewportFilter_1(1, OverlayAnimation_get_Pickup())) : game_17.ViewportFilter;\n                game_4 = (new Game(game_17.Level, game_17.Map, game_17.Areas, game_17.CompositeAreas, filter((go_5) => (!contains_2(go_5, gameObjectsAtLocation, {\n                    Equals: equals,\n                    GetHashCode: safeHash,\n                })), game_17.GameObjects), updatedPlayer, game_17.Camera, game_17.ControlState, game_17.IsFiring, game_17.TimeToNextWeaponFrame, game_17.Doors, viewportFilter, game_17.PixelDissolver, game_17.ResetLevel));\n            }\n            else {\n                game_4 = game_17;\n            }\n        }\n        else {\n            game_4 = game_17;\n        }\n        const patternInput_2 = fold(uncurry(2, (tupledArg_2) => {\n            const updatedCompositeAreas = tupledArg_2[1];\n            return (doorState_2) => {\n                const newTimeRemainingInAnimationState = doorState_2.TimeRemainingInAnimationState - frameTime;\n                let patternInput_1;\n                const matchValue_3 = doorState_2.Status;\n                switch (matchValue_3.tag) {\n                    case 0: {\n                        patternInput_1 = ((newTimeRemainingInAnimationState < 0) ? [new DoorState(doorState_2.TextureIndex, doorState_2.DoorDirection, new DoorStatus(2), 64, doorOpenTime, doorState_2.MapPosition, doorState_2.AreaOne, doorState_2.AreaTwo), updatedCompositeAreas] : [new DoorState(doorState_2.TextureIndex, doorState_2.DoorDirection, doorState_2.Status, ((doorOpeningTime - newTimeRemainingInAnimationState) / doorOpeningTime) * 64, newTimeRemainingInAnimationState, doorState_2.MapPosition, doorState_2.AreaOne, doorState_2.AreaTwo), updatedCompositeAreas]);\n                        break;\n                    }\n                    case 2: {\n                        if (newTimeRemainingInAnimationState < 0) {\n                            if (equalArrays(Game__get_PlayerMapPosition(game_4), doorState_2.MapPosition)) {\n                                patternInput_1 = [new DoorState(doorState_2.TextureIndex, doorState_2.DoorDirection, doorState_2.Status, doorState_2.Offset, 1500, doorState_2.MapPosition, doorState_2.AreaOne, doorState_2.AreaTwo), updatedCompositeAreas];\n                            }\n                            else {\n                                playSoundEffect(game_4, Vector2D_CreateFromMapPosition_Z3227AE51(doorState_2.MapPosition), new SoundEffect(2));\n                                patternInput_1 = [new DoorState(doorState_2.TextureIndex, doorState_2.DoorDirection, new DoorStatus(1), doorState_2.Offset, doorOpeningTime, doorState_2.MapPosition, doorState_2.AreaOne, doorState_2.AreaTwo), updatedCompositeAreas];\n                            }\n                        }\n                        else {\n                            patternInput_1 = [new DoorState(doorState_2.TextureIndex, doorState_2.DoorDirection, doorState_2.Status, doorState_2.Offset, newTimeRemainingInAnimationState, doorState_2.MapPosition, doorState_2.AreaOne, doorState_2.AreaTwo), updatedCompositeAreas];\n                        }\n                        break;\n                    }\n                    case 1: {\n                        if (newTimeRemainingInAnimationState < 0) {\n                            const updatedDoorState = new DoorState(doorState_2.TextureIndex, doorState_2.DoorDirection, new DoorStatus(3), 0, doorOpeningTime, doorState_2.MapPosition, doorState_2.AreaOne, doorState_2.AreaTwo);\n                            patternInput_1 = [updatedDoorState, updateCompositeAreas(updatedDoorState, game_4.CompositeAreas)];\n                        }\n                        else {\n                            patternInput_1 = [new DoorState(doorState_2.TextureIndex, doorState_2.DoorDirection, doorState_2.Status, 64 - (((doorOpeningTime - newTimeRemainingInAnimationState) / doorOpeningTime) * 64), newTimeRemainingInAnimationState, doorState_2.MapPosition, doorState_2.AreaOne, doorState_2.AreaTwo), updatedCompositeAreas];\n                        }\n                        break;\n                    }\n                    default: {\n                        patternInput_1 = [doorState_2, updatedCompositeAreas];\n                    }\n                }\n                return [append(tupledArg_2[0], singleton(patternInput_1[0])), patternInput_1[1]];\n            };\n        }), [empty(), game_4.CompositeAreas], game_4.Doors);\n        game_13 = (new Game(game_4.Level, game_4.Map, game_4.Areas, patternInput_2[1], game_4.GameObjects, game_4.Player, game_4.Camera, game_4.ControlState, game_4.IsFiring, game_4.TimeToNextWeaponFrame, patternInput_2[0], game_4.ViewportFilter, game_4.PixelDissolver, game_4.ResetLevel));\n        game_12 = (new Game(game_13.Level, game_13.Map, game_13.Areas, game_13.CompositeAreas, game_13.GameObjects, game_13.Player, game_13.Camera, game_13.ControlState, game_13.IsFiring, game_13.TimeToNextWeaponFrame, game_13.Doors, (matchValue_14 = game_13.ViewportFilter, (matchValue_14.tag === 1) ? ((overlay = matchValue_14.fields[0], (timeRemainingInFrame = (overlay.TimeRemainingUntilNextFrame - frameTime), (timeRemainingInFrame <= 0) ? ((newTimeRemainingInFrame = (overlay.FrameLength + timeRemainingInFrame), (newOpacity = (overlay.Opacity + overlay.OpacityDelta), (newOpacity >= overlay.MaxOpacity) ? (new ViewportFilter_1(1, new OverlayAnimation(overlay.Red, overlay.Green, overlay.Blue, overlay.MaxOpacity, overlay.MaxOpacity, overlay.OpacityDelta * -1, overlay.FrameLength, newTimeRemainingInFrame))) : ((newOpacity <= 0) ? (new ViewportFilter_1(0)) : (new ViewportFilter_1(1, new OverlayAnimation(overlay.Red, overlay.Green, overlay.Blue, newOpacity, overlay.MaxOpacity, overlay.OpacityDelta, overlay.FrameLength, newTimeRemainingInFrame))))))) : (new ViewportFilter_1(1, new OverlayAnimation(overlay.Red, overlay.Green, overlay.Blue, overlay.Opacity, overlay.MaxOpacity, overlay.OpacityDelta, overlay.FrameLength, timeRemainingInFrame)))))) : game_13.ViewportFilter), game_13.PixelDissolver, game_13.ResetLevel));\n        game_16 = (new Game(game_12.Level, game_12.Map, game_12.Areas, game_12.CompositeAreas, sortByDescending((s) => {\n            const objectTypeDepth = ((s.tag === 0) ? (s.fields[0].Pickupable ? 0 : 2) : 1) | 0;\n            return [GameObject__get_BasicGameObject(s).UnsquaredDistanceFromPlayer, objectTypeDepth];\n        }, game_12.GameObjects, {\n            Compare: compareArrays,\n        }), game_12.Player, game_12.Camera, game_12.ControlState, game_12.IsFiring, game_12.TimeToNextWeaponFrame, game_12.Doors, game_12.ViewportFilter, game_12.PixelDissolver, game_12.ResetLevel));\n        const newTimeRemaining_2 = game_16.Player.TimeToFaceChangeMs - frameTime;\n        game_18 = (new Game(game_16.Level, game_16.Map, game_16.Areas, game_16.CompositeAreas, game_16.GameObjects, (newTimeRemaining_2 < 0) ? ((inputRecord_13 = game_16.Player, (TimeToFaceChangeMs = ((maxDelta = ((random.Next1(100) < 75) ? 1000 : 2250), (random.NextDouble() * maxDelta) + 750)), new Player_8(inputRecord_13.Score, inputRecord_13.Lives, inputRecord_13.Health, inputRecord_13.Radius, inputRecord_13.CurrentWeaponIndex, inputRecord_13.Ammunition, inputRecord_13.Weapons, random.Next1(3), TimeToFaceChangeMs)))) : ((inputRecord_14 = game_16.Player, new Player_8(inputRecord_14.Score, inputRecord_14.Lives, inputRecord_14.Health, inputRecord_14.Radius, inputRecord_14.CurrentWeaponIndex, inputRecord_14.Ammunition, inputRecord_14.Weapons, inputRecord_14.CurrentFaceIndex, newTimeRemaining_2))), game_16.Camera, game_16.ControlState, game_16.IsFiring, game_16.TimeToNextWeaponFrame, game_16.Doors, game_16.ViewportFilter, game_16.PixelDissolver, game_16.ResetLevel));\n        if (game_18.Player.Health < 0) {\n            return new Game(game_18.Level, game_18.Map, game_18.Areas, game_18.CompositeAreas, game_18.GameObjects, game_18.Player, game_18.Camera, game_18.ControlState, game_18.IsFiring, game_18.TimeToNextWeaponFrame, game_18.Doors, new ViewportFilter_1(0), createPixelDissolver(), game_18.ResetLevel);\n        }\n        else {\n            return game_18;\n        }\n    }\n    else {\n        let game_14;\n        const game_15 = game;\n        const matchValue_16 = game_15.PixelDissolver;\n        if (matchValue_16 == null) {\n            game_14 = game_15;\n        }\n        else {\n            const pixelDissolver = matchValue_16;\n            const lengthOfDissolve = 1000;\n            let patternInput_6;\n            const matchValue_17 = pixelDissolver.DissolverState;\n            switch (matchValue_17.tag) {\n                case 0: {\n                    const pixelsToDissolveThisFrame = min(comparePrimitives, ~(~((PixelDissolver__get_TotalPixels(pixelDissolver) / lengthOfDissolve) * frameTime)), length(pixelDissolver.RemainingPixels)) | 0;\n                    const pd = (DrawnPixels = append(pixelDissolver.DrawnPixels, take(pixelsToDissolveThisFrame, pixelDissolver.RemainingPixels)), new PixelDissolver_5(skip(pixelsToDissolveThisFrame, pixelDissolver.RemainingPixels), DrawnPixels, pixelDissolver.PixelSize, pixelDissolver.PauseTimeRemaining, pixelDissolver.DissolverState));\n                    patternInput_6 = ((length(pd.RemainingPixels) === 0) ? [new PixelDissolver_5(pd.RemainingPixels, pd.DrawnPixels, pd.PixelSize, pd.PauseTimeRemaining, new PixelDissolverState(2)), true] : [pd, false]);\n                    break;\n                }\n                case 2: {\n                    const newTimeRemaining_1 = pixelDissolver.PauseTimeRemaining - frameTime;\n                    patternInput_6 = ((newTimeRemaining_1 <= 0) ? [new PixelDissolver_5(pixelDissolver.RemainingPixels, pixelDissolver.DrawnPixels, pixelDissolver.PixelSize, pixelDissolver.PauseTimeRemaining, new PixelDissolverState(1)), false] : [new PixelDissolver_5(pixelDissolver.RemainingPixels, pixelDissolver.DrawnPixels, pixelDissolver.PixelSize, newTimeRemaining_1, pixelDissolver.DissolverState), false]);\n                    break;\n                }\n                case 1: {\n                    const pixelsToDissolveThisFrame_1 = min(comparePrimitives, ~(~((PixelDissolver__get_TotalPixels(pixelDissolver) / lengthOfDissolve) * frameTime)), length(pixelDissolver.DrawnPixels)) | 0;\n                    patternInput_6 = [(DrawnPixels_1 = skip(pixelsToDissolveThisFrame_1, pixelDissolver.DrawnPixels), new PixelDissolver_5(append(pixelDissolver.RemainingPixels, take(pixelsToDissolveThisFrame_1, pixelDissolver.DrawnPixels)), DrawnPixels_1, pixelDissolver.PixelSize, pixelDissolver.PauseTimeRemaining, pixelDissolver.DissolverState)), false];\n                    break;\n                }\n                default: {\n                    patternInput_6 = [pixelDissolver, false];\n                }\n            }\n            const updatedDissolver = patternInput_6[0];\n            if (patternInput_6[1]) {\n                if (game_15.Player.Lives === 1) {\n                    game_14 = (new Game(game_15.Level, game_15.Map, game_15.Areas, game_15.CompositeAreas, game_15.GameObjects, (inputRecord_11 = game_15.Player, new Player_8(inputRecord_11.Score, 0, inputRecord_11.Health, inputRecord_11.Radius, inputRecord_11.CurrentWeaponIndex, inputRecord_11.Ammunition, inputRecord_11.Weapons, inputRecord_11.CurrentFaceIndex, inputRecord_11.TimeToFaceChangeMs)), game_15.Camera, game_15.ControlState, game_15.IsFiring, game_15.TimeToNextWeaponFrame, game_15.Doors, game_15.ViewportFilter, new PixelDissolver_5(updatedDissolver.RemainingPixels, updatedDissolver.DrawnPixels, updatedDissolver.PixelSize, updatedDissolver.PauseTimeRemaining, new PixelDissolverState(3)), game_15.ResetLevel));\n                }\n                else {\n                    const resetLevel = game_15.ResetLevel(game_15, game_15.Player);\n                    game_14 = (new Game(resetLevel.Level, resetLevel.Map, resetLevel.Areas, resetLevel.CompositeAreas, resetLevel.GameObjects, (inputRecord_12 = resetLevel.Player, new Player_8(inputRecord_12.Score, game_15.Player.Lives - 1, inputRecord_12.Health, inputRecord_12.Radius, inputRecord_12.CurrentWeaponIndex, inputRecord_12.Ammunition, inputRecord_12.Weapons, inputRecord_12.CurrentFaceIndex, inputRecord_12.TimeToFaceChangeMs)), resetLevel.Camera, resetLevel.ControlState, resetLevel.IsFiring, resetLevel.TimeToNextWeaponFrame, resetLevel.Doors, resetLevel.ViewportFilter, updatedDissolver, resetLevel.ResetLevel));\n                }\n            }\n            else {\n                game_14 = (new Game(game_15.Level, game_15.Map, game_15.Areas, game_15.CompositeAreas, game_15.GameObjects, game_15.Player, game_15.Camera, game_15.ControlState, game_15.IsFiring, game_15.TimeToNextWeaponFrame, game_15.Doors, game_15.ViewportFilter, updatedDissolver, game_15.ResetLevel));\n            }\n        }\n        const matchValue_15 = game_14.PixelDissolver;\n        let pattern_matching_result_4;\n        if (matchValue_15 != null) {\n            if (isEmpty(matchValue_15.DrawnPixels)) {\n                if (matchValue_15.DissolverState.tag === 1) {\n                    pattern_matching_result_4 = 0;\n                }\n                else {\n                    pattern_matching_result_4 = 1;\n                }\n            }\n            else {\n                pattern_matching_result_4 = 1;\n            }\n        }\n        else {\n            pattern_matching_result_4 = 1;\n        }\n        switch (pattern_matching_result_4) {\n            case 0: {\n                return new Game(game_14.Level, game_14.Map, game_14.Areas, game_14.CompositeAreas, game_14.GameObjects, game_14.Player, game_14.Camera, game_14.ControlState, game_14.IsFiring, game_14.TimeToNextWeaponFrame, game_14.Doors, game_14.ViewportFilter, void 0, game_14.ResetLevel);\n            }\n            case 1: {\n                return game_14;\n            }\n        }\n    }\n}\n\n","import { FSharpException } from \"./fable_modules/fable-library.3.7.14/Types.js\";\nimport { class_type } from \"./fable_modules/fable-library.3.7.14/Reflection.js\";\nimport { equals } from \"./fable_modules/fable-library.3.7.14/Util.js\";\nimport { SpriteLayout } from \"./Model.fs.js\";\nimport { VSWAP, isShareware } from \"./Assets.fs.js\";\nimport { Texture__getPixel, Texture__setPixel } from \"./Model.Platform.fs.js\";\nimport { singleton } from \"./fable_modules/fable-library.3.7.14/AsyncBuilder.js\";\nimport { loadAsset } from \"./Utils.fs.js\";\n\nexport class MissingGraphicsPackException extends FSharpException {\n    constructor() {\n        super();\n    }\n}\n\nexport function MissingGraphicsPackException$reflection() {\n    return class_type(\"App.GraphicsCommon.MissingGraphicsPackException\", void 0, MissingGraphicsPackException, class_type(\"System.Exception\"));\n}\n\nfunction MissingGraphicsPackException__Equals_229D3F39(this$, obj) {\n    if (!equals(this$, null)) {\n        if (!equals(obj, null)) {\n            if (obj instanceof MissingGraphicsPackException) {\n                return 1;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else if (!equals(obj, null)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nexport const gamePalette = new Uint32Array([4278190080, 4289200128, 4278233088, 4289243136, 4278190248, 4289200296, 4278211752, 4289243304, 4283716692, 4294726740, 4283759700, 4294769748, 4283716860, 4294726908, 4283759868, 4294769916, 4293717228, 4292664540, 4291875024, 4290822336, 4290032820, 4289243304, 4288190616, 4287401100, 4286348412, 4285558896, 4284769380, 4283716692, 4282927176, 4281874488, 4281084972, 4280295456, 4278190332, 4278190316, 4278190304, 4278190292, 4278190280, 4278190268, 4278190256, 4278190244, 4278190232, 4278190216, 4278190204, 4278190192, 4278190180, 4278190168, 4278190156, 4278190144, 4292401404, 4290296060, 4288453884, 4286348540, 4284243196, 4282401020, 4280295676, 4278190332, 4284262652, 4282423548, 4280322300, 4278221052, 4278217956, 4278214860, 4278211764, 4278209692, 4292410620, 4290313468, 4288478460, 4286381308, 4284283132, 4282447100, 4280349948, 4278252796, 4278245604, 4278240460, 4278234292, 4278230172, 4278224004, 4278217840, 4278211672, 4278206528, 4284284112, 4282449092, 4280351924, 4278254752, 4278248592, 4278242432, 4278236276, 4278230112, 4292410584, 4290313404, 4288478364, 4286381184, 4284284000, 4282448960, 4280351776, 4278254592, 4278254592, 4278250496, 4278247424, 4278244352, 4278241284, 4278238212, 4278235140, 4278232068, 4278228996, 4278224900, 4278221828, 4278218756, 4278215684, 4278212612, 4278209540, 4278206468, 4294769880, 4294769848, 4294769820, 4294507644, 4294769756, 4294769728, 4294769696, 4294769664, 4293190656, 4291611648, 4290032640, 4288453632, 4286874624, 4285558784, 4283979776, 4282400768, 4294753372, 4294750272, 4294748192, 4294745088, 4293168128, 4291591168, 4290014208, 4288437248, 4294760664, 4294753464, 4294745244, 4294738044, 4294729820, 4294721600, 4294714400, 4294706176, 4294705152, 4293656576, 4292870144, 4292083712, 4291297280, 4290510848, 4289724416, 4288937984, 4288151552, 4287102976, 4286316544, 4285530112, 4284743680, 4283957248, 4283170816, 4282384384, 4280821800, 4281655548, 4280603900, 4279815420, 4278763772, 4278236412, 4294713524, 4294705320, 4293132440, 4291559552, 4289986676, 4288413792, 4286840912, 4285530180, 4283957300, 4282384424, 4294760700, 4294752508, 4294745340, 4294737148, 4294728956, 4294721788, 4294713596, 4294705404, 4293132512, 4291559624, 4289986740, 4288413852, 4286840964, 4285530220, 4283957336, 4282384448, 4292667644, 4291879164, 4291090684, 4290565372, 4289776892, 4288988412, 4288462076, 4287674620, 4286623996, 4285572348, 4284521724, 4284257520, 4283993320, 4283730140, 4283465936, 4283202760, 4282939580, 4282675380, 4282411176, 4282148000, 4281884828, 4281621648, 4281358472, 4281094272, 4280831092, 4280567916, 4280303708, 4280040532, 4279777352, 4279775296, 4279512120, 4278984744, 4284743776, 4284769280, 4284506112, 4280025088, 4281073664, 4279247920, 4282908744, 4283433040, 4281597952, 4280032284, 4283190348, 4284243036, 4282400832, 4281348144, 4281611316, 4294243544, 4293454008, 4292664476, 4291348596, 4290822216, 4290032672, 4289769504, 4288979968, 4288190464, 4287400960, 4286874624, 4286348288, 4286085120, 4285821952, 4285558784, 4285295616, 4287103128]);\n\nexport function spriteOffsets(vswapView, _arg1, spriteIndex) {\n    const firstSprite = vswapView.getUint16(2, true);\n    const spriteOffset = vswapView.getUint32(6 + (4 * ((~(~firstSprite)) + spriteIndex)), true);\n    const firstColumnOffset = vswapView.getUint16(~(~spriteOffset), true);\n    const lastColumnOffset = vswapView.getUint16((~(~spriteOffset)) + 2, true);\n    return new SpriteLayout(spriteOffset, firstColumnOffset, lastColumnOffset, (spriteOffset + 4) + (2 * ((lastColumnOffset - firstColumnOffset) + 1)));\n}\n\nexport function textureStripOffset(_arg1, wallTextureOffset, textureIndex, textureX) {\n    return (wallTextureOffset + (4096 * ((isShareware && (textureIndex >= 98)) ? ((56 + textureIndex) - 98) : textureIndex))) + (64 * textureX);\n}\n\nexport function textureColor(vswapView, _arg1, textureOffset, textureY) {\n    const paletteIndex = vswapView.getUint8(textureOffset + textureY);\n    return gamePalette[~(~paletteIndex)];\n}\n\nexport function setPixel(imageData, color, x, y) {\n    Texture__setPixel(imageData, color, x, y);\n}\n\nexport function getPixel(imageData, x, y) {\n    return Texture__getPixel(imageData, x, y);\n}\n\nexport function loadGraphics() {\n    return singleton.Delay(() => singleton.Bind(loadAsset(VSWAP), (_arg1) => {\n        const vswapResult = _arg1;\n        let result;\n        if (vswapResult.tag === 1) {\n            throw (new MissingGraphicsPackException());\n        }\n        else {\n            const vswapView = new DataView(vswapResult.fields[0]);\n            result = [vswapView, ~(~vswapView.getUint32(6, true))];\n        }\n        return singleton.Return(result);\n    }));\n}\n\n","import { singleton } from \"./fable_modules/fable-library.3.7.14/AsyncBuilder.js\";\nimport { Texture } from \"./Model.Platform.fs.js\";\nimport { sleep } from \"./fable_modules/fable-library.3.7.14/Async.js\";\nimport { value as value_1 } from \"./fable_modules/fable-library.3.7.14/Option.js\";\nimport { append, map, contains, fill } from \"./fable_modules/fable-library.3.7.14/Array.js\";\nimport { iterate, length } from \"./fable_modules/fable-library.3.7.14/Seq.js\";\nimport { isShareware, isSharewareSprite } from \"./Assets.fs.js\";\nimport { structuralHash, equals } from \"./fable_modules/fable-library.3.7.14/Util.js\";\nimport { printf, toText } from \"./fable_modules/fable-library.3.7.14/String.js\";\nimport { rangeDouble } from \"./fable_modules/fable-library.3.7.14/Range.js\";\nimport { StatusBarGraphics } from \"./Model.fs.js\";\nimport { setPixel, getPixel } from \"./Graphics.Common.fs.js\";\n\nexport function spriteColorIsTransparent(color) {\n    if (color === 4287234202) {\n        return true;\n    }\n    else {\n        return color === 0;\n    }\n}\n\nexport function scaleSprite(_arg2, _arg1, image) {\n    return image;\n}\n\nexport function loadTexture(name, textureWidth, textureHeight) {\n    return singleton.Delay(() => {\n        let imageData = void 0;\n        let image;\n        try {\n            let returnVal = new Image(textureWidth, textureHeight);\n            returnVal.src = name;\n            returnVal.onerror = ((_arg1) => {\n                const canvas = window.document.createElement(\"canvas\");\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n                const context = canvas.getContext('2d');\n                const buffer = context.getImageData(0, 0, textureWidth, textureHeight).data.buffer;\n                imageData = (new Texture(new Uint32Array(buffer), new Uint8ClampedArray(buffer), canvas, ~(~textureWidth), ~(~textureHeight)));\n            });\n            image = returnVal;\n        }\n        catch (matchValue) {\n            let returnVal_1 = new Image(textureWidth, textureHeight);\n            returnVal_1.src = \"assets/sprites/SPR00000.png\";\n            image = returnVal_1;\n        }\n        const canvas_1 = window.document.createElement(\"canvas\");\n        canvas_1.width = image.width;\n        canvas_1.height = image.height;\n        image.onload = ((_arg2) => {\n            const context_1 = canvas_1.getContext('2d');\n            context_1.drawImage(image, 0, 0, image.width, image.height);\n            const buffer_1 = context_1.getImageData(0, 0, image.width, image.height).data.buffer;\n            imageData = (new Texture(new Uint32Array(buffer_1), new Uint8ClampedArray(buffer_1), canvas_1, ~(~image.width), ~(~image.height)));\n        });\n        return singleton.Combine(singleton.While(() => (imageData == null), singleton.Delay(() => singleton.Bind(sleep(500), () => singleton.Return()))), singleton.Delay(() => singleton.Return(value_1(imageData))));\n    });\n}\n\nexport function loadTextureSet(nameFormatter, fallbackName, textureWidth, textureHeight, checkShareware, indexes) {\n    return singleton.Delay(() => {\n        const imageDataArray = fill(new Array(length(indexes)), 0, length(indexes), void 0);\n        iterate((index) => {\n            let image;\n            const spriteFileIndex = ((((!checkShareware) ? true : isSharewareSprite(index)) ? true : (!isShareware)) ? index : 0) | 0;\n            try {\n                let returnVal = new Image();\n                returnVal.src = nameFormatter(spriteFileIndex);\n                returnVal.onerror = ((_arg1) => {\n                    const canvas = window.document.createElement(\"canvas\");\n                    canvas.width = textureWidth;\n                    canvas.height = textureHeight;\n                    const context = canvas.getContext('2d');\n                    const buffer = context.getImageData(0, 0, textureWidth, textureHeight).data.buffer;\n                    imageDataArray[index] = (new Texture(new Uint32Array(buffer), new Uint8ClampedArray(buffer), canvas, 64, 64));\n                });\n                image = returnVal;\n            }\n            catch (matchValue) {\n                let returnVal_1 = new Image(textureWidth, textureHeight);\n                returnVal_1.src = fallbackName;\n                image = returnVal_1;\n            }\n            const canvas_1 = window.document.createElement(\"canvas\");\n            image.onload = ((_arg2) => {\n                canvas_1.width = image.width;\n                canvas_1.height = image.height;\n                const context_1 = canvas_1.getContext('2d');\n                context_1.drawImage(image, 0, 0, image.width, image.height);\n                const buffer_1 = context_1.getImageData(0, 0, image.width, image.height).data.buffer;\n                imageDataArray[index] = (new Texture(new Uint32Array(buffer_1), new Uint8ClampedArray(buffer_1), canvas_1, ~(~image.width), ~(~image.height)));\n            });\n        }, indexes);\n        return singleton.Combine(singleton.While(() => contains(void 0, imageDataArray, {\n            Equals: equals,\n            GetHashCode: structuralHash,\n        }), singleton.Delay(() => singleton.Bind(sleep(500), () => singleton.Return()))), singleton.Delay(() => singleton.Return(map(value_1, imageDataArray))));\n    });\n}\n\nexport function loadStatusBar(_arg1) {\n    return singleton.Delay(() => singleton.Bind(loadTextureSet((i) => {\n        const arg10 = (i + 109) | 0;\n        return toText(printf(\"assets/statusBar/PIC%05d.png\"))(arg10);\n    }, \"assets/sprites/SPR00000.png\", 24, 32, false, rangeDouble(0, 1, 23)), (_arg2) => {\n        const textureSet = _arg2;\n        return singleton.Bind(loadTexture(\"assets/statusBar/background.png\", 304, 35), (_arg3) => singleton.Bind(loadTextureSet((i_1) => toText(printf(\"assets/statusBar/font/%d.png\"))(i_1), \"assets/sprites/SPR00000.png\", 8, 16, false, rangeDouble(0, 1, 9)), (_arg4) => singleton.Bind(loadTexture(\"assets/statusBar/font/_.png\", 8, 16), (_arg5) => singleton.Bind(loadTexture(\"assets/statusBar/weapons/knife.png\", 48, 24), (_arg6) => singleton.Bind(loadTexture(\"assets/statusBar/weapons/pistol.png\", 48, 24), (_arg7) => singleton.Bind(loadTexture(\"assets/statusBar/weapons/machineGun.png\", 48, 24), (_arg8) => singleton.Bind(loadTexture(\"assets/statusBar/weapons/chainGun.png\", 48, 24), (_arg9) => singleton.Return(new StatusBarGraphics(_arg3, [textureSet.slice(0, 2 + 1), textureSet.slice(3, 5 + 1), textureSet.slice(6, 8 + 1), textureSet.slice(9, 11 + 1), textureSet.slice(12, 14 + 1), textureSet.slice(15, 17 + 1), textureSet.slice(18, 20 + 1)], textureSet[21], textureSet[22], textureSet[23], append(_arg4, [_arg5]), [_arg6, _arg7, _arg8, _arg9])))))))));\n    }));\n}\n\nexport function loadSprites() {\n    return singleton.Delay(() => singleton.ReturnFrom(loadTextureSet((i) => toText(printf(\"assets/sprites/SPR%05d.png\"))(i), \"assets/sprites/SPR00000.png\", 64, 64, true, rangeDouble(0, 1, 435))));\n}\n\nexport function canvasFromTexture(texture) {\n    const canvas = window.document.createElement(\"canvas\");\n    canvas.width = texture.Width;\n    canvas.height = texture.Height;\n    const context = canvas.getContext('2d');\n    iterate((y) => {\n        iterate((x) => {\n            if (spriteColorIsTransparent(getPixel(texture, x, y))) {\n                setPixel(texture, 255, x, y);\n            }\n        }, rangeDouble(0, 1, 63));\n    }, rangeDouble(0, 1, 63));\n    const imageData = new ImageData(texture.ClampedData,texture.Width,texture.Height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n}\n\n","import { Record } from \"./fable_modules/fable-library.3.7.14/Types.js\";\nimport { record_type, int32_type, uint8_type, class_type, uint32_type } from \"./fable_modules/fable-library.3.7.14/Reflection.js\";\n\nexport class Texture extends Record {\n    constructor(Data, ClampedData, SourceCanvas, Width, Height) {\n        super();\n        this.Data = Data;\n        this.ClampedData = ClampedData;\n        this.SourceCanvas = SourceCanvas;\n        this.Width = (Width | 0);\n        this.Height = (Height | 0);\n    }\n}\n\nexport function Texture$reflection() {\n    return record_type(\"App.PlatformModel.Texture\", [], Texture, () => [[\"Data\", class_type(\"Fable.Core.JS.TypedArray`1\", [uint32_type])], [\"ClampedData\", class_type(\"Fable.Core.JS.TypedArray`1\", [uint8_type])], [\"SourceCanvas\", class_type(\"Browser.Types.HTMLCanvasElement\", void 0, HTMLCanvasElement)], [\"Width\", int32_type], [\"Height\", int32_type]]);\n}\n\nexport function Texture__setPixel(this$, color, x, y) {\n    const offset = ((y * this$.Width) + x) | 0;\n    this$.Data[offset]=color;\n}\n\nexport function Texture__getPixel(this$, x, y) {\n    const offset = ((y * this$.Width) + x) | 0;\n    return this$.Data[offset];\n}\n\n","import { FSharpException, Record, Union } from \"./fable_modules/fable-library.3.7.14/Types.js\";\nimport { array_type, lambda_type, enum_type, uint8_type, uint32_type, class_type, record_type, option_type, bool_type, tuple_type, int32_type, list_type, float64_type, union_type } from \"./fable_modules/fable-library.3.7.14/Reflection.js\";\nimport { comparePrimitives, max, equals } from \"./fable_modules/fable-library.3.7.14/Util.js\";\nimport { length, item, ofArray } from \"./fable_modules/fable-library.3.7.14/List.js\";\nimport { Texture$reflection } from \"./Model.Platform.fs.js\";\n\nexport class DifficultyLevel extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"CanIPlayDaddy\", \"DontHurtMe\", \"BringEmOn\", \"IAmDeathIncarnate\"];\n    }\n}\n\nexport function DifficultyLevel$reflection() {\n    return union_type(\"App.Model.DifficultyLevel\", [], DifficultyLevel, () => [[], [], [], []]);\n}\n\nexport class WallRenderingResult extends Record {\n    constructor(ZIndexes, WallInFrontOfPlayer, IsDoorInFrontOfPlayer, DistanceToWallInFrontOfPlayer, SpriteInFrontOfPlayerIndexOption) {\n        super();\n        this.ZIndexes = ZIndexes;\n        this.WallInFrontOfPlayer = WallInFrontOfPlayer;\n        this.IsDoorInFrontOfPlayer = IsDoorInFrontOfPlayer;\n        this.DistanceToWallInFrontOfPlayer = DistanceToWallInFrontOfPlayer;\n        this.SpriteInFrontOfPlayerIndexOption = SpriteInFrontOfPlayerIndexOption;\n    }\n}\n\nexport function WallRenderingResult$reflection() {\n    return record_type(\"App.Model.WallRenderingResult\", [], WallRenderingResult, () => [[\"ZIndexes\", list_type(float64_type)], [\"WallInFrontOfPlayer\", tuple_type(int32_type, int32_type)], [\"IsDoorInFrontOfPlayer\", bool_type], [\"DistanceToWallInFrontOfPlayer\", float64_type], [\"SpriteInFrontOfPlayerIndexOption\", option_type(int32_type)]]);\n}\n\nexport class Vector2D extends Record {\n    constructor(vX, vY) {\n        super();\n        this.vX = vX;\n        this.vY = vY;\n    }\n}\n\nexport function Vector2D$reflection() {\n    return record_type(\"App.Model.Vector2D\", [], Vector2D, () => [[\"vX\", float64_type], [\"vY\", float64_type]]);\n}\n\nexport function Vector2D__get_CrossProduct(x) {\n    return new Vector2D(x.vY, -x.vX);\n}\n\nexport function Vector2D_op_Subtraction_3C4D5180(a, b) {\n    return new Vector2D(a.vX - b.vX, a.vY - b.vY);\n}\n\nexport function Vector2D_op_Addition_3C4D5180(a, b) {\n    return new Vector2D(a.vX + b.vX, a.vY + b.vY);\n}\n\nexport function Vector2D_op_Multiply_Z23A8CFC1(a, b) {\n    return new Vector2D(a.vX * b, a.vY * b);\n}\n\nexport function Vector2D_op_Division_Z23A8CFC1(a, b) {\n    return new Vector2D(a.vX / b, a.vY / b);\n}\n\nexport function Vector2D__UnsquaredDistanceFrom_Z41DD997C(this$, other) {\n    return ((this$.vX - other.vX) * (this$.vX - other.vX)) + ((this$.vY - other.vY) * (this$.vY - other.vY));\n}\n\nexport function Vector2D__Normalize(this$) {\n    const distance = Math.sqrt((this$.vX * this$.vX) + (this$.vY * this$.vY));\n    return new Vector2D(this$.vX / distance, this$.vY / distance);\n}\n\nexport function Vector2D__Abs(this$) {\n    return new Vector2D(Math.abs(this$.vX), Math.abs(this$.vY));\n}\n\nexport function Vector2D__Reverse(this$) {\n    return new Vector2D(this$.vX * -1, this$.vY * -1);\n}\n\nexport function Vector2D__Rotate_Z114CB6F(this$, angle) {\n    const ca = Math.cos(angle);\n    const sa = Math.sin(angle);\n    return new Vector2D((ca * this$.vX) - (sa * this$.vY), (sa * this$.vX) + (ca * this$.vY));\n}\n\nexport function Vector2D__get_StringValue(this$) {\n    return `{ vX: ${this$.vX}, vY: ${this$.vY} }`;\n}\n\nexport function Vector2D__IsBetween(this$, a, b) {\n    if ((((a.vY * b.vX) - (a.vX * b.vY)) * ((a.vY * this$.vX) - (a.vX * this$.vY))) >= 0) {\n        return (((this$.vX * b.vX) - (this$.vX * b.vY)) * ((this$.vY * a.vX) - (this$.vX * a.vY))) >= 0;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function Vector2D__get_Magnitude(this$) {\n    return Math.sqrt((this$.vX * this$.vX) + (this$.vY * this$.vY));\n}\n\nexport function Vector2D__AngleBetween_Z41DD997C(a, b) {\n    return Math.acos((((a.vX * b.vX) + (a.vY * b.vY)) / Vector2D__get_Magnitude(a)) * Vector2D__get_Magnitude(b)) * 1;\n}\n\nexport function Vector2D__LimitToMapUnit_1505(v, _arg1) {\n    return new Vector2D((v.vX > 1) ? 1 : ((v.vX < -1) ? -1 : v.vX), (v.vY > 1) ? 1 : ((v.vY < -1) ? -1 : v.vY));\n}\n\nexport function Vector2D_CreateFromMapPosition_Z3227AE51(position) {\n    return new Vector2D(position[0] + 0.5, position[1] + 0.5);\n}\n\nexport const Direction_north = new Vector2D(0, -1);\n\nexport const Direction_northEast = Vector2D__Normalize(new Vector2D(-1, -1));\n\nexport const Direction_east = new Vector2D(-1, 0);\n\nexport const Direction_southEast = Vector2D__Normalize(new Vector2D(-1, 1));\n\nexport const Direction_south = new Vector2D(0, 1);\n\nexport const Direction_southWest = Vector2D__Normalize(new Vector2D(1, 1));\n\nexport const Direction_west = new Vector2D(1, 0);\n\nexport const Direction_northWest = Vector2D__Normalize(new Vector2D(1, -1));\n\nexport function radiansToDegrees(r) {\n    return (r * 180) / (3.141592653589793 * 1);\n}\n\nexport function degreesToRadians(d) {\n    return ((d * 3.141592653589793) / 180) * 1;\n}\n\nexport class MapDirectionException extends FSharpException {\n    constructor(Data0) {\n        super();\n        this.Data0 = Data0;\n    }\n}\n\nexport function MapDirectionException$reflection() {\n    return class_type(\"App.Model.MapDirectionException\", void 0, MapDirectionException, class_type(\"System.Exception\"));\n}\n\nfunction MapDirectionException__Equals_229D3F39(this$, obj) {\n    if (!equals(this$, null)) {\n        if (!equals(obj, null)) {\n            if (obj instanceof MapDirectionException) {\n                return this$.Data0 === obj.Data0;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else if (!equals(obj, null)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nexport class MapDirection extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"North\", \"NorthEast\", \"East\", \"SouthEast\", \"South\", \"SouthWest\", \"West\", \"NorthWest\", \"None\"];\n    }\n}\n\nexport function MapDirection$reflection() {\n    return union_type(\"App.Model.MapDirection\", [], MapDirection, () => [[], [], [], [], [], [], [], [], []]);\n}\n\nexport function MapDirection_Diagonal(a, b) {\n    const matchValue = [a, b];\n    let pattern_matching_result;\n    if (matchValue[0].tag === 2) {\n        if (matchValue[1].tag === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[1].tag === 4) {\n            pattern_matching_result = 1;\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else if (matchValue[0].tag === 0) {\n        if (matchValue[1].tag === 2) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[1].tag === 6) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else if (matchValue[0].tag === 4) {\n        if (matchValue[1].tag === 2) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1].tag === 6) {\n            pattern_matching_result = 2;\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else if (matchValue[0].tag === 6) {\n        if (matchValue[1].tag === 4) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1].tag === 0) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n    }\n    else {\n        pattern_matching_result = 4;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return new MapDirection(1);\n        }\n        case 1: {\n            return new MapDirection(3);\n        }\n        case 2: {\n            return new MapDirection(5);\n        }\n        case 3: {\n            return new MapDirection(7);\n        }\n        case 4: {\n            throw (new MapDirectionException(`No diagonal for ${a},${b}`));\n        }\n    }\n}\n\nexport function MapDirection__ToDelta(x) {\n    switch (x.tag) {\n        case 1: {\n            return [-1, -1];\n        }\n        case 2: {\n            return [-1, 0];\n        }\n        case 3: {\n            return [-1, 1];\n        }\n        case 4: {\n            return [0, 1];\n        }\n        case 5: {\n            return [1, 1];\n        }\n        case 6: {\n            return [1, 0];\n        }\n        case 7: {\n            return [1, -1];\n        }\n        case 8: {\n            return [0, 0];\n        }\n        default: {\n            return [0, -1];\n        }\n    }\n}\n\nexport function MapDirection__ToVector(x) {\n    switch (x.tag) {\n        case 1: {\n            return Direction_northEast;\n        }\n        case 2: {\n            return Direction_east;\n        }\n        case 3: {\n            return Direction_southEast;\n        }\n        case 4: {\n            return Direction_south;\n        }\n        case 5: {\n            return Direction_southWest;\n        }\n        case 6: {\n            return Direction_west;\n        }\n        case 7: {\n            return Direction_northWest;\n        }\n        case 8: {\n            return void 0;\n        }\n        default: {\n            return Direction_north;\n        }\n    }\n}\n\nexport function MapDirection__Reverse(x) {\n    switch (x.tag) {\n        case 1: {\n            return new MapDirection(5);\n        }\n        case 2: {\n            return new MapDirection(6);\n        }\n        case 3: {\n            return new MapDirection(7);\n        }\n        case 4: {\n            return new MapDirection(0);\n        }\n        case 5: {\n            return new MapDirection(1);\n        }\n        case 6: {\n            return new MapDirection(2);\n        }\n        case 7: {\n            return new MapDirection(3);\n        }\n        case 8: {\n            return new MapDirection(8);\n        }\n        default: {\n            return new MapDirection(4);\n        }\n    }\n}\n\nexport class Side extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"NorthSouth\", \"EastWest\"];\n    }\n}\n\nexport function Side$reflection() {\n    return union_type(\"App.Model.Side\", [], Side, () => [[], []]);\n}\n\nexport class Wall extends Record {\n    constructor(NorthSouthTextureIndex, EastWestTextureIndex) {\n        super();\n        this.NorthSouthTextureIndex = (NorthSouthTextureIndex | 0);\n        this.EastWestTextureIndex = (EastWestTextureIndex | 0);\n    }\n}\n\nexport function Wall$reflection() {\n    return record_type(\"App.Model.Wall\", [], Wall, () => [[\"NorthSouthTextureIndex\", int32_type], [\"EastWestTextureIndex\", int32_type]]);\n}\n\nexport function Wall__get_IsExit(this$) {\n    if (((this$.NorthSouthTextureIndex === 40) ? true : (this$.EastWestTextureIndex === 40)) ? true : (this$.NorthSouthTextureIndex === 41)) {\n        return true;\n    }\n    else {\n        return this$.EastWestTextureIndex === 41;\n    }\n}\n\nexport class SoundEffect extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"UttGuards\", \"Dog\", \"DoorClose\", \"DoorOpen\", \"PlayerMachineGun\", \"PlayerPistol\", \"PlayerChainGun\", \"Hoofafo\", \"GutenTag\", \"Mutti\", \"GuardChainGun\", \"GuardMachineGun\", \"Aarggh\", \"Aieeee\", \"Ooof\", \"SecretDoor\", \"MeinLeben\", \"GuardPistol\", \"BubblesQuestion\", \"VictoryYeah\", \"Tick\"];\n    }\n}\n\nexport function SoundEffect$reflection() {\n    return union_type(\"App.Model.SoundEffect\", [], SoundEffect, () => [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]);\n}\n\nexport function SoundEffect_get_All() {\n    return ofArray([new SoundEffect(0), new SoundEffect(1), new SoundEffect(2), new SoundEffect(3), new SoundEffect(4), new SoundEffect(5), new SoundEffect(6), new SoundEffect(7), new SoundEffect(8), new SoundEffect(9), new SoundEffect(10), new SoundEffect(11), new SoundEffect(12), new SoundEffect(13), new SoundEffect(14), new SoundEffect(15), new SoundEffect(16), new SoundEffect(17), new SoundEffect(18), new SoundEffect(19), new SoundEffect(20)]);\n}\n\nexport class DoorDirection extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"NorthSouth\", \"EastWest\"];\n    }\n}\n\nexport function DoorDirection$reflection() {\n    return union_type(\"App.Model.DoorDirection\", [], DoorDirection, () => [[], []]);\n}\n\nexport class DoorStatus extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Opening\", \"Closing\", \"Open\", \"Closed\"];\n    }\n}\n\nexport function DoorStatus$reflection() {\n    return union_type(\"App.Model.DoorStatus\", [], DoorStatus, () => [[], [], [], []]);\n}\n\nexport class DoorState extends Record {\n    constructor(TextureIndex, DoorDirection, Status, Offset, TimeRemainingInAnimationState, MapPosition, AreaOne, AreaTwo) {\n        super();\n        this.TextureIndex = (TextureIndex | 0);\n        this.DoorDirection = DoorDirection;\n        this.Status = Status;\n        this.Offset = Offset;\n        this.TimeRemainingInAnimationState = TimeRemainingInAnimationState;\n        this.MapPosition = MapPosition;\n        this.AreaOne = (AreaOne | 0);\n        this.AreaTwo = (AreaTwo | 0);\n    }\n}\n\nexport function DoorState$reflection() {\n    return record_type(\"App.Model.DoorState\", [], DoorState, () => [[\"TextureIndex\", int32_type], [\"DoorDirection\", DoorDirection$reflection()], [\"Status\", DoorStatus$reflection()], [\"Offset\", float64_type], [\"TimeRemainingInAnimationState\", float64_type], [\"MapPosition\", tuple_type(int32_type, int32_type)], [\"AreaOne\", int32_type], [\"AreaTwo\", int32_type]]);\n}\n\nexport class Cell extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Wall\", \"Door\", \"TurningPoint\", \"Empty\"];\n    }\n}\n\nexport function Cell$reflection() {\n    return union_type(\"App.Model.Cell\", [], Cell, () => [[[\"Item\", Wall$reflection()]], [[\"Item\", int32_type]], [[\"Item\", MapDirection$reflection()]], []]);\n}\n\nexport class EnemyType extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Guard\", \"Officer\", \"SS\", \"Dog\", \"Zombie\", \"FakeAdolf\", \"Adolf\", \"Fettgesicht\", \"Schabbs\", \"Gretel\", \"Hans\", \"Otto\", \"Ghost\"];\n    }\n}\n\nexport function EnemyType$reflection() {\n    return union_type(\"App.Model.EnemyType\", [], EnemyType, () => [[], [], [], [], [], [], [], [], [], [], [], [], []]);\n}\n\nexport class PathState extends Record {\n    constructor(TargetX, TargetY, ChaseOnTargetReached) {\n        super();\n        this.TargetX = (TargetX | 0);\n        this.TargetY = (TargetY | 0);\n        this.ChaseOnTargetReached = ChaseOnTargetReached;\n    }\n}\n\nexport function PathState$reflection() {\n    return record_type(\"App.Model.PathState\", [], PathState, () => [[\"TargetX\", int32_type], [\"TargetY\", int32_type], [\"ChaseOnTargetReached\", bool_type]]);\n}\n\nexport function PathState_get_Empty() {\n    return new PathState(-1, -1, false);\n}\n\nexport class EnemyStateType extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Standing\", \"Ambushing\", \"Attack\", \"Path\", \"Pain\", \"Shoot\", \"Chase\", \"Die\", \"Dead\"];\n    }\n}\n\nexport function EnemyStateType$reflection() {\n    return union_type(\"App.Model.EnemyStateType\", [], EnemyStateType, () => [[], [], [], [[\"Item\", PathState$reflection()]], [[\"Item\", EnemyStateType$reflection()]], [], [[\"Item1\", int32_type], [\"Item2\", int32_type]], [], []]);\n}\n\nexport class BasicGameObject extends Record {\n    constructor(Position, PlayerRelativePosition, UnsquaredDistanceFromPlayer, SpriteIndex, CollidesWithBullets, Pickupable, HitpointsRestored, AmmoRestored, LivesRestored, Score, Blocking) {\n        super();\n        this.Position = Position;\n        this.PlayerRelativePosition = PlayerRelativePosition;\n        this.UnsquaredDistanceFromPlayer = UnsquaredDistanceFromPlayer;\n        this.SpriteIndex = (SpriteIndex | 0);\n        this.CollidesWithBullets = CollidesWithBullets;\n        this.Pickupable = Pickupable;\n        this.HitpointsRestored = (HitpointsRestored | 0);\n        this.AmmoRestored = (AmmoRestored | 0);\n        this.LivesRestored = (LivesRestored | 0);\n        this.Score = (Score | 0);\n        this.Blocking = Blocking;\n    }\n}\n\nexport function BasicGameObject$reflection() {\n    return record_type(\"App.Model.BasicGameObject\", [], BasicGameObject, () => [[\"Position\", Vector2D$reflection()], [\"PlayerRelativePosition\", Vector2D$reflection()], [\"UnsquaredDistanceFromPlayer\", float64_type], [\"SpriteIndex\", int32_type], [\"CollidesWithBullets\", bool_type], [\"Pickupable\", bool_type], [\"HitpointsRestored\", int32_type], [\"AmmoRestored\", int32_type], [\"LivesRestored\", int32_type], [\"Score\", int32_type], [\"Blocking\", bool_type]]);\n}\n\nexport function BasicGameObject__get_MapPosition(this$) {\n    return [~(~this$.Position.vX), ~(~this$.Position.vY)];\n}\n\nexport class Enemy extends Record {\n    constructor(EnemyType, BasicGameObject, Direction, DeathSpriteIndexes, AttackSpriteIndexes, SpriteBlocks, FramesPerBlock, CurrentAnimationFrame, TimeUntilNextAnimationFrame, State, IsFirstAttack, FireAtPlayerRequired, MoveToChaseRequired, HitPoints, HurtSpriteIndex, PatrolSpeed, ChaseSpeed) {\n        super();\n        this.EnemyType = EnemyType;\n        this.BasicGameObject = BasicGameObject;\n        this.Direction = Direction;\n        this.DeathSpriteIndexes = DeathSpriteIndexes;\n        this.AttackSpriteIndexes = AttackSpriteIndexes;\n        this.SpriteBlocks = (SpriteBlocks | 0);\n        this.FramesPerBlock = (FramesPerBlock | 0);\n        this.CurrentAnimationFrame = (CurrentAnimationFrame | 0);\n        this.TimeUntilNextAnimationFrame = TimeUntilNextAnimationFrame;\n        this.State = State;\n        this.IsFirstAttack = IsFirstAttack;\n        this.FireAtPlayerRequired = FireAtPlayerRequired;\n        this.MoveToChaseRequired = MoveToChaseRequired;\n        this.HitPoints = (HitPoints | 0);\n        this.HurtSpriteIndex = (HurtSpriteIndex | 0);\n        this.PatrolSpeed = PatrolSpeed;\n        this.ChaseSpeed = ChaseSpeed;\n    }\n}\n\nexport function Enemy$reflection() {\n    return record_type(\"App.Model.Enemy\", [], Enemy, () => [[\"EnemyType\", EnemyType$reflection()], [\"BasicGameObject\", BasicGameObject$reflection()], [\"Direction\", MapDirection$reflection()], [\"DeathSpriteIndexes\", list_type(int32_type)], [\"AttackSpriteIndexes\", list_type(int32_type)], [\"SpriteBlocks\", int32_type], [\"FramesPerBlock\", int32_type], [\"CurrentAnimationFrame\", int32_type], [\"TimeUntilNextAnimationFrame\", float64_type], [\"State\", EnemyStateType$reflection()], [\"IsFirstAttack\", bool_type], [\"FireAtPlayerRequired\", bool_type], [\"MoveToChaseRequired\", bool_type], [\"HitPoints\", int32_type], [\"HurtSpriteIndex\", int32_type], [\"PatrolSpeed\", float64_type], [\"ChaseSpeed\", float64_type]]);\n}\n\nexport function Enemy__get_DirectionVector(this$) {\n    return MapDirection__ToVector(this$.Direction);\n}\n\nexport function Enemy__get_StationarySpriteBlockIndex(this$) {\n    return this$.BasicGameObject.SpriteIndex;\n}\n\nexport function Enemy__MovementSpriteBlockIndex_Z524259A4(this$, frame) {\n    return this$.BasicGameObject.SpriteIndex + (frame * this$.FramesPerBlock);\n}\n\nexport function Enemy__get_NumberOfMovementAnimationFrames(this$) {\n    return this$.SpriteBlocks - 1;\n}\n\nexport function Enemy__get_IsAlive(this$) {\n    const matchValue = this$.State;\n    switch (matchValue.tag) {\n        case 8:\n        case 7: {\n            return false;\n        }\n        default: {\n            return true;\n        }\n    }\n}\n\nexport function Enemy__get_BaseSpriteIndexForState(this$) {\n    const matchValue = this$.State;\n    switch (matchValue.tag) {\n        case 0: {\n            return Enemy__get_StationarySpriteBlockIndex(this$) | 0;\n        }\n        case 6:\n        case 3: {\n            return Enemy__MovementSpriteBlockIndex_Z524259A4(this$, this$.CurrentAnimationFrame) | 0;\n        }\n        case 2: {\n            return item(this$.CurrentAnimationFrame, this$.AttackSpriteIndexes) | 0;\n        }\n        case 4: {\n            return this$.HurtSpriteIndex | 0;\n        }\n        default: {\n            return this$.BasicGameObject.SpriteIndex | 0;\n        }\n    }\n}\n\nexport function Enemy_AnimationTimeForState_4C3F69DE(state) {\n    switch (state.tag) {\n        case 2: {\n            return 200;\n        }\n        case 6: {\n            return 100;\n        }\n        case 3: {\n            return 300;\n        }\n        case 4: {\n            return 100;\n        }\n        case 8:\n        case 7: {\n            return 100;\n        }\n        default: {\n            return 0;\n        }\n    }\n}\n\nexport function Enemy__get_SpriteIndexForAnimationFrame(this$) {\n    const matchValue = this$.State;\n    switch (matchValue.tag) {\n        case 2: {\n            return item(this$.CurrentAnimationFrame, this$.AttackSpriteIndexes) | 0;\n        }\n        case 8:\n        case 7: {\n            return item(this$.CurrentAnimationFrame, this$.DeathSpriteIndexes) | 0;\n        }\n        default: {\n            return Enemy__get_StationarySpriteBlockIndex(this$) | 0;\n        }\n    }\n}\n\nexport function Enemy__get_AnimationFrames(this$) {\n    const matchValue = this$.State;\n    switch (matchValue.tag) {\n        case 2: {\n            return length(this$.AttackSpriteIndexes) | 0;\n        }\n        case 8:\n        case 7: {\n            return length(this$.DeathSpriteIndexes) | 0;\n        }\n        default: {\n            return 1;\n        }\n    }\n}\n\nexport function Enemy__get_IsBoss(this$) {\n    const matchValue = this$.EnemyType;\n    switch (matchValue.tag) {\n        case 0:\n        case 1:\n        case 3:\n        case 2:\n        case 4: {\n            return false;\n        }\n        default: {\n            return true;\n        }\n    }\n}\n\nexport function Enemy__get_IsVisible(this$) {\n    return true;\n}\n\nexport class WeaponType extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Knife\", \"Pistol\", \"MachineGun\", \"ChainGun\"];\n    }\n}\n\nexport function WeaponType$reflection() {\n    return union_type(\"App.Model.WeaponType\", [], WeaponType, () => [[], [], [], []]);\n}\n\nexport class PlayerWeapon extends Record {\n    constructor(Sprites, CurrentFrame, Damage, AutoRepeat, RequiresAmmunition, StatusBarImageIndex, WeaponType) {\n        super();\n        this.Sprites = Sprites;\n        this.CurrentFrame = (CurrentFrame | 0);\n        this.Damage = (Damage | 0);\n        this.AutoRepeat = AutoRepeat;\n        this.RequiresAmmunition = RequiresAmmunition;\n        this.StatusBarImageIndex = (StatusBarImageIndex | 0);\n        this.WeaponType = WeaponType;\n    }\n}\n\nexport function PlayerWeapon$reflection() {\n    return record_type(\"App.Model.PlayerWeapon\", [], PlayerWeapon, () => [[\"Sprites\", list_type(Texture$reflection())], [\"CurrentFrame\", int32_type], [\"Damage\", int32_type], [\"AutoRepeat\", bool_type], [\"RequiresAmmunition\", bool_type], [\"StatusBarImageIndex\", int32_type], [\"WeaponType\", WeaponType$reflection()]]);\n}\n\nexport function PlayerWeapon__get_AnimationFrames(x) {\n    return length(x.Sprites);\n}\n\nexport function PlayerWeapon__get_CurrentSprite(x) {\n    return item(x.CurrentFrame, x.Sprites);\n}\n\nexport class GameObject extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Static\", \"Enemy\"];\n    }\n}\n\nexport function GameObject$reflection() {\n    return union_type(\"App.Model.GameObject\", [], GameObject, () => [[[\"Item\", BasicGameObject$reflection()]], [[\"Item\", Enemy$reflection()]]]);\n}\n\nexport function GameObject__get_BasicGameObject(x) {\n    if (x.tag === 1) {\n        return x.fields[0].BasicGameObject;\n    }\n    else {\n        return x.fields[0];\n    }\n}\n\nexport function GameObject__UpdateBasicGameObject_6358EEEA(x, go) {\n    if (x.tag === 1) {\n        const e = x.fields[0];\n        return new GameObject(1, new Enemy(e.EnemyType, go, e.Direction, e.DeathSpriteIndexes, e.AttackSpriteIndexes, e.SpriteBlocks, e.FramesPerBlock, e.CurrentAnimationFrame, e.TimeUntilNextAnimationFrame, e.State, e.IsFirstAttack, e.FireAtPlayerRequired, e.MoveToChaseRequired, e.HitPoints, e.HurtSpriteIndex, e.PatrolSpeed, e.ChaseSpeed));\n    }\n    else {\n        return new GameObject(0, go);\n    }\n}\n\nexport class Player extends Record {\n    constructor(Score, Lives, Health, Radius, CurrentWeaponIndex, Ammunition, Weapons, CurrentFaceIndex, TimeToFaceChangeMs) {\n        super();\n        this.Score = (Score | 0);\n        this.Lives = (Lives | 0);\n        this.Health = (Health | 0);\n        this.Radius = Radius;\n        this.CurrentWeaponIndex = (CurrentWeaponIndex | 0);\n        this.Ammunition = (Ammunition | 0);\n        this.Weapons = Weapons;\n        this.CurrentFaceIndex = (CurrentFaceIndex | 0);\n        this.TimeToFaceChangeMs = TimeToFaceChangeMs;\n    }\n}\n\nexport function Player$reflection() {\n    return record_type(\"App.Model.Player\", [], Player, () => [[\"Score\", int32_type], [\"Lives\", int32_type], [\"Health\", int32_type], [\"Radius\", float64_type], [\"CurrentWeaponIndex\", int32_type], [\"Ammunition\", int32_type], [\"Weapons\", list_type(PlayerWeapon$reflection())], [\"CurrentFaceIndex\", int32_type], [\"TimeToFaceChangeMs\", float64_type]]);\n}\n\nexport function Player__get_CurrentWeapon(this$) {\n    return item(this$.CurrentWeaponIndex, this$.Weapons);\n}\n\nexport class Camera extends Record {\n    constructor(Position, Direction, Plane, FieldOfView) {\n        super();\n        this.Position = Position;\n        this.Direction = Direction;\n        this.Plane = Plane;\n        this.FieldOfView = FieldOfView;\n    }\n}\n\nexport function Camera$reflection() {\n    return record_type(\"App.Model.Camera\", [], Camera, () => [[\"Position\", Vector2D$reflection()], [\"Direction\", Vector2D$reflection()], [\"Plane\", Vector2D$reflection()], [\"FieldOfView\", float64_type]]);\n}\n\nexport class SpriteLayout extends Record {\n    constructor(Offset, FirstColumn, LastColumn, PixelPoolOffset) {\n        super();\n        this.Offset = Offset;\n        this.FirstColumn = FirstColumn;\n        this.LastColumn = LastColumn;\n        this.PixelPoolOffset = PixelPoolOffset;\n    }\n}\n\nexport function SpriteLayout$reflection() {\n    return record_type(\"App.Model.SpriteLayout\", [], SpriteLayout, () => [[\"Offset\", uint32_type], [\"FirstColumn\", uint32_type], [\"LastColumn\", uint32_type], [\"PixelPoolOffset\", uint32_type]]);\n}\n\nexport class RawMap extends Record {\n    constructor(MapSize, Plane0, Plane1, Plane2) {\n        super();\n        this.MapSize = (MapSize | 0);\n        this.Plane0 = Plane0;\n        this.Plane1 = Plane1;\n        this.Plane2 = Plane2;\n    }\n}\n\nexport function RawMap$reflection() {\n    return record_type(\"App.Model.RawMap\", [], RawMap, () => [[\"MapSize\", int32_type], [\"Plane0\", class_type(\"Fable.Core.JS.DataView\")], [\"Plane1\", class_type(\"Fable.Core.JS.DataView\")], [\"Plane2\", class_type(\"Fable.Core.JS.DataView\")]]);\n}\n\nexport class WolfensteinMap extends Record {\n    constructor(Width, Height, Map$, Areas, NumberOfAreas, GameObjects, PlayerStartingPosition, Doors) {\n        super();\n        this.Width = (Width | 0);\n        this.Height = (Height | 0);\n        this.Map = Map$;\n        this.Areas = Areas;\n        this.NumberOfAreas = (NumberOfAreas | 0);\n        this.GameObjects = GameObjects;\n        this.PlayerStartingPosition = PlayerStartingPosition;\n        this.Doors = Doors;\n    }\n}\n\nexport function WolfensteinMap$reflection() {\n    return record_type(\"App.Model.WolfensteinMap\", [], WolfensteinMap, () => [[\"Width\", int32_type], [\"Height\", int32_type], [\"Map\", list_type(list_type(Cell$reflection()))], [\"Areas\", list_type(list_type(int32_type))], [\"NumberOfAreas\", int32_type], [\"GameObjects\", list_type(GameObject$reflection())], [\"PlayerStartingPosition\", Camera$reflection()], [\"Doors\", list_type(DoorState$reflection())]]);\n}\n\nexport class OverlayAnimation extends Record {\n    constructor(Red, Green, Blue, Opacity, MaxOpacity, OpacityDelta, FrameLength, TimeRemainingUntilNextFrame) {\n        super();\n        this.Red = Red;\n        this.Green = Green;\n        this.Blue = Blue;\n        this.Opacity = Opacity;\n        this.MaxOpacity = MaxOpacity;\n        this.OpacityDelta = OpacityDelta;\n        this.FrameLength = FrameLength;\n        this.TimeRemainingUntilNextFrame = TimeRemainingUntilNextFrame;\n    }\n}\n\nexport function OverlayAnimation$reflection() {\n    return record_type(\"App.Model.OverlayAnimation\", [], OverlayAnimation, () => [[\"Red\", uint8_type], [\"Green\", uint8_type], [\"Blue\", uint8_type], [\"Opacity\", float64_type], [\"MaxOpacity\", float64_type], [\"OpacityDelta\", float64_type], [\"FrameLength\", float64_type], [\"TimeRemainingUntilNextFrame\", float64_type]]);\n}\n\nexport function OverlayAnimation_WithColor(red, green, blue, maxOpacity) {\n    const maxOpacity_1 = max(comparePrimitives, maxOpacity, 0.2);\n    const totalFrames = 10;\n    const opacityDelta = maxOpacity_1 / (totalFrames / 2);\n    const frameLength = 75 / totalFrames;\n    return new OverlayAnimation(red, green, blue, opacityDelta, maxOpacity_1, opacityDelta, frameLength, frameLength);\n}\n\nexport function OverlayAnimation_Blood_5E38073B(maxOpacity) {\n    return OverlayAnimation_WithColor(255, 0, 0, maxOpacity);\n}\n\nexport function OverlayAnimation_get_Pickup() {\n    return OverlayAnimation_WithColor(255, 215, 0, 0.4);\n}\n\nexport class ViewportFilter extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"None\", \"Overlay\"];\n    }\n}\n\nexport function ViewportFilter$reflection() {\n    return union_type(\"App.Model.ViewportFilter\", [], ViewportFilter, () => [[], [[\"Item\", OverlayAnimation$reflection()]]]);\n}\n\nexport class CompositeArea extends Record {\n    constructor(Area, ConnectedTo) {\n        super();\n        this.Area = (Area | 0);\n        this.ConnectedTo = ConnectedTo;\n    }\n}\n\nexport function CompositeArea$reflection() {\n    return record_type(\"App.Model.CompositeArea\", [], CompositeArea, () => [[\"Area\", int32_type], [\"ConnectedTo\", class_type(\"Microsoft.FSharp.Collections.FSharpSet`1\", [int32_type])]]);\n}\n\nexport class PixelDissolverState extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Forwards\", \"Backwards\", \"Transitioning\", \"Stopped\"];\n    }\n}\n\nexport function PixelDissolverState$reflection() {\n    return union_type(\"App.Model.PixelDissolverState\", [], PixelDissolverState, () => [[], [], [], []]);\n}\n\nexport class PixelDissolver extends Record {\n    constructor(RemainingPixels, DrawnPixels, PixelSize, PauseTimeRemaining, DissolverState) {\n        super();\n        this.RemainingPixels = RemainingPixels;\n        this.DrawnPixels = DrawnPixels;\n        this.PixelSize = PixelSize;\n        this.PauseTimeRemaining = PauseTimeRemaining;\n        this.DissolverState = DissolverState;\n    }\n}\n\nexport function PixelDissolver$reflection() {\n    return record_type(\"App.Model.PixelDissolver\", [], PixelDissolver, () => [[\"RemainingPixels\", list_type(tuple_type(int32_type, int32_type))], [\"DrawnPixels\", list_type(tuple_type(int32_type, int32_type))], [\"PixelSize\", float64_type], [\"PauseTimeRemaining\", float64_type], [\"DissolverState\", PixelDissolverState$reflection()]]);\n}\n\nexport function PixelDissolver__get_TotalPixels(this$) {\n    return length(this$.RemainingPixels) + length(this$.DrawnPixels);\n}\n\nexport function PixelDissolver__get_IsComplete(this$) {\n    if (equals(this$.DissolverState, new PixelDissolverState(1))) {\n        return length(this$.DrawnPixels) === 0;\n    }\n    else {\n        return false;\n    }\n}\n\nexport class Game extends Record {\n    constructor(Level, Map$, Areas, CompositeAreas, GameObjects, Player, Camera, ControlState, IsFiring, TimeToNextWeaponFrame, Doors, ViewportFilter, PixelDissolver, ResetLevel) {\n        super();\n        this.Level = (Level | 0);\n        this.Map = Map$;\n        this.Areas = Areas;\n        this.CompositeAreas = CompositeAreas;\n        this.GameObjects = GameObjects;\n        this.Player = Player;\n        this.Camera = Camera;\n        this.ControlState = (ControlState | 0);\n        this.IsFiring = IsFiring;\n        this.TimeToNextWeaponFrame = TimeToNextWeaponFrame;\n        this.Doors = Doors;\n        this.ViewportFilter = ViewportFilter;\n        this.PixelDissolver = PixelDissolver;\n        this.ResetLevel = ResetLevel;\n    }\n}\n\nexport function Game$reflection() {\n    return record_type(\"App.Model.Game\", [], Game, () => [[\"Level\", int32_type], [\"Map\", list_type(list_type(Cell$reflection()))], [\"Areas\", list_type(list_type(int32_type))], [\"CompositeAreas\", list_type(CompositeArea$reflection())], [\"GameObjects\", list_type(GameObject$reflection())], [\"Player\", Player$reflection()], [\"Camera\", Camera$reflection()], [\"ControlState\", enum_type(\"App.Model.ControlState\", int32_type, [[\"None\", 0], [\"Forward\", 1], [\"TurningLeft\", 2], [\"TurningRight\", 4], [\"StrafingLeft\", 8], [\"StrafingRight\", 16], [\"Backward\", 32], [\"Fire\", 64], [\"Action\", 128], [\"Weapon0\", 256], [\"Weapon1\", 512], [\"Weapon2\", 1024], [\"Weapon3\", 2048]])], [\"IsFiring\", bool_type], [\"TimeToNextWeaponFrame\", option_type(float64_type)], [\"Doors\", list_type(DoorState$reflection())], [\"ViewportFilter\", ViewportFilter$reflection()], [\"PixelDissolver\", option_type(PixelDissolver$reflection())], [\"ResetLevel\", lambda_type(Game$reflection(), lambda_type(Player$reflection(), Game$reflection()))]]);\n}\n\nexport function Game__get_PlayerMapPosition(this$) {\n    return [~(~this$.Camera.Position.vX), ~(~this$.Camera.Position.vY)];\n}\n\nexport function Game__get_IsPlayerRunning(this$) {\n    return (this$.ControlState & 1) === 1;\n}\n\nexport class StatusBarGraphics extends Record {\n    constructor(Background, HealthFaces, Dead, GrinFace, GreyFace, Font, Weapons) {\n        super();\n        this.Background = Background;\n        this.HealthFaces = HealthFaces;\n        this.Dead = Dead;\n        this.GrinFace = GrinFace;\n        this.GreyFace = GreyFace;\n        this.Font = Font;\n        this.Weapons = Weapons;\n    }\n}\n\nexport function StatusBarGraphics$reflection() {\n    return record_type(\"App.Model.StatusBarGraphics\", [], StatusBarGraphics, () => [[\"Background\", Texture$reflection()], [\"HealthFaces\", array_type(array_type(Texture$reflection()))], [\"Dead\", Texture$reflection()], [\"GrinFace\", Texture$reflection()], [\"GreyFace\", Texture$reflection()], [\"Font\", array_type(Texture$reflection())], [\"Weapons\", array_type(Texture$reflection())]]);\n}\n\nexport const textureWidth = 64;\n\nexport const textureHeight = 64;\n\nexport const firingTolerance = 40;\n\nexport const attackAnimationFrameTime = 200;\n\n","\nexport function toColorString(color) {\n    const r = (color >> 16) | 0;\n    const g = ((color >> 8) & 255) | 0;\n    const b = (color & 255) | 0;\n    return `rgb(${r},${g},${b})`;\n}\n\nexport function adjustColor(color, value) {\n    return (((color & 255) + value) | ((((color >> 8) & 255) + value) << 8)) | (((color >> 16) + value) << 16);\n}\n\nexport function fill(context, color, left, top, width, height) {\n    context.fillStyle = toColorString(color);\n    context.fillRect(left, top, width, height);\n}\n\nexport function clearCanvas(context) {\n    fill(context, 0, -1, -1, context.canvas.width + 2, context.canvas.height + 2);\n}\n\nexport function fillText(context, text, x, y) {\n    context.textAlign = \"start\";\n    context.fillStyle = \"#e0e0e0\";\n    context.fillText(text, x, y);\n}\n\n","import { round } from \"./fable_modules/fable-library.3.7.14/Util.js\";\nimport { fill } from \"./Render.Primitives.fs.js\";\nimport { Texture } from \"./Model.Platform.fs.js\";\nimport { textureColor, textureStripOffset, spriteOffsets, setPixel as setPixel_1, getPixel as getPixel_1 } from \"./Graphics.Common.fs.js\";\nimport { canvasFromTexture, spriteColorIsTransparent } from \"./Graphics.fs.js\";\nimport { StatusBar_drawStatusBar, Dissolve_render, Weapons_drawPlayerWeapon, Walls_draw, Objects_draw } from \"./CrossPlatform/Render.fs.js\";\n\nconst viewportZoom = 2;\n\nconst zoom = 2;\n\nconst wolfViewportWidth = 304;\n\nconst wolfViewportHeight = 152;\n\nfunction getViewportPosition(context) {\n    const totalZoomedWidth = (wolfViewportWidth * zoom) * viewportZoom;\n    const left = (context.canvas.width / 2) - (totalZoomedWidth / 2);\n    const totalZoomedHeight = (wolfViewportHeight * zoom) * viewportZoom;\n    const statusBarHeight = (35 * zoom) * viewportZoom;\n    const statusBarViewportSpace = round(statusBarHeight / 5);\n    const totalHeight = (totalZoomedHeight + statusBarHeight) + statusBarViewportSpace;\n    const top = (context.canvas.height / 2) - (totalHeight / 2);\n    return [left, top, (top + totalZoomedHeight) + statusBarViewportSpace, totalZoomedWidth, totalZoomedHeight];\n}\n\nfunction drawFrame(context) {\n    context.fillStyle = \"#004040\";\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n    const patternInput = getViewportPosition(context);\n    const totalZoomedWidth = patternInput[3];\n    const totalZoomedHeight = patternInput[4];\n    const left_1 = patternInput[0] - 1;\n    const top_1 = patternInput[1] - 1;\n    context.strokeStyle = \"#007070\";\n    context.beginPath();\n    context.moveTo(left_1, (top_1 + totalZoomedHeight) + 1);\n    context.lineTo((left_1 + totalZoomedWidth) + 1, (top_1 + totalZoomedHeight) + 1);\n    context.lineTo((left_1 + totalZoomedWidth) + 1, top_1);\n    context.stroke();\n    context.lineCap = \"square\";\n    context.strokeStyle = \"#000000\";\n    context.beginPath();\n    context.moveTo(left_1, (top_1 + totalZoomedHeight) + 1);\n    context.lineTo(left_1, top_1);\n    context.lineTo((left_1 + totalZoomedWidth) + 1.5, top_1);\n    context.stroke();\n}\n\nexport function draw(context, bufferContext, statusBarGraphics, graphics_0, graphics_1, sprites, game) {\n    const graphics = [graphics_0, graphics_1];\n    const startTime = performance.now();\n    context.save();\n    context.imageSmoothingEnabled = false;\n    context.lineCap = \"square\";\n    context.translate(0.5, 0.5);\n    context.font = \"30px Consolas, Menlo, monospace\";\n    bufferContext.imageSmoothingEnabled = false;\n    const viewportWidth = bufferContext.canvas.width;\n    const viewportHeight = bufferContext.canvas.height;\n    fill(bufferContext, 3750201, -1, -1, viewportWidth + 1, viewportHeight / 2);\n    fill(bufferContext, 7566195, -1, viewportHeight / 2, viewportWidth + 1, (viewportHeight / 2) + 1);\n    const outputImageData = bufferContext.getImageData(0, 0, viewportWidth, viewportHeight);\n    const outputTexture = new Texture(new Uint32Array(outputImageData.data.buffer), new Uint8ClampedArray(outputImageData.data.buffer), bufferContext.canvas, ~(~viewportWidth), ~(~viewportHeight));\n    const getPixel = getPixel_1;\n    const setPixel = (color, x_1, y_1) => {\n        setPixel_1(outputTexture, color, x_1, y_1);\n    };\n    const isTransparent = spriteColorIsTransparent;\n    const firingHitGameObjectIndexOption = Objects_draw(viewportWidth, viewportHeight, getPixel, setPixel, isTransparent, (spriteIndex) => spriteOffsets(graphics[0], graphics[1], spriteIndex), game, sprites, Walls_draw(viewportWidth, viewportHeight, setPixel, (textureIndex, textureX) => textureStripOffset(graphics[0], graphics[1], textureIndex, textureX), (textureOffset, textureY) => textureColor(graphics[0], graphics[1], textureOffset, textureY), game));\n    Weapons_drawPlayerWeapon(bufferContext.canvas.width, bufferContext.canvas.height, getPixel, setPixel, isTransparent, game);\n    Dissolve_render(setPixel, game);\n    drawFrame(context);\n    const patternInput = getViewportPosition(context);\n    const left = patternInput[0];\n    const imageData_1 = new ImageData(outputTexture.ClampedData,outputTexture.Width,outputTexture.Height);\n    bufferContext.putImageData(imageData_1, 0, 0);\n    context.drawImage(bufferContext.canvas, left, patternInput[1], viewportWidth * zoom, viewportHeight * zoom);\n    context.save();\n    context.translate(left, patternInput[2]);\n    StatusBar_drawStatusBar(statusBarGraphics, (texture, x_2, y_2) => {\n        const totalZoom = zoom * viewportZoom;\n        const height = texture.Height * totalZoom;\n        const width = texture.Width * totalZoom;\n        const y_3 = y_2 * totalZoom;\n        const x_3 = x_2 * totalZoom;\n        context.drawImage(canvasFromTexture(texture), x_3, y_3, width, height);\n    }, game);\n    context.restore();\n    const matchValue = game.ViewportFilter;\n    if (matchValue.tag === 1) {\n        const overlay = matchValue.fields[0];\n        context.fillStyle = (`rgba(${overlay.Red},${overlay.Green},${overlay.Blue},${overlay.Opacity})`);\n        context.fillRect(-1, -1, context.canvas.width + 2, context.canvas.height + 2);\n    }\n    const endTime = performance.now();\n    context.restore();\n    return firingHitGameObjectIndexOption;\n}\n\nexport function initScene(canvas, _arg1) {\n    const context = canvas.getContext('2d');\n    let patternInput;\n    const bufferCanvas = document.createElement(\"canvas\");\n    bufferCanvas.width = (wolfViewportWidth * viewportZoom);\n    bufferCanvas.height = (wolfViewportHeight * viewportZoom);\n    patternInput = [bufferCanvas.getContext('2d'), ~(~bufferCanvas.width), ~(~bufferCanvas.height)];\n    return [(statusBarGraphics) => ((tupledArg) => ((sprites) => ((game) => draw(context, patternInput[0], statusBarGraphics, tupledArg[0], tupledArg[1], sprites, game)))), patternInput[1], patternInput[2]];\n}\n\n","import { singleton } from \"./fable_modules/fable-library.3.7.14/AsyncBuilder.js\";\nimport { Http_request, Http_method, Http_overrideResponseType, Http_send } from \"./fable_modules/Fable.SimpleHttp.3.1.0/Http.fs.js\";\nimport { HttpMethod, ResponseTypes } from \"./fable_modules/Fable.SimpleHttp.3.1.0/Types.fs.js\";\nimport { FSharpResult$2 } from \"./fable_modules/fable-library.3.7.14/Choice.js\";\nimport { some } from \"./fable_modules/fable-library.3.7.14/Option.js\";\nimport { iterate } from \"./fable_modules/fable-library.3.7.14/List.js\";\nimport { map, count } from \"./fable_modules/fable-library.3.7.14/Set.js\";\nimport { join } from \"./fable_modules/fable-library.3.7.14/String.js\";\nimport { comparePrimitives } from \"./fable_modules/fable-library.3.7.14/Util.js\";\n\nexport function loadAsset(assetName) {\n    return singleton.Delay(() => singleton.Bind(Http_send(Http_overrideResponseType(new ResponseTypes(2), Http_method(new HttpMethod(0), Http_request(`assets/${assetName}`)))), (_arg1) => {\n        let matchValue;\n        return singleton.Return((matchValue = _arg1.content, (matchValue.tag === 2) ? (new FSharpResult$2(0, matchValue.fields[0])) : ((console.error(some(\"Unable to load asset\")), new FSharpResult$2(1, \"\")))));\n    }));\n}\n\nexport function log(message) {\n    console.log(some(message));\n}\n\nexport function diagnoseCompositeAreas(compositeAreas) {\n    iterate((ca) => {\n        if (count(ca.ConnectedTo) > 1) {\n            const diag = join(\",\", map((i) => (`${i}`), ca.ConnectedTo, {\n                Compare: comparePrimitives,\n            }));\n            log(`Area: ${ca.Area}, Composite: [${diag}]`);\n        }\n    }, compositeAreas);\n}\n\n","import { fromContinuations } from \"../fable-library.3.7.14/Async.js\";\nimport { HttpResponse, ResponseContent, HttpRequest, BodyContent, HttpMethod, Header } from \"./Types.fs.js\";\nimport { tail, head, isEmpty, ofArray as ofArray_1, singleton, append, empty } from \"../fable-library.3.7.14/List.js\";\nimport { ofArray, empty as empty_1 } from \"../fable-library.3.7.14/Map.js\";\nimport { join, split, isNullOrEmpty } from \"../fable-library.3.7.14/String.js\";\nimport { choose } from \"../fable-library.3.7.14/Array.js\";\nimport { disposeSafe, getEnumerator } from \"../fable-library.3.7.14/Util.js\";\nimport { some } from \"../fable-library.3.7.14/Option.js\";\nimport { singleton as singleton_1 } from \"../fable-library.3.7.14/AsyncBuilder.js\";\n\nexport function FileReader_readBlobAsText(blob) {\n    return fromContinuations((tupledArg) => {\n        const reader = new FileReader();\n        reader.onload = ((_arg1) => {\n            if (reader.readyState === 2) {\n                tupledArg[0](reader.result);\n            }\n        });\n        reader.readAsText(blob);\n    });\n}\n\nexport function FileReader_readFileAsText(file) {\n    return fromContinuations((tupledArg) => {\n        const reader = new FileReader();\n        reader.onload = ((_arg1) => {\n            if (reader.readyState === 2) {\n                tupledArg[0](reader.result);\n            }\n        });\n        reader.readAsText(file);\n    });\n}\n\nexport function FormData_append(key, value, form) {\n    form.append(key, value);\n    return form;\n}\n\nexport function FormData_appendFile(key, file, form) {\n    form.append(key, file);\n    return form;\n}\n\nexport function FormData_appendNamedFile(key, fileName, file, form) {\n    form.append(key, file, fileName);\n    return form;\n}\n\nexport function FormData_appendBlob(key, blob, form) {\n    form.append(key, blob);\n    return form;\n}\n\nexport function FormData_appendNamedBlob(key, fileName, blob, form) {\n    form.append(key, blob, fileName);\n    return form;\n}\n\nexport function Headers_contentType(value) {\n    return new Header(0, \"Content-Type\", value);\n}\n\nexport function Headers_accept(value) {\n    return new Header(0, \"Accept\", value);\n}\n\nexport function Headers_acceptCharset(value) {\n    return new Header(0, \"Accept-Charset\", value);\n}\n\nexport function Headers_acceptEncoding(value) {\n    return new Header(0, \"Accept-Encoding\", value);\n}\n\nexport function Headers_acceptLanguage(value) {\n    return new Header(0, \"Accept-Language\", value);\n}\n\nexport function Headers_acceptDateTime(value) {\n    return new Header(0, \"Accept-Datetime\", value);\n}\n\nexport function Headers_authorization(value) {\n    return new Header(0, \"Authorization\", value);\n}\n\nexport function Headers_cacheControl(value) {\n    return new Header(0, \"Cache-Control\", value);\n}\n\nexport function Headers_connection(value) {\n    return new Header(0, \"Connection\", value);\n}\n\nexport function Headers_cookie(value) {\n    return new Header(0, \"Cookie\", value);\n}\n\nexport function Headers_contentMD5(value) {\n    return new Header(0, \"Content-MD5\", value);\n}\n\nexport function Headers_date(value) {\n    return new Header(0, \"Date\", value);\n}\n\nexport function Headers_expect(value) {\n    return new Header(0, \"Expect\", value);\n}\n\nexport function Headers_ifMatch(value) {\n    return new Header(0, \"If-Match\", value);\n}\n\nexport function Headers_ifModifiedSince(value) {\n    return new Header(0, \"If-Modified-Since\", value);\n}\n\nexport function Headers_ifNoneMatch(value) {\n    return new Header(0, \"If-None-Match\", value);\n}\n\nexport function Headers_ifRange(value) {\n    return new Header(0, \"If-Range\", value);\n}\n\nexport function Headers_IfUnmodifiedSince(value) {\n    return new Header(0, \"If-Unmodified-Since\", value);\n}\n\nexport function Headers_maxForwards(value) {\n    return new Header(0, \"Max-Forwards\", value);\n}\n\nexport function Headers_origin(value) {\n    return new Header(0, \"Origin\", value);\n}\n\nexport function Headers_pragma(value) {\n    return new Header(0, \"Pragma\", value);\n}\n\nexport function Headers_proxyAuthorization(value) {\n    return new Header(0, \"Proxy-Authorization\", value);\n}\n\nexport function Headers_range(value) {\n    return new Header(0, \"Range\", value);\n}\n\nexport function Headers_referer(value) {\n    return new Header(0, \"Referer\", value);\n}\n\nexport function Headers_userAgent(value) {\n    return new Header(0, \"User-Agent\", value);\n}\n\nexport function Headers_create(key, value) {\n    return new Header(0, key, value);\n}\n\nconst Http_defaultRequest = new HttpRequest(\"\", new HttpMethod(0), empty(), false, void 0, void 0, void 0, new BodyContent(0));\n\nconst Http_emptyResponse = new HttpResponse(0, \"\", \"\", empty_1(), new ResponseContent(0, \"\"));\n\nfunction Http_splitAt(delimiter, input) {\n    if (isNullOrEmpty(input)) {\n        return [input];\n    }\n    else {\n        return split(input, [delimiter], null, 0);\n    }\n}\n\nfunction Http_serializeMethod(_arg1) {\n    switch (_arg1.tag) {\n        case 1: {\n            return \"POST\";\n        }\n        case 3: {\n            return \"PATCH\";\n        }\n        case 2: {\n            return \"PUT\";\n        }\n        case 4: {\n            return \"DELETE\";\n        }\n        case 6: {\n            return \"OPTIONS\";\n        }\n        case 5: {\n            return \"HEAD\";\n        }\n        default: {\n            return \"GET\";\n        }\n    }\n}\n\nexport function Http_request(url) {\n    return new HttpRequest(url, Http_defaultRequest.method, Http_defaultRequest.headers, Http_defaultRequest.withCredentials, Http_defaultRequest.overridenMimeType, Http_defaultRequest.overridenResponseType, Http_defaultRequest.timeout, Http_defaultRequest.content);\n}\n\nexport function Http_method(httpVerb, req) {\n    return new HttpRequest(req.url, httpVerb, req.headers, req.withCredentials, req.overridenMimeType, req.overridenResponseType, req.timeout, req.content);\n}\n\nexport function Http_header(singleHeader, req) {\n    return new HttpRequest(req.url, req.method, append(req.headers, singleton(singleHeader)), req.withCredentials, req.overridenMimeType, req.overridenResponseType, req.timeout, req.content);\n}\n\nexport function Http_headers(values, req) {\n    return new HttpRequest(req.url, req.method, append(req.headers, values), req.withCredentials, req.overridenMimeType, req.overridenResponseType, req.timeout, req.content);\n}\n\nexport function Http_withCredentials(enabled, req) {\n    return new HttpRequest(req.url, req.method, req.headers, enabled, req.overridenMimeType, req.overridenResponseType, req.timeout, req.content);\n}\n\nexport function Http_withTimeout(timeoutInMilliseconds, req) {\n    return new HttpRequest(req.url, req.method, req.headers, req.withCredentials, req.overridenMimeType, req.overridenResponseType, timeoutInMilliseconds, req.content);\n}\n\nexport function Http_overrideMimeType(value, req) {\n    return new HttpRequest(req.url, req.method, req.headers, req.withCredentials, value, req.overridenResponseType, req.timeout, req.content);\n}\n\nexport function Http_overrideResponseType(value, req) {\n    return new HttpRequest(req.url, req.method, req.headers, req.withCredentials, req.overridenMimeType, value, req.timeout, req.content);\n}\n\nexport function Http_content(bodyContent, req) {\n    return new HttpRequest(req.url, req.method, req.headers, req.withCredentials, req.overridenMimeType, req.overridenResponseType, req.timeout, bodyContent);\n}\n\nexport function Http_send(req) {\n    return fromContinuations((tupledArg) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(Http_serializeMethod(req.method), req.url);\n        xhr.onreadystatechange = (() => {\n            let responseText, matchValue, statusCode, responseType, content, matchValue_1;\n            if (xhr.readyState === 4) {\n                tupledArg[0]((responseText = ((matchValue = xhr.responseType, (matchValue === \"\") ? xhr.responseText : ((matchValue === \"text\") ? xhr.responseText : \"\"))), (statusCode = (xhr.status | 0), (responseType = xhr.responseType, (content = ((matchValue_1 = xhr.responseType, (matchValue_1 === \"\") ? (new ResponseContent(0, xhr.responseText)) : ((matchValue_1 === \"text\") ? (new ResponseContent(0, xhr.responseText)) : ((matchValue_1 === \"arraybuffer\") ? (new ResponseContent(2, xhr.response)) : ((matchValue_1 === \"blob\") ? (new ResponseContent(1, xhr.response)) : (new ResponseContent(3, xhr.response))))))), new HttpResponse(statusCode, responseText, responseType, ofArray(choose((headerLine) => {\n                    const matchValue_2 = ofArray_1(Http_splitAt(\":\", headerLine));\n                    if (!isEmpty(matchValue_2)) {\n                        return [head(matchValue_2).toLocaleLowerCase(), join(\":\", tail(matchValue_2)).trim()];\n                    }\n                    else {\n                        return void 0;\n                    }\n                }, Http_splitAt(\"\\r\\n\", xhr.getAllResponseHeaders()))), content))))));\n            }\n        });\n        const enumerator = getEnumerator(req.headers);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                xhr.setRequestHeader(forLoopVar.fields[0], forLoopVar.fields[1]);\n            }\n        }\n        finally {\n            disposeSafe(enumerator);\n        }\n        xhr.withCredentials = req.withCredentials;\n        const matchValue_3 = req.overridenMimeType;\n        if (matchValue_3 == null) {\n        }\n        else {\n            const mimeType = matchValue_3;\n            xhr.overrideMimeType(mimeType);\n        }\n        const matchValue_4 = req.overridenResponseType;\n        if (matchValue_4 == null) {\n        }\n        else if (matchValue_4.tag === 1) {\n            xhr.responseType = \"blob\";\n        }\n        else if (matchValue_4.tag === 2) {\n            xhr.responseType = \"arraybuffer\";\n        }\n        else {\n            xhr.responseType = \"text\";\n        }\n        const matchValue_5 = req.timeout;\n        if (matchValue_5 == null) {\n        }\n        else {\n            const timeout = matchValue_5 | 0;\n            xhr.timeout = (timeout | 0);\n        }\n        const matchValue_6 = [req.method, req.content];\n        if (matchValue_6[0].tag === 0) {\n            xhr.send(some(void 0));\n        }\n        else if (matchValue_6[1].tag === 1) {\n            xhr.send(some(matchValue_6[1].fields[0]));\n        }\n        else if (matchValue_6[1].tag === 3) {\n            xhr.send(some(matchValue_6[1].fields[0]));\n        }\n        else if (matchValue_6[1].tag === 2) {\n            xhr.send(some(matchValue_6[1].fields[0]));\n        }\n        else {\n            xhr.send(some(void 0));\n        }\n    });\n}\n\nexport function Http_get(url) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_method(new HttpMethod(0), Http_request(url))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_put(url, data) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_content(new BodyContent(1, data), Http_method(new HttpMethod(2), Http_request(url)))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_delete(url) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_method(new HttpMethod(4), Http_request(url))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_patch(url, data) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_content(new BodyContent(1, data), Http_method(new HttpMethod(3), Http_request(url)))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\nexport function Http_post(url, data) {\n    return singleton_1.Delay(() => singleton_1.Bind(Http_send(Http_content(new BodyContent(1, data), Http_method(new HttpMethod(1), Http_request(url)))), (_arg1) => {\n        const response = _arg1;\n        return singleton_1.Return([response.statusCode, response.responseText]);\n    }));\n}\n\n","import { Record, Union } from \"../fable-library.3.7.14/Types.js\";\nimport { obj_type, record_type, int32_type, option_type, bool_type, list_type, class_type, string_type, union_type } from \"../fable-library.3.7.14/Reflection.js\";\n\nexport class HttpMethod extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\"];\n    }\n}\n\nexport function HttpMethod$reflection() {\n    return union_type(\"Fable.SimpleHttp.HttpMethod\", [], HttpMethod, () => [[], [], [], [], [], [], []]);\n}\n\nexport class Header extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Header\"];\n    }\n}\n\nexport function Header$reflection() {\n    return union_type(\"Fable.SimpleHttp.Header\", [], Header, () => [[[\"Item1\", string_type], [\"Item2\", string_type]]]);\n}\n\nexport class BodyContent extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Empty\", \"Text\", \"Binary\", \"Form\"];\n    }\n}\n\nexport function BodyContent$reflection() {\n    return union_type(\"Fable.SimpleHttp.BodyContent\", [], BodyContent, () => [[], [[\"Item\", string_type]], [[\"Item\", class_type(\"Browser.Types.Blob\", void 0, Blob)]], [[\"Item\", class_type(\"Browser.Types.FormData\", void 0, FormData)]]]);\n}\n\nexport class ResponseTypes extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Text\", \"Blob\", \"ArrayBuffer\"];\n    }\n}\n\nexport function ResponseTypes$reflection() {\n    return union_type(\"Fable.SimpleHttp.ResponseTypes\", [], ResponseTypes, () => [[], [], []]);\n}\n\nexport class HttpRequest extends Record {\n    constructor(url, method, headers, withCredentials, overridenMimeType, overridenResponseType, timeout, content) {\n        super();\n        this.url = url;\n        this.method = method;\n        this.headers = headers;\n        this.withCredentials = withCredentials;\n        this.overridenMimeType = overridenMimeType;\n        this.overridenResponseType = overridenResponseType;\n        this.timeout = timeout;\n        this.content = content;\n    }\n}\n\nexport function HttpRequest$reflection() {\n    return record_type(\"Fable.SimpleHttp.HttpRequest\", [], HttpRequest, () => [[\"url\", string_type], [\"method\", HttpMethod$reflection()], [\"headers\", list_type(Header$reflection())], [\"withCredentials\", bool_type], [\"overridenMimeType\", option_type(string_type)], [\"overridenResponseType\", option_type(ResponseTypes$reflection())], [\"timeout\", option_type(int32_type)], [\"content\", BodyContent$reflection()]]);\n}\n\nexport class ResponseContent extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Text\", \"Blob\", \"ArrayBuffer\", \"Unknown\"];\n    }\n}\n\nexport function ResponseContent$reflection() {\n    return union_type(\"Fable.SimpleHttp.ResponseContent\", [], ResponseContent, () => [[[\"Item\", string_type]], [[\"Item\", class_type(\"Browser.Types.Blob\", void 0, Blob)]], [[\"Item\", class_type(\"Fable.Core.JS.ArrayBuffer\")]], [[\"Item\", obj_type]]]);\n}\n\nexport class HttpResponse extends Record {\n    constructor(statusCode, responseText, responseType, responseHeaders, content) {\n        super();\n        this.statusCode = (statusCode | 0);\n        this.responseText = responseText;\n        this.responseType = responseType;\n        this.responseHeaders = responseHeaders;\n        this.content = content;\n    }\n}\n\nexport function HttpResponse$reflection() {\n    return record_type(\"Fable.SimpleHttp.HttpResponse\", [], HttpResponse, () => [[\"statusCode\", int32_type], [\"responseText\", string_type], [\"responseType\", string_type], [\"responseHeaders\", class_type(\"Microsoft.FSharp.Collections.FSharpMap`2\", [string_type, string_type])], [\"content\", ResponseContent$reflection()]]);\n}\n\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\r\nimport { min as min_1, disposeSafe, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport function Helpers_allocateArrayFromCons(cons, len) {\r\n    if ((typeof cons) === \"function\") {\r\n        return new cons(len);\r\n    }\r\n    else {\r\n        return new Array(len);\r\n    }\r\n}\r\n\r\nfunction indexNotFound() {\r\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\r\n}\r\n\r\nfunction differentLengths() {\r\n    throw (new Error(\"Arrays had different lengths\"));\r\n}\r\n\r\nexport function append(array1, array2, cons) {\r\n    const len1 = array1.length | 0;\r\n    const len2 = array2.length | 0;\r\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\r\n    for (let i = 0; i <= (len1 - 1); i++) {\r\n        newArray[i] = array1[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        newArray[i_1 + len1] = array2[i_1];\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport function filter(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function fill(target, targetIndex, count, value) {\r\n    const start = targetIndex | 0;\r\n    return target.fill(value, start, (start + count));\r\n}\r\n\r\nexport function getSubArray(array, start, count) {\r\n    const start_1 = start | 0;\r\n    return array.slice(start_1, (start_1 + count));\r\n}\r\n\r\nexport function last(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    return array[array.length - 1];\r\n}\r\n\r\nexport function tryLast(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[array.length - 1]);\r\n    }\r\n}\r\n\r\nexport function mapIndexed(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(i, source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function map(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function mapIndexed2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapIndexed3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapFold(mapping, state, array, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = 0; i <= (array.length - 1); i++) {\r\n            const patternInput = mapping(acc, array[i]);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function mapFoldBack(mapping, array, state, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            const patternInput = mapping(array[i], acc);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function indexed(source) {\r\n    const len = source.length | 0;\r\n    const target = new Array(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = [i, source[i]];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function truncate(count, array) {\r\n    const count_1 = max_1(comparePrimitives, 0, count) | 0;\r\n    const start = 0;\r\n    return array.slice(start, (start + count_1));\r\n}\r\n\r\nexport function concat(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const matchValue = arrays_1.length | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return Helpers_allocateArrayFromCons(cons, 0);\r\n        }\r\n        case 1: {\r\n            return arrays_1[0];\r\n        }\r\n        default: {\r\n            let totalIdx = 0;\r\n            let totalLength = 0;\r\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\r\n                const arr_1 = arrays_1[idx];\r\n                totalLength = ((totalLength + arr_1.length) | 0);\r\n            }\r\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\r\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\r\n                const arr_2 = arrays_1[idx_1];\r\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\r\n                    result[totalIdx] = arr_2[j];\r\n                    totalIdx = ((totalIdx + 1) | 0);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function collect(mapping, array, cons) {\r\n    return concat(map(mapping, array, null), cons);\r\n}\r\n\r\nexport function where(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function contains(value, array, eq) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return false;\r\n            }\r\n            else if (eq.Equals(value, array[i])) {\r\n                return true;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function empty(cons) {\r\n    return Helpers_allocateArrayFromCons(cons, 0);\r\n}\r\n\r\nexport function singleton(value, cons) {\r\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\r\n    ar[0] = value;\r\n    return ar;\r\n}\r\n\r\nexport function initialize(count, initializer, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (count - 1); i++) {\r\n        result[i] = initializer(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function pairwise(array) {\r\n    if (array.length < 2) {\r\n        return [];\r\n    }\r\n    else {\r\n        const count = (array.length - 1) | 0;\r\n        const result = new Array(count);\r\n        for (let i = 0; i <= (count - 1); i++) {\r\n            result[i] = [array[i], array[i + 1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function replicate(count, initial, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (result.length - 1); i++) {\r\n        result[i] = initial;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copy(array) {\r\n    return array.slice();\r\n}\r\n\r\nexport function reverse(array) {\r\n    const array_2 = array.slice();\r\n    return array_2.reverse();\r\n}\r\n\r\nexport function scan(folder, state, array, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[0] = state;\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        res[i + 1] = folder(res[i], array[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function scanBack(folder, array, state, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[array.length] = state;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        res[i] = folder(array[i], res[i + 1]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function skip(count, array, cons) {\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = ((count < 0) ? 0 : count) | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = count | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function take(count, array, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        return array.slice(start, (start + count));\r\n    }\r\n}\r\n\r\nexport function takeWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        const count_1 = count | 0;\r\n        return array.slice(start, (start + count_1));\r\n    }\r\n}\r\n\r\nexport function addInPlace(x, array) {\r\n    array.push(x);\r\n}\r\n\r\nexport function addRangeInPlace(range, array) {\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function insertRangeInPlace(index, range, array) {\r\n    let index_1;\r\n    let i = index;\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\r\n            i = ((i + 1) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function removeInPlace(item_1, array) {\r\n    const i = (array.indexOf(item_1, 0)) | 0;\r\n    if (i > -1) {\r\n        array.splice(i, 1);\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function removeAllInPlace(predicate, array) {\r\n    const countRemoveAll = (count) => {\r\n        const i = (array.findIndex(predicate)) | 0;\r\n        if (i > -1) {\r\n            array.splice(i, 1);\r\n            return (countRemoveAll(count) + 1) | 0;\r\n        }\r\n        else {\r\n            return count | 0;\r\n        }\r\n    };\r\n    return countRemoveAll(0) | 0;\r\n}\r\n\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    const diff = (targetIndex - sourceIndex) | 0;\r\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\r\n        target[i + diff] = source[i];\r\n    }\r\n}\r\n\r\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\r\n    try {\r\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\r\n    }\r\n    catch (matchValue) {\r\n        copyTo(source, sourceIndex, target, targetIndex, count);\r\n    }\r\n}\r\n\r\nexport function indexOf(array, item_1, start, count) {\r\n    const start_1 = defaultArg(start, 0) | 0;\r\n    const i = (array.indexOf(item_1, start_1)) | 0;\r\n    if ((count != null) && (i >= (start_1 + value_2(count)))) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return i | 0;\r\n    }\r\n}\r\n\r\nexport function partition(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\r\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\r\n    let iTrue = 0;\r\n    let iFalse = 0;\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        if (f(source[i])) {\r\n            res1[iTrue] = source[i];\r\n            iTrue = ((iTrue + 1) | 0);\r\n        }\r\n        else {\r\n            res2[iFalse] = source[i];\r\n            iFalse = ((iFalse + 1) | 0);\r\n        }\r\n    }\r\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\r\n}\r\n\r\nexport function find(predicate, array) {\r\n    const matchValue = array.find(predicate);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_2(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, array) {\r\n    return array.find(predicate);\r\n}\r\n\r\nexport function findIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue | 0;\r\n    }\r\n    else {\r\n        return indexNotFound() | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function pick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return indexNotFound();\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue != null) {\r\n                    return value_2(matchValue);\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function tryPick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue == null) {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function findBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound();\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return array[i];\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function tryFindBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return some(array[i]);\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function findLastIndex(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return -1;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function findIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound() | 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function choose(chooser, array, cons) {\r\n    const res = [];\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        const matchValue = chooser(array[i]);\r\n        if (matchValue != null) {\r\n            const y = value_2(matchValue);\r\n            res.push(y);\r\n        }\r\n    }\r\n    if ((typeof cons) === \"function\") {\r\n        return map((x) => x, res, cons);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\n\r\nexport function foldIndexed(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function fold(folder, state, array) {\r\n    return array.reduce((folder), state);\r\n}\r\n\r\nexport function iterate(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(array[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(i, array[i]);\r\n    }\r\n}\r\n\r\nexport function iterate2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(i, array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function isEmpty(array) {\r\n    return array.length === 0;\r\n}\r\n\r\nexport function forAll(predicate, array) {\r\n    return array.every(predicate);\r\n}\r\n\r\nexport function permute(f, array) {\r\n    const size = array.length | 0;\r\n    const res = array.slice();\r\n    const checkFlags = new Array(size);\r\n    iterateIndexed((i, x) => {\r\n        const j = f(i) | 0;\r\n        if ((j < 0) ? true : (j >= size)) {\r\n            throw (new Error(\"Not a valid permutation\"));\r\n        }\r\n        res[j] = x;\r\n        checkFlags[j] = 1;\r\n    }, array);\r\n    if (!(checkFlags.every((y) => (1 === y)))) {\r\n        throw (new Error(\"Not a valid permutation\"));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setSlice(target, lower, upper, source) {\r\n    const lower_1 = defaultArg(lower, 0) | 0;\r\n    const upper_1 = defaultArg(upper, -1) | 0;\r\n    const length = (((upper_1 >= 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\r\n    for (let i = 0; i <= length; i++) {\r\n        target[i + lower_1] = source[i];\r\n    }\r\n}\r\n\r\nexport function sortInPlaceBy(projection, xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n}\r\n\r\nexport function sortInPlace(xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(x, y));\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(x, y));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const comparer_1 = comparer;\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(comparer_1);\r\n    return xs_1;\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const len1 = xs.length | 0;\r\n    const len2 = ys.length | 0;\r\n    const res = new Array(len1 * len2);\r\n    for (let i = 0; i <= (xs.length - 1); i++) {\r\n        for (let j = 0; j <= (ys.length - 1); j++) {\r\n            res[(i * len2) + j] = [xs[i], ys[j]];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    const res = [];\r\n    const loop = (state_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const state_1 = state_1_mut;\r\n            const matchValue = generator(state_1);\r\n            if (matchValue != null) {\r\n                const x = matchValue[0];\r\n                const s = matchValue[1];\r\n                res.push(x);\r\n                state_1_mut = s;\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(state);\r\n    return res;\r\n}\r\n\r\nexport function unzip(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n    }, array);\r\n    return [res1, res2];\r\n}\r\n\r\nexport function unzip3(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    const res3 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n        res3[i] = tupledArg[2];\r\n    }, array);\r\n    return [res1, res2, res3];\r\n}\r\n\r\nexport function zip(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function zip3(array1, array2, array3) {\r\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i], array3[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function chunkBySize(chunkSize, array) {\r\n    if (chunkSize < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\r\n            let slice;\r\n            const start_1 = (x * chunkSize) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function splitAt(index, array) {\r\n    let start;\r\n    if ((index < 0) ? true : (index > array.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\r\n}\r\n\r\nexport function compareWith(comparer, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = 0;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return 1;\r\n        }\r\n        else if (length1 < length2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            while ((i < length1) && (result === 0)) {\r\n                result = (comparer(array1[i], array2[i]) | 0);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function equalsWith(equals, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = true;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return false;\r\n        }\r\n        else if (length1 < length2) {\r\n            return false;\r\n        }\r\n        else {\r\n            while ((i < length1) && result) {\r\n                result = equals(array1[i], array2[i]);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function exactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return array[0];\r\n    }\r\n    else if (array.length === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return some(array[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function head(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        return array[0];\r\n    }\r\n}\r\n\r\nexport function tryHead(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[0]);\r\n    }\r\n}\r\n\r\nexport function tail(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\r\n    }\r\n    return array.slice(1);\r\n}\r\n\r\nexport function item(index, array) {\r\n    return array[index];\r\n}\r\n\r\nexport function tryItem(index, array) {\r\n    if ((index < 0) ? true : (index >= array.length)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[index]);\r\n    }\r\n}\r\n\r\nexport function foldBackIndexed(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldBack(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldIndexed2(folder, state, array1, array2) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        throw (new Error(\"Arrays have different lengths\"));\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        acc = folder(i, acc, array1[i], array2[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function fold2(folder, state, array1, array2) {\r\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\r\n}\r\n\r\nexport function foldBackIndexed2(folder, array1, array2, state) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const size = array1.length | 0;\r\n    for (let i = 1; i <= size; i++) {\r\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(f, array1, array2, state) {\r\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\r\n}\r\n\r\nexport function reduce(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduce(reduction_1);\r\n}\r\n\r\nexport function reduceBack(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduceRight(reduction_1);\r\n}\r\n\r\nexport function forAll2(predicate, array1, array2) {\r\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\r\n}\r\n\r\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\r\n    existsOffset:\r\n    while (true) {\r\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\r\n        if (index === array.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array_mut = array;\r\n            index_mut = (index + 1);\r\n            continue existsOffset;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists(predicate, array) {\r\n    return existsOffset(predicate, array, 0);\r\n}\r\n\r\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\r\n    existsOffset2:\r\n    while (true) {\r\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\r\n        if (index === array1.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array1[index], array2[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array1_mut = array1;\r\n            array2_mut = array2;\r\n            index_mut = (index + 1);\r\n            continue existsOffset2;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    return existsOffset2(predicate, array1, array2, 0);\r\n}\r\n\r\nexport function sum(array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, array[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function sumBy(projection, array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, projection(array[i]));\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, array[i]);\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function averageBy(projection, array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, projection(array[i]));\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function windowed(windowSize, source) {\r\n    if (windowSize <= 0) {\r\n        throw (new Error(\"windowSize must be positive\"));\r\n    }\r\n    let res;\r\n    const len = max_1(comparePrimitives, 0, (source.length - windowSize) + 1) | 0;\r\n    res = (new Array(len));\r\n    for (let i = windowSize; i <= source.length; i++) {\r\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function splitInto(chunks, array) {\r\n    if (chunks < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        const chunks_1 = min_1(comparePrimitives, chunks, array.length) | 0;\r\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\r\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\r\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\r\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\r\n            let slice;\r\n            const start_1 = ((i * minChunkSize) + min_1(comparePrimitives, chunksWithExtraItem, i)) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function transpose(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const len = arrays_1.length | 0;\r\n    if (len === 0) {\r\n        return new Array(0);\r\n    }\r\n    else {\r\n        const firstArray = arrays_1[0];\r\n        const lenInner = firstArray.length | 0;\r\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\r\n            differentLengths();\r\n        }\r\n        const result = new Array(lenInner);\r\n        for (let i = 0; i <= (lenInner - 1); i++) {\r\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\r\n            for (let j = 0; j <= (len - 1); j++) {\r\n                result[i][j] = arrays_1[j][i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len + 1);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    target[index] = y;\r\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\r\n        target[i_1 + 1] = xs[i_1];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const ys_1 = Array.from(ys);\r\n    const len2 = ys_1.length | 0;\r\n    const target = new xs.constructor(len + len2);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        target[index + i_1] = ys_1[i_1];\r\n    }\r\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\r\n        target[i_2 + len2] = xs[i_2];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    if ((index < 0) ? true : (index >= xs.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    let i = -1;\r\n    return filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        return i !== index;\r\n    }, xs);\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index >= len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = ((i === index) ? y : xs[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { TimeoutException } from \"./SystemException.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// see AsyncBuilder.Delay\nfunction delay(generator) {\n    return protectedCont((ctx) => generator()(ctx));\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nfunction throwAfter(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onError(new TimeoutException());\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function startChild(computation, ms) {\n    if (ms) {\n        const computationWithTimeout = protectedBind(parallel2(computation, throwAfter(ms)), xs => protectedReturn(xs[0]));\n        return startChild(computationWithTimeout);\n    }\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return delay(() => awaitPromise(Promise.all(Array.from(computations, (w) => startAsPromise(w)))));\n}\nfunction parallel2(a, b) {\n    return delay(() => awaitPromise(Promise.all([startAsPromise(a), startAsPromise(b)])));\n}\nexport function sequential(computations) {\n    function _sequential(computations) {\n        let pr = Promise.resolve([]);\n        for (const c of computations) {\n            pr = pr.then(results => startAsPromise(c).then(r => results.concat([r])));\n        }\n        return pr;\n    }\n    return delay(() => awaitPromise(_sequential(computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function runSynchronously() {\n    throw new Error(\"Asynchronous code cannot be run synchronously in JS\");\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { ensureErrorOrException } from './Types.js';\nexport class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(ensureErrorOrException(err));\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(ensureErrorOrException(err));\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (err) {\n                    ctx.onError(ensureErrorOrException(err));\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (err) {\n                        ctx.onError(ensureErrorOrException(err));\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { BigInteger_op_Inequality_56F059C0, BigInteger_op_Equality_56F059C0, BigInteger_op_GreaterThanOrEqual_56F059C0, BigInteger_op_GreaterThan_56F059C0, BigInteger_op_LessThanOrEqual_56F059C0, BigInteger_op_LessThan_56F059C0, BigInteger_op_ExclusiveOr_56F059C0, BigInteger_op_BitwiseOr_56F059C0, BigInteger_op_BitwiseAnd_56F059C0, BigInteger_op_LeftShift_62E082A2, BigInteger_op_RightShift_62E082A2, BigInteger_op_UnaryPlus_Z665282C2, BigInteger_op_UnaryNegation_Z665282C2, BigInteger_op_Modulus_56F059C0, BigInteger_op_Division_56F059C0, BigInteger_op_Multiply_56F059C0, BigInteger_op_Subtraction_56F059C0, BigInteger_op_Addition_56F059C0, BigInteger__get_IsOne, BigInteger__get_IsZero, BigInteger__get_Sign, BigInteger__get_ToDecimal, BigInteger__get_ToDouble, BigInteger__get_ToSingle, BigInteger__get_ToUInt64, BigInteger__get_ToInt64, BigInteger__get_ToUInt32, BigInteger__get_ToInt32, BigInteger__get_ToUInt16, BigInteger__get_ToInt16, BigInteger__get_ToByte, BigInteger__get_ToSByte, BigInteger_$ctor_Z524259A4, BigInteger_$ctor_Z524259C1, BigInteger_get_Two, BigInteger_get_One, BigInteger_get_Zero, BigInteger_Abs_Z665282C2, BigInteger_Pow_62E082A2, BigInteger_GreatestCommonDivisor_56F059C0, BigInteger_DivRem_56F059C0, BigInteger_Parse_Z721C83C5, BigInteger } from \"./BigInt/z.js\";\r\nimport { fromInteger } from \"./Long.js\";\r\nimport { comparePrimitives, min, compare as compare_1, equals as equals_1, safeHash } from \"./Util.js\";\r\nimport { toString as toString_1 } from \"./Types.js\";\r\nimport { fold, empty, ofArrayWithTail, cons, toArray, head, skipWhile } from \"./List.js\";\r\nimport { fill, reverse } from \"./Array.js\";\r\n\r\nexport function isBigInt(x) {\r\n    return x instanceof BigInteger;\r\n}\r\n\r\nexport function tryParse(str, res) {\r\n    try {\r\n        res.contents = BigInteger_Parse_Z721C83C5(str);\r\n        return true;\r\n    }\r\n    catch (matchValue) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function divRem(x, y, remainder) {\r\n    const patternInput = BigInteger_DivRem_56F059C0(x, y);\r\n    remainder.contents = patternInput[1];\r\n    return patternInput[0];\r\n}\r\n\r\nexport function parse(arg00) {\r\n    return BigInteger_Parse_Z721C83C5(arg00);\r\n}\r\n\r\nexport function greatestCommonDivisor(arg00, arg01) {\r\n    return BigInteger_GreatestCommonDivisor_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function pow(arg00, arg01) {\r\n    return BigInteger_Pow_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function abs(arg00) {\r\n    return BigInteger_Abs_Z665282C2(arg00);\r\n}\r\n\r\nexport const zero = BigInteger_get_Zero();\r\n\r\nexport const one = BigInteger_get_One();\r\n\r\nexport const two = BigInteger_get_Two();\r\n\r\nexport function fromString(s) {\r\n    return BigInteger_Parse_Z721C83C5(s);\r\n}\r\n\r\nexport function fromZero() {\r\n    return BigInteger_get_Zero();\r\n}\r\n\r\nexport function fromOne() {\r\n    return BigInteger_get_One();\r\n}\r\n\r\nexport function fromInt64(i) {\r\n    return BigInteger_$ctor_Z524259C1(i);\r\n}\r\n\r\nexport function fromInt32(i) {\r\n    if (i > 2147483647) {\r\n        return BigInteger_$ctor_Z524259C1(fromInteger(i, false, 6));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z524259A4(i);\r\n    }\r\n}\r\n\r\nexport function toSByte(x) {\r\n    return BigInteger__get_ToSByte(x);\r\n}\r\n\r\nexport function toByte(x) {\r\n    return BigInteger__get_ToByte(x);\r\n}\r\n\r\nexport function toInt16(x) {\r\n    return BigInteger__get_ToInt16(x);\r\n}\r\n\r\nexport function toUInt16(x) {\r\n    return BigInteger__get_ToUInt16(x);\r\n}\r\n\r\nexport function toInt32(x) {\r\n    return BigInteger__get_ToInt32(x);\r\n}\r\n\r\nexport function toUInt32(x) {\r\n    return BigInteger__get_ToUInt32(x);\r\n}\r\n\r\nexport function toInt64(x) {\r\n    return BigInteger__get_ToInt64(x);\r\n}\r\n\r\nexport function toUInt64(x) {\r\n    return BigInteger__get_ToUInt64(x);\r\n}\r\n\r\nexport function toSingle(x) {\r\n    return BigInteger__get_ToSingle(x);\r\n}\r\n\r\nexport function toDouble(x) {\r\n    return BigInteger__get_ToDouble(x);\r\n}\r\n\r\nexport function toDecimal(x) {\r\n    return BigInteger__get_ToDecimal(x);\r\n}\r\n\r\nexport function sign(x) {\r\n    return BigInteger__get_Sign(x);\r\n}\r\n\r\nexport function isZero(x) {\r\n    return BigInteger__get_IsZero(x);\r\n}\r\n\r\nexport function isOne(x) {\r\n    return BigInteger__get_IsOne(x);\r\n}\r\n\r\nexport function hash(x) {\r\n    return safeHash(x);\r\n}\r\n\r\nexport function compare(x, y) {\r\n    return x.CompareTo(y);\r\n}\r\n\r\nexport function equals(x, y) {\r\n    return equals_1(x, y);\r\n}\r\n\r\nexport function toString(x) {\r\n    return toString_1(x);\r\n}\r\n\r\nexport const get_Zero = BigInteger_get_Zero();\r\n\r\nexport const get_One = BigInteger_get_One();\r\n\r\nexport function op_Addition(arg00, arg01) {\r\n    return BigInteger_op_Addition_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Subtraction(arg00, arg01) {\r\n    return BigInteger_op_Subtraction_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Multiply(arg00, arg01) {\r\n    return BigInteger_op_Multiply_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Division(arg00, arg01) {\r\n    return BigInteger_op_Division_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Modulus(arg00, arg01) {\r\n    return BigInteger_op_Modulus_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_UnaryNegation(arg00) {\r\n    return BigInteger_op_UnaryNegation_Z665282C2(arg00);\r\n}\r\n\r\nexport function op_UnaryPlus(arg00) {\r\n    return BigInteger_op_UnaryPlus_Z665282C2(arg00);\r\n}\r\n\r\nexport function op_RightShift(arg00, arg01) {\r\n    return BigInteger_op_RightShift_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function op_LeftShift(arg00, arg01) {\r\n    return BigInteger_op_LeftShift_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function op_BitwiseAnd(arg00, arg01) {\r\n    return BigInteger_op_BitwiseAnd_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_BitwiseOr(arg00, arg01) {\r\n    return BigInteger_op_BitwiseOr_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_ExclusiveOr(arg00, arg01) {\r\n    return BigInteger_op_ExclusiveOr_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_LessThan(arg00, arg01) {\r\n    return BigInteger_op_LessThan_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_LessThanOrEqual(arg00, arg01) {\r\n    return BigInteger_op_LessThanOrEqual_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_GreaterThan(arg00, arg01) {\r\n    return BigInteger_op_GreaterThan_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_GreaterThanOrEqual(arg00, arg01) {\r\n    return BigInteger_op_GreaterThanOrEqual_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Equality(arg00, arg01) {\r\n    return BigInteger_op_Equality_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Inequality(arg00, arg01) {\r\n    return BigInteger_op_Inequality_56F059C0(arg00, arg01);\r\n}\r\n\r\nfunction flipTwosComplement(currByte, lowBitFound) {\r\n    let array;\r\n    const matchValue = [currByte, lowBitFound];\r\n    if (matchValue[1]) {\r\n        return [(currByte ^ 255) & 255, true];\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        return [0, false];\r\n    }\r\n    else {\r\n        return [(currByte ^ (254 << ((array = (new Int32Array([0, 1, 2, 3, 4, 5, 6, 7])), array.find((i) => ((currByte & (1 << i)) > 0)))))) & 255, true];\r\n    }\r\n}\r\n\r\nexport function toByteArray(value) {\r\n    if (equals_1(value, zero)) {\r\n        return new Uint8Array([0]);\r\n    }\r\n    else {\r\n        const isPositive = compare_1(value, zero) > 0;\r\n        const value_1 = isPositive ? value : BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value);\r\n        const mask32 = fromInt64(fromInteger(4294967295, false, 6));\r\n        const loop = (accumBytes_mut, consumeValue_mut, lowBitFound_mut) => {\r\n            let value_6, value_8, value_9, value_10;\r\n            loop:\r\n            while (true) {\r\n                const accumBytes = accumBytes_mut, consumeValue = consumeValue_mut, lowBitFound = lowBitFound_mut;\r\n                if (compare_1(consumeValue, zero) <= 0) {\r\n                    const accumBytes_1 = isPositive ? skipWhile((b) => (b === 0), accumBytes) : skipWhile((b_1) => (b_1 === 255), accumBytes);\r\n                    const isHighBitOne = (head(accumBytes_1) & 128) !== 0;\r\n                    return reverse(toArray((isPositive && isHighBitOne) ? cons(0, accumBytes_1) : (((!isPositive) && (!isHighBitOne)) ? cons(255, accumBytes_1) : accumBytes_1)));\r\n                }\r\n                else {\r\n                    const currValue = toUInt32(BigInteger_op_BitwiseAnd_56F059C0(consumeValue, mask32));\r\n                    if (isPositive) {\r\n                        const b0 = currValue & 0xFF;\r\n                        let b1;\r\n                        const value_4 = currValue >>> 8;\r\n                        b1 = (value_4 & 0xFF);\r\n                        let b2;\r\n                        const value_5 = currValue >>> 16;\r\n                        b2 = (value_5 & 0xFF);\r\n                        accumBytes_mut = ofArrayWithTail([(value_6 = (currValue >>> 24), value_6 & 0xFF), b2, b1, b0], accumBytes);\r\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\r\n                        lowBitFound_mut = false;\r\n                        continue loop;\r\n                    }\r\n                    else {\r\n                        const patternInput = flipTwosComplement(currValue & 0xFF, lowBitFound);\r\n                        const patternInput_1 = flipTwosComplement((value_8 = (currValue >>> 8), value_8 & 0xFF), patternInput[1]);\r\n                        const patternInput_2 = flipTwosComplement((value_9 = (currValue >>> 16), value_9 & 0xFF), patternInput_1[1]);\r\n                        const patternInput_3 = flipTwosComplement((value_10 = (currValue >>> 24), value_10 & 0xFF), patternInput_2[1]);\r\n                        accumBytes_mut = ofArrayWithTail([patternInput_3[0], patternInput_2[0], patternInput_1[0], patternInput[0]], accumBytes);\r\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\r\n                        lowBitFound_mut = patternInput_3[1];\r\n                        continue loop;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(empty(), value_1, false);\r\n    }\r\n}\r\n\r\nexport function fromByteArray(bytes) {\r\n    if (bytes == null) {\r\n        throw (new Error(\"bytes\"));\r\n    }\r\n    if (bytes.length === 0) {\r\n        return zero;\r\n    }\r\n    else {\r\n        const isPositive = (bytes[bytes.length - 1] & 128) === 0;\r\n        const buffer = fill(new Uint8Array(4), 0, 4, 0);\r\n        const loop = (accumUInt32_mut, currIndex_mut, bytesRemaining_mut, lowBitFound_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const accumUInt32 = accumUInt32_mut, currIndex = currIndex_mut, bytesRemaining = bytesRemaining_mut, lowBitFound = lowBitFound_mut;\r\n                if (bytesRemaining === 0) {\r\n                    const value_2 = fold((acc, value) => BigInteger_op_Addition_56F059C0(BigInteger_op_LeftShift_62E082A2(acc, 32), fromInt64(fromInteger(value, false, 6))), zero, accumUInt32);\r\n                    if (isPositive) {\r\n                        return value_2;\r\n                    }\r\n                    else {\r\n                        return BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value_2);\r\n                    }\r\n                }\r\n                else {\r\n                    const bytesToProcess = min(comparePrimitives, bytesRemaining, 4) | 0;\r\n                    for (let i_1 = 0; i_1 <= (bytesToProcess - 1); i_1++) {\r\n                        buffer[i_1] = bytes[currIndex + i_1];\r\n                    }\r\n                    if (isPositive) {\r\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\r\n                        accumUInt32_mut = cons((((((buffer[0] | ((buffer[1] << 8) >>> 0)) >>> 0) | ((buffer[2] << 16) >>> 0)) >>> 0) | ((buffer[3] << 24) >>> 0)) >>> 0, accumUInt32);\r\n                        currIndex_mut = (currIndex + bytesToProcess);\r\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\r\n                        lowBitFound_mut = false;\r\n                        continue loop;\r\n                    }\r\n                    else {\r\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\r\n                        const patternInput = flipTwosComplement(buffer[0], lowBitFound);\r\n                        const patternInput_1 = flipTwosComplement(buffer[1], patternInput[1]);\r\n                        const patternInput_2 = flipTwosComplement(buffer[2], patternInput_1[1]);\r\n                        const patternInput_3 = flipTwosComplement(buffer[3], patternInput_2[1]);\r\n                        accumUInt32_mut = cons((((((patternInput[0] | ((patternInput_1[0] << 8) >>> 0)) >>> 0) | ((patternInput_2[0] << 16) >>> 0)) >>> 0) | ((patternInput_3[0] << 24) >>> 0)) >>> 0, accumUInt32);\r\n                        currIndex_mut = (currIndex + bytesToProcess);\r\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\r\n                        lowBitFound_mut = patternInput_3[1];\r\n                        continue loop;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(empty(), 0, bytes.length, false);\r\n    }\r\n}\r\n\r\n","import { Record } from \"../Types.js\";\r\nimport { record_type, array_type, int32_type } from \"../Reflection.js\";\r\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, fromInteger, op_Multiply, op_Modulus, toInt, fromBits } from \"../Long.js\";\r\nimport { copy, initialize, map, fill } from \"../Array.js\";\r\nimport { toArray, empty, head, tail, isEmpty, cons } from \"../List.js\";\r\nimport { int32ToString } from \"../Util.js\";\r\nimport { isNullOrEmpty, join } from \"../String.js\";\r\n\r\nexport class BigNat extends Record {\r\n    constructor(bound, digits) {\r\n        super();\r\n        this.bound = (bound | 0);\r\n        this.digits = digits;\r\n    }\r\n}\r\n\r\nexport function BigNat$reflection() {\r\n    return record_type(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32_type], [\"digits\", array_type(int32_type)]]);\r\n}\r\n\r\nexport function BigNatModule_FFT_pow32(x_mut, n_mut) {\r\n    BigNatModule_FFT_pow32:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return 1;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (x * x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_FFT_pow32;\r\n        }\r\n        else {\r\n            return (x * BigNatModule_FFT_pow32(x * x, ~(~(n / 2)))) | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_leastBounding2Power(b) {\r\n    const findBounding2Power = (b_1_mut, tp_mut, i_mut) => {\r\n        findBounding2Power:\r\n        while (true) {\r\n            const b_1 = b_1_mut, tp = tp_mut, i = i_mut;\r\n            if (b_1 <= tp) {\r\n                return [tp, i];\r\n            }\r\n            else {\r\n                b_1_mut = b_1;\r\n                tp_mut = (tp * 2);\r\n                i_mut = (i + 1);\r\n                continue findBounding2Power;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return findBounding2Power(b, 1, 0);\r\n}\r\n\r\nexport const BigNatModule_FFT_p = fromBits(2013265921, 0, false);\r\n\r\nconst BigNatModule_FFT_patternInput$004075 = [27, 15, 31, 440564289];\r\n\r\nexport const BigNatModule_FFT_w = BigNatModule_FFT_patternInput$004075[3];\r\n\r\nexport const BigNatModule_FFT_m = BigNatModule_FFT_patternInput$004075[1];\r\n\r\nexport const BigNatModule_FFT_k = BigNatModule_FFT_patternInput$004075[0];\r\n\r\nexport const BigNatModule_FFT_g = BigNatModule_FFT_patternInput$004075[2];\r\n\r\nexport const BigNatModule_FFT_primeP = BigNatModule_FFT_p;\r\n\r\nexport const BigNatModule_FFT_maxBitsInsideFp = 30;\r\n\r\nexport const BigNatModule_FFT_Fp_p = 2013265921;\r\n\r\nexport const BigNatModule_FFT_Fp_p64 = fromBits(2013265921, 0, true);\r\n\r\nexport function BigNatModule_FFT_Fp_toInt(x) {\r\n    return ~(~x);\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_ofInt32(x) {\r\n    return x >>> 0;\r\n}\r\n\r\nexport const BigNatModule_FFT_Fp_mzero = 0;\r\n\r\nexport const BigNatModule_FFT_Fp_mone = 1;\r\n\r\nexport const BigNatModule_FFT_Fp_mtwo = 2;\r\n\r\nexport function BigNatModule_FFT_Fp_mpow(x_mut, n_mut) {\r\n    BigNatModule_FFT_Fp_mpow:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return BigNatModule_FFT_Fp_mone;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_FFT_Fp_mpow;\r\n        }\r\n        else {\r\n            const y_2 = BigNatModule_FFT_Fp_mpow(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, ~(~(n / 2)));\r\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_mpowL(x_mut, n_mut) {\r\n    BigNatModule_FFT_Fp_mpowL:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (equals(n, fromBits(0, 0, false))) {\r\n            return BigNatModule_FFT_Fp_mone;\r\n        }\r\n        else if (equals(op_Modulus(n, fromBits(2, 0, false)), fromBits(0, 0, false))) {\r\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\r\n            n_mut = op_Division(n, fromBits(2, 0, false));\r\n            continue BigNatModule_FFT_Fp_mpowL;\r\n        }\r\n        else {\r\n            const y_2 = BigNatModule_FFT_Fp_mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, op_Division(n, fromBits(2, 0, false)));\r\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_m2PowNthRoot(n) {\r\n    return BigNatModule_FFT_Fp_mpow(BigNatModule_FFT_w >>> 0, BigNatModule_FFT_pow32(2, BigNatModule_FFT_k - n));\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_minv(x) {\r\n    return BigNatModule_FFT_Fp_mpowL(x, op_Subtraction(BigNatModule_FFT_primeP, fromBits(2, 0, false)));\r\n}\r\n\r\nexport function BigNatModule_FFT_computeFFT(lambda, mu, n, w, u, res, offset) {\r\n    let x_1, x_3, y_5;\r\n    if (n === 1) {\r\n        res[offset] = u[mu];\r\n    }\r\n    else {\r\n        const halfN = (~(~(n / 2))) | 0;\r\n        const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        const offsetHalfN = (offset + halfN) | 0;\r\n        BigNatModule_FFT_computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\r\n        BigNatModule_FFT_computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\r\n        let wj = BigNatModule_FFT_Fp_mone;\r\n        for (let j = 0; j <= (halfN - 1); j++) {\r\n            const even = res[offset + j];\r\n            const odd = res[offsetHalfN + j];\r\n            res[offset + j] = ((even + ((x_1 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_1, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0))) % BigNatModule_FFT_Fp_p);\r\n            res[offsetHalfN + j] = (((even + BigNatModule_FFT_Fp_p) - ((x_3 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_3, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0))) % BigNatModule_FFT_Fp_p);\r\n            wj = ((y_5 = wj, toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(y_5, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_computFftInPlace(n, w, u) {\r\n    const res = fill(new Uint32Array(n), 0, n, BigNatModule_FFT_Fp_mzero);\r\n    BigNatModule_FFT_computeFFT(1, 0, n, w, u, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function BigNatModule_FFT_computeInverseFftInPlace(n, w, uT) {\r\n    const bigKInv = BigNatModule_FFT_Fp_minv(n >>> 0);\r\n    return map((y) => (toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0), BigNatModule_FFT_computFftInPlace(n, BigNatModule_FFT_Fp_minv(w), uT), Uint32Array);\r\n}\r\n\r\nexport const BigNatModule_FFT_maxTwoPower = 29;\r\n\r\nexport const BigNatModule_FFT_twoPowerTable = initialize(BigNatModule_FFT_maxTwoPower - 1, (i) => BigNatModule_FFT_pow32(2, i), Int32Array);\r\n\r\nexport function BigNatModule_FFT_computeFftPaddedPolynomialProduct(bigK, k, u, v) {\r\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(k);\r\n    const n = bigK | 0;\r\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u);\r\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v);\r\n    return BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\r\n        const x = uT[i];\r\n        const y = vT[i];\r\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n    }, Uint32Array));\r\n}\r\n\r\nexport function BigNatModule_FFT_padTo(n, u) {\r\n    const uBound = u.length | 0;\r\n    return initialize(n, (i) => ((i < uBound) ? BigNatModule_FFT_Fp_ofInt32(u[i]) : BigNatModule_FFT_Fp_mzero), Uint32Array);\r\n}\r\n\r\nexport function BigNatModule_FFT_computeFftPolynomialProduct(degu, u, degv, v) {\r\n    const patternInput = BigNatModule_FFT_leastBounding2Power((degu + degv) + 1);\r\n    const bigK = patternInput[0] | 0;\r\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(patternInput[1]);\r\n    const u_1 = BigNatModule_FFT_padTo(bigK, u);\r\n    const v_1 = BigNatModule_FFT_padTo(bigK, v);\r\n    const n = bigK | 0;\r\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u_1);\r\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v_1);\r\n    return map(BigNatModule_FFT_Fp_toInt, BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\r\n        const x = uT[i];\r\n        const y = vT[i];\r\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n    }, Uint32Array)), Int32Array);\r\n}\r\n\r\nexport const BigNatModule_FFT_mzero = BigNatModule_FFT_Fp_mzero;\r\n\r\nexport const BigNatModule_FFT_mone = BigNatModule_FFT_Fp_mone;\r\n\r\nexport const BigNatModule_FFT_maxFp = ((BigNatModule_FFT_Fp_p + BigNatModule_FFT_Fp_p) - BigNatModule_FFT_mone) % BigNatModule_FFT_Fp_p;\r\n\r\nexport function BigNatModule_bound(n) {\r\n    return n.bound;\r\n}\r\n\r\nexport function BigNatModule_setBound(n, v) {\r\n    n.bound = (v | 0);\r\n}\r\n\r\nexport function BigNatModule_coeff(n, i) {\r\n    return n.digits[i];\r\n}\r\n\r\nexport function BigNatModule_coeff64(n, i) {\r\n    return fromInteger(BigNatModule_coeff(n, i), false, 2);\r\n}\r\n\r\nexport function BigNatModule_setCoeff(n, i, v) {\r\n    n.digits[i] = (v | 0);\r\n}\r\n\r\nexport function BigNatModule_pow64(x_mut, n_mut) {\r\n    BigNatModule_pow64:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return fromBits(1, 0, false);\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = op_Multiply(x, x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_pow64;\r\n        }\r\n        else {\r\n            return op_Multiply(x, BigNatModule_pow64(op_Multiply(x, x), ~(~(n / 2))));\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_pow32(x_mut, n_mut) {\r\n    BigNatModule_pow32:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return 1;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (x * x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_pow32;\r\n        }\r\n        else {\r\n            return (x * BigNatModule_pow32(x * x, ~(~(n / 2)))) | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_hash(n) {\r\n    let res = 0;\r\n    for (let i = 0; i <= (n.bound - 1); i++) {\r\n        res = ((n.digits[i] + (res << 3)) | 0);\r\n    }\r\n    return res | 0;\r\n}\r\n\r\nexport function BigNatModule_maxInt(a, b) {\r\n    if (a < b) {\r\n        return b | 0;\r\n    }\r\n    else {\r\n        return a | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_minInt(a, b) {\r\n    if (a < b) {\r\n        return a | 0;\r\n    }\r\n    else {\r\n        return b | 0;\r\n    }\r\n}\r\n\r\nexport const BigNatModule_baseBits = 24;\r\n\r\nexport const BigNatModule_baseN = 16777216;\r\n\r\nexport const BigNatModule_baseMask = 16777215;\r\n\r\nexport const BigNatModule_baseNi64 = fromBits(16777216, 0, false);\r\n\r\nexport const BigNatModule_baseMaski64 = fromBits(16777215, 0, false);\r\n\r\nexport const BigNatModule_baseMaskU = fromBits(16777215, 0, true);\r\n\r\nexport const BigNatModule_baseMask32A = 16777215;\r\n\r\nexport const BigNatModule_baseMask32B = 255;\r\n\r\nexport const BigNatModule_baseShift32B = 24;\r\n\r\nexport const BigNatModule_baseMask64A = 16777215;\r\n\r\nexport const BigNatModule_baseMask64B = 16777215;\r\n\r\nexport const BigNatModule_baseMask64C = 65535;\r\n\r\nexport const BigNatModule_baseShift64B = 24;\r\n\r\nexport const BigNatModule_baseShift64C = 48;\r\n\r\nexport function BigNatModule_divbase(x) {\r\n    return ~(~((x >>> 0) >>> BigNatModule_baseBits));\r\n}\r\n\r\nexport function BigNatModule_modbase(x) {\r\n    return x & BigNatModule_baseMask;\r\n}\r\n\r\nexport function BigNatModule_createN(b) {\r\n    return new BigNat(b, new Int32Array(b));\r\n}\r\n\r\nexport function BigNatModule_copyN(x) {\r\n    return new BigNat(x.bound, copy(x.digits));\r\n}\r\n\r\nexport function BigNatModule_normN(n) {\r\n    const findLeastBound = (na_mut, i_mut) => {\r\n        findLeastBound:\r\n        while (true) {\r\n            const na = na_mut, i = i_mut;\r\n            if ((i === -1) ? true : (na[i] !== 0)) {\r\n                return (i + 1) | 0;\r\n            }\r\n            else {\r\n                na_mut = na;\r\n                i_mut = (i - 1);\r\n                continue findLeastBound;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const bound = findLeastBound(n.digits, n.bound - 1) | 0;\r\n    n.bound = (bound | 0);\r\n    return n;\r\n}\r\n\r\nexport const BigNatModule_boundInt = 2;\r\n\r\nexport const BigNatModule_boundInt64 = 3;\r\n\r\nexport const BigNatModule_boundBase = 1;\r\n\r\nexport function BigNatModule_embed(x) {\r\n    const x_1 = ((x < 0) ? 0 : x) | 0;\r\n    if (x_1 < BigNatModule_baseN) {\r\n        const r = BigNatModule_createN(1);\r\n        r.digits[0] = (x_1 | 0);\r\n        return BigNatModule_normN(r);\r\n    }\r\n    else {\r\n        const r_1 = BigNatModule_createN(BigNatModule_boundInt);\r\n        for (let i = 0; i <= (BigNatModule_boundInt - 1); i++) {\r\n            r_1.digits[i] = (((~(~(x_1 / BigNatModule_pow32(BigNatModule_baseN, i)))) % BigNatModule_baseN) | 0);\r\n        }\r\n        return BigNatModule_normN(r_1);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_embed64(x) {\r\n    const x_1 = (compare(x, fromBits(0, 0, false)) < 0) ? fromBits(0, 0, false) : x;\r\n    const r = BigNatModule_createN(BigNatModule_boundInt64);\r\n    for (let i = 0; i <= (BigNatModule_boundInt64 - 1); i++) {\r\n        r.digits[i] = ((~(~toInt(op_Modulus(op_Division(x_1, BigNatModule_pow64(BigNatModule_baseNi64, i)), BigNatModule_baseNi64)))) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_eval32(n) {\r\n    if (n.bound === 1) {\r\n        return n.digits[0] | 0;\r\n    }\r\n    else {\r\n        let acc = 0;\r\n        for (let i = n.bound - 1; i >= 0; i--) {\r\n            acc = ((n.digits[i] + (BigNatModule_baseN * acc)) | 0);\r\n        }\r\n        return acc | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_eval64(n) {\r\n    if (n.bound === 1) {\r\n        return fromInteger(n.digits[0], false, 2);\r\n    }\r\n    else {\r\n        let acc = fromBits(0, 0, false);\r\n        for (let i = n.bound - 1; i >= 0; i--) {\r\n            acc = op_Addition(fromInteger(n.digits[i], false, 2), op_Multiply(BigNatModule_baseNi64, acc));\r\n        }\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport const BigNatModule_one = BigNatModule_embed(1);\r\n\r\nexport const BigNatModule_zero = BigNatModule_embed(0);\r\n\r\nexport function BigNatModule_restrictTo(d, n) {\r\n    return new BigNat(BigNatModule_minInt(d, n.bound), n.digits);\r\n}\r\n\r\nexport function BigNatModule_shiftUp(d, n) {\r\n    const m = BigNatModule_createN(n.bound + d);\r\n    for (let i = 0; i <= (n.bound - 1); i++) {\r\n        m.digits[i + d] = (n.digits[i] | 0);\r\n    }\r\n    return m;\r\n}\r\n\r\nexport function BigNatModule_shiftDown(d, n) {\r\n    if ((n.bound - d) <= 0) {\r\n        return BigNatModule_zero;\r\n    }\r\n    else {\r\n        const m = BigNatModule_createN(n.bound - d);\r\n        for (let i = 0; i <= (m.bound - 1); i++) {\r\n            m.digits[i] = (n.digits[i + d] | 0);\r\n        }\r\n        return m;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_degree(n) {\r\n    return n.bound - 1;\r\n}\r\n\r\nexport function BigNatModule_addP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\r\n    let z, i_1, z_1, i_2;\r\n    BigNatModule_addP:\r\n    while (true) {\r\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\r\n        if (i < n) {\r\n            const x = ((((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0))) + ((z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0)))) + c) | 0;\r\n            r.digits[i] = (BigNatModule_modbase(x) | 0);\r\n            i_mut = (i + 1);\r\n            n_mut = n;\r\n            c_mut = BigNatModule_divbase(x);\r\n            p_mut = p;\r\n            q_mut = q;\r\n            r_mut = r;\r\n            continue BigNatModule_addP;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_add(p, q) {\r\n    const rbound = (1 + BigNatModule_maxInt(p.bound, q.bound)) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    BigNatModule_addP(0, rbound, 0, p, q, r);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_subP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\r\n    let z, i_1, z_1, i_2;\r\n    BigNatModule_subP:\r\n    while (true) {\r\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\r\n        if (i < n) {\r\n            const x = ((((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0))) - ((z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0)))) + c) | 0;\r\n            if (x > 0) {\r\n                r.digits[i] = (BigNatModule_modbase(x) | 0);\r\n                i_mut = (i + 1);\r\n                n_mut = n;\r\n                c_mut = BigNatModule_divbase(x);\r\n                p_mut = p;\r\n                q_mut = q;\r\n                r_mut = r;\r\n                continue BigNatModule_subP;\r\n            }\r\n            else {\r\n                const x_1 = (x + BigNatModule_baseN) | 0;\r\n                r.digits[i] = (BigNatModule_modbase(x_1) | 0);\r\n                i_mut = (i + 1);\r\n                n_mut = n;\r\n                c_mut = (BigNatModule_divbase(x_1) - 1);\r\n                p_mut = p;\r\n                q_mut = q;\r\n                r_mut = r;\r\n                continue BigNatModule_subP;\r\n            }\r\n        }\r\n        else {\r\n            return c !== 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_sub(p, q) {\r\n    const rbound = BigNatModule_maxInt(p.bound, q.bound) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    if (BigNatModule_subP(0, rbound, 0, p, q, r)) {\r\n        return BigNatModule_embed(0);\r\n    }\r\n    else {\r\n        return BigNatModule_normN(r);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_isZero(p) {\r\n    return p.bound === 0;\r\n}\r\n\r\nexport function BigNatModule_IsZero(p) {\r\n    return BigNatModule_isZero(p);\r\n}\r\n\r\nexport function BigNatModule_isOne(p) {\r\n    if (p.bound === 1) {\r\n        return p.digits[0] === 1;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_equal(p, q) {\r\n    if (p.bound === q.bound) {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return true;\r\n                }\r\n                else if (pa[i] === qa[i]) {\r\n                    pa_mut = pa;\r\n                    qa_mut = qa;\r\n                    i_mut = (i - 1);\r\n                    continue check;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, p.bound - 1);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_shiftCompare(p, pn, q, qn) {\r\n    if ((p.bound + pn) < (q.bound + qn)) {\r\n        return -1;\r\n    }\r\n    else if ((p.bound + pn) > (q.bound + pn)) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    const pai = ((i < pn) ? 0 : pa[i - pn]) | 0;\r\n                    const qai = ((i < qn) ? 0 : qa[i - qn]) | 0;\r\n                    if (pai === qai) {\r\n                        pa_mut = pa;\r\n                        qa_mut = qa;\r\n                        i_mut = (i - 1);\r\n                        continue check;\r\n                    }\r\n                    else if (pai < qai) {\r\n                        return -1;\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, (p.bound + pn) - 1) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_compare(p, q) {\r\n    if (p.bound < q.bound) {\r\n        return -1;\r\n    }\r\n    else if (p.bound > q.bound) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return 0;\r\n                }\r\n                else if (pa[i] === qa[i]) {\r\n                    pa_mut = pa;\r\n                    qa_mut = qa;\r\n                    i_mut = (i - 1);\r\n                    continue check;\r\n                }\r\n                else if (pa[i] < qa[i]) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, p.bound - 1) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_lt(p, q) {\r\n    return BigNatModule_compare(p, q) === -1;\r\n}\r\n\r\nexport function BigNatModule_gt(p, q) {\r\n    return BigNatModule_compare(p, q) === 1;\r\n}\r\n\r\nexport function BigNatModule_lte(p, q) {\r\n    return BigNatModule_compare(p, q) !== 1;\r\n}\r\n\r\nexport function BigNatModule_gte(p, q) {\r\n    return BigNatModule_compare(p, q) !== -1;\r\n}\r\n\r\nexport function BigNatModule_min(a, b) {\r\n    if (BigNatModule_lt(a, b)) {\r\n        return a;\r\n    }\r\n    else {\r\n        return b;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_max(a, b) {\r\n    if (BigNatModule_lt(a, b)) {\r\n        return b;\r\n    }\r\n    else {\r\n        return a;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_contributeArr(a_mut, i_mut, c_mut) {\r\n    BigNatModule_contributeArr:\r\n    while (true) {\r\n        const a = a_mut, i = i_mut, c = c_mut;\r\n        const x = op_Addition(fromInteger(a[i], false, 2), c);\r\n        const c_1 = op_Division(x, BigNatModule_baseNi64);\r\n        const x_3 = (~(~toInt(op_BitwiseAnd(x, BigNatModule_baseMaski64)))) | 0;\r\n        a[i] = (x_3 | 0);\r\n        if (compare(c_1, fromBits(0, 0, false)) > 0) {\r\n            a_mut = a;\r\n            i_mut = (i + 1);\r\n            c_mut = c_1;\r\n            continue BigNatModule_contributeArr;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_scale(k, p) {\r\n    const r = BigNatModule_createN(p.bound + BigNatModule_boundInt);\r\n    const k_1 = fromInteger(k, false, 2);\r\n    for (let i = 0; i <= (p.bound - 1); i++) {\r\n        BigNatModule_contributeArr(r.digits, i, op_Multiply(k_1, fromInteger(p.digits[i], false, 2)));\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookBothSmall(p, q) {\r\n    const r = BigNatModule_createN(2);\r\n    const rak = op_Multiply(fromInteger(p, false, 2), fromInteger(q, false, 2));\r\n    BigNatModule_setCoeff(r, 0, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n    BigNatModule_setCoeff(r, 1, ~(~toInt(op_Division(rak, BigNatModule_baseNi64))));\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookCarry(r_mut, c_mut, k_mut) {\r\n    BigNatModule_mulSchoolBookCarry:\r\n    while (true) {\r\n        const r = r_mut, c = c_mut, k = k_mut;\r\n        if (compare(c, fromBits(0, 0, false)) > 0) {\r\n            const rak = op_Addition(BigNatModule_coeff64(r, k), c);\r\n            BigNatModule_setCoeff(r, k, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n            r_mut = r;\r\n            c_mut = op_Division(rak, BigNatModule_baseNi64);\r\n            k_mut = (k + 1);\r\n            continue BigNatModule_mulSchoolBookCarry;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookOneSmall(p, q) {\r\n    const bp = BigNatModule_bound(p) | 0;\r\n    const r = BigNatModule_createN(bp + 1);\r\n    const q_1 = fromInteger(q, false, 2);\r\n    let c = fromBits(0, 0, false);\r\n    for (let i = 0; i <= (bp - 1); i++) {\r\n        const rak = op_Addition(op_Addition(c, BigNatModule_coeff64(r, i)), op_Multiply(BigNatModule_coeff64(p, i), q_1));\r\n        BigNatModule_setCoeff(r, i, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n        c = op_Division(rak, BigNatModule_baseNi64);\r\n    }\r\n    BigNatModule_mulSchoolBookCarry(r, c, bp);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookNeitherSmall(p, q) {\r\n    const r = BigNatModule_createN(p.bound + q.bound);\r\n    const ra = r.digits;\r\n    for (let i = 0; i <= (p.bound - 1); i++) {\r\n        const pai = fromInteger(p.digits[i], false, 2);\r\n        let c = fromBits(0, 0, false);\r\n        let k = i;\r\n        for (let j = 0; j <= (q.bound - 1); j++) {\r\n            const qaj = fromInteger(q.digits[j], false, 2);\r\n            const rak = op_Addition(op_Addition(fromInteger(ra[k], false, 2), c), op_Multiply(pai, qaj));\r\n            ra[k] = ((~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64)))) | 0);\r\n            c = op_Division(rak, BigNatModule_baseNi64);\r\n            k = ((k + 1) | 0);\r\n        }\r\n        BigNatModule_mulSchoolBookCarry(r, c, k);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBook(p, q) {\r\n    const pSmall = BigNatModule_bound(p) === 1;\r\n    const qSmall = BigNatModule_bound(q) === 1;\r\n    if (pSmall && qSmall) {\r\n        return BigNatModule_mulSchoolBookBothSmall(BigNatModule_coeff(p, 0), BigNatModule_coeff(q, 0));\r\n    }\r\n    else if (pSmall) {\r\n        return BigNatModule_mulSchoolBookOneSmall(q, BigNatModule_coeff(p, 0));\r\n    }\r\n    else if (qSmall) {\r\n        return BigNatModule_mulSchoolBookOneSmall(p, BigNatModule_coeff(q, 0));\r\n    }\r\n    else {\r\n        return BigNatModule_mulSchoolBookNeitherSmall(p, q);\r\n    }\r\n}\r\n\r\nexport class BigNatModule_encoding extends Record {\r\n    constructor(bigL, twoToBigL, k, bigK, bigN, split, splits) {\r\n        super();\r\n        this.bigL = (bigL | 0);\r\n        this.twoToBigL = (twoToBigL | 0);\r\n        this.k = (k | 0);\r\n        this.bigK = (bigK | 0);\r\n        this.bigN = (bigN | 0);\r\n        this.split = (split | 0);\r\n        this.splits = splits;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_encoding$reflection() {\r\n    return record_type(\"BigInt.BigNatModule.encoding\", [], BigNatModule_encoding, () => [[\"bigL\", int32_type], [\"twoToBigL\", int32_type], [\"k\", int32_type], [\"bigK\", int32_type], [\"bigN\", int32_type], [\"split\", int32_type], [\"splits\", array_type(int32_type)]]);\r\n}\r\n\r\nexport function BigNatModule_mkEncoding(bigL, k, bigK, bigN) {\r\n    return new BigNatModule_encoding(bigL, BigNatModule_pow32(2, bigL), k, bigK, bigN, ~(~(BigNatModule_baseBits / bigL)), initialize(~(~(BigNatModule_baseBits / bigL)), (i) => BigNatModule_pow32(2, bigL * i), Int32Array));\r\n}\r\n\r\nexport const BigNatModule_table = [BigNatModule_mkEncoding(1, 28, 268435456, 268435456), BigNatModule_mkEncoding(2, 26, 67108864, 134217728), BigNatModule_mkEncoding(3, 24, 16777216, 50331648), BigNatModule_mkEncoding(4, 22, 4194304, 16777216), BigNatModule_mkEncoding(5, 20, 1048576, 5242880), BigNatModule_mkEncoding(6, 18, 262144, 1572864), BigNatModule_mkEncoding(7, 16, 65536, 458752), BigNatModule_mkEncoding(8, 14, 16384, 131072), BigNatModule_mkEncoding(9, 12, 4096, 36864), BigNatModule_mkEncoding(10, 10, 1024, 10240), BigNatModule_mkEncoding(11, 8, 256, 2816), BigNatModule_mkEncoding(12, 6, 64, 768), BigNatModule_mkEncoding(13, 4, 16, 208)];\r\n\r\nexport function BigNatModule_calculateTableTow(bigL) {\r\n    const k = (BigNatModule_FFT_maxBitsInsideFp - (2 * bigL)) | 0;\r\n    const bigK = BigNatModule_pow64(fromBits(2, 0, false), k);\r\n    return [bigL, k, bigK, op_Multiply(bigK, fromInteger(bigL, false, 2))];\r\n}\r\n\r\nexport function BigNatModule_encodingGivenResultBits(bitsRes) {\r\n    const selectFrom = (i_mut) => {\r\n        selectFrom:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (((i + 1) < BigNatModule_table.length) && (bitsRes < BigNatModule_table[i + 1].bigN)) {\r\n                i_mut = (i + 1);\r\n                continue selectFrom;\r\n            }\r\n            else {\r\n                return BigNatModule_table[i];\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (bitsRes >= BigNatModule_table[0].bigN) {\r\n        throw (new Error(\"Product is huge, around 268435456 bits, beyond quickmul\"));\r\n    }\r\n    else {\r\n        return selectFrom(0);\r\n    }\r\n}\r\n\r\nexport const BigNatModule_bitmask = initialize(BigNatModule_baseBits, (i) => (BigNatModule_pow32(2, i) - 1), Int32Array);\r\n\r\nexport const BigNatModule_twopowers = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow32(2, i), Int32Array);\r\n\r\nexport const BigNatModule_twopowersI64 = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow64(fromBits(2, 0, false), i));\r\n\r\nexport function BigNatModule_wordBits(word) {\r\n    const hi = (k_mut) => {\r\n        hi:\r\n        while (true) {\r\n            const k = k_mut;\r\n            if (k === 0) {\r\n                return 0;\r\n            }\r\n            else if ((word & BigNatModule_twopowers[k - 1]) !== 0) {\r\n                return k | 0;\r\n            }\r\n            else {\r\n                k_mut = (k - 1);\r\n                continue hi;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return hi(BigNatModule_baseBits) | 0;\r\n}\r\n\r\nexport function BigNatModule_bits(u) {\r\n    if (u.bound === 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return ((BigNatModule_degree(u) * BigNatModule_baseBits) + BigNatModule_wordBits(u.digits[BigNatModule_degree(u)])) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_extractBits(n, enc, bi) {\r\n    let z, i, z_1, i_1, z_2, i_2;\r\n    const biw = (~(~(bi / BigNatModule_baseBits))) | 0;\r\n    const bjw = (~(~(((bi + enc.bigL) - 1) / BigNatModule_baseBits))) | 0;\r\n    if (biw !== bjw) {\r\n        const xbit = (bi % BigNatModule_baseBits) | 0;\r\n        return (((((z = n, (i = (biw | 0), (i < z.bound) ? z.digits[i] : 0))) >> xbit) | (((z_1 = n, (i_1 = (bjw | 0), (i_1 < z_1.bound) ? z_1.digits[i_1] : 0))) << (BigNatModule_baseBits - xbit))) & BigNatModule_bitmask[enc.bigL]) | 0;\r\n    }\r\n    else {\r\n        return ((((z_2 = n, (i_2 = (biw | 0), (i_2 < z_2.bound) ? z_2.digits[i_2] : 0))) >> (bi % BigNatModule_baseBits)) & BigNatModule_bitmask[enc.bigL]) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_encodePoly(enc, n) {\r\n    const poly = fill(new Uint32Array(enc.bigK), 0, enc.bigK, BigNatModule_FFT_Fp_ofInt32(0));\r\n    const biMax = (n.bound * BigNatModule_baseBits) | 0;\r\n    const encoder = (i_mut, bi_mut) => {\r\n        encoder:\r\n        while (true) {\r\n            const i = i_mut, bi = bi_mut;\r\n            if ((i === enc.bigK) ? true : (bi > biMax)) {\r\n            }\r\n            else {\r\n                const pi = BigNatModule_extractBits(n, enc, bi) | 0;\r\n                poly[i] = BigNatModule_FFT_Fp_ofInt32(pi);\r\n                i_mut = (i + 1);\r\n                bi_mut = (bi + enc.bigL);\r\n                continue encoder;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    encoder(0, 0);\r\n    return poly;\r\n}\r\n\r\nexport function BigNatModule_decodeResultBits(enc, poly) {\r\n    let n = 0;\r\n    for (let i = 0; i <= (poly.length - 1); i++) {\r\n        if (poly[i] !== BigNatModule_FFT_mzero) {\r\n            n = (i | 0);\r\n        }\r\n    }\r\n    return (((BigNatModule_FFT_maxBitsInsideFp + (enc.bigL * n)) + 1) + 1) | 0;\r\n}\r\n\r\nexport function BigNatModule_decodePoly(enc, poly) {\r\n    const rbound = ((~(~(BigNatModule_decodeResultBits(enc, poly) / BigNatModule_baseBits))) + 1) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    const evaluate = (i_mut, j_mut, d_mut) => {\r\n        evaluate:\r\n        while (true) {\r\n            const i = i_mut, j = j_mut, d = d_mut;\r\n            if (i === enc.bigK) {\r\n            }\r\n            else {\r\n                if (j >= rbound) {\r\n                }\r\n                else {\r\n                    BigNatModule_contributeArr(r.digits, j, op_Multiply(fromInteger(BigNatModule_FFT_Fp_toInt(poly[i]), false, 2), BigNatModule_twopowersI64[d]));\r\n                }\r\n                const d_1 = (d + enc.bigL) | 0;\r\n                const patternInput = (d_1 >= BigNatModule_baseBits) ? [j + 1, d_1 - BigNatModule_baseBits] : [j, d_1];\r\n                i_mut = (i + 1);\r\n                j_mut = patternInput[0];\r\n                d_mut = patternInput[1];\r\n                continue evaluate;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    evaluate(0, 0, 0);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_quickMulUsingFft(u, v) {\r\n    const enc = BigNatModule_encodingGivenResultBits(BigNatModule_bits(u) + BigNatModule_bits(v));\r\n    return BigNatModule_normN(BigNatModule_decodePoly(enc, BigNatModule_FFT_computeFftPaddedPolynomialProduct(enc.bigK, enc.k, BigNatModule_encodePoly(enc, u), BigNatModule_encodePoly(enc, v))));\r\n}\r\n\r\nexport const BigNatModule_minDigitsKaratsuba = 16;\r\n\r\nexport function BigNatModule_recMulKaratsuba(mul, p, q) {\r\n    const bmax = BigNatModule_maxInt(p.bound, q.bound) | 0;\r\n    if (bmax > BigNatModule_minDigitsKaratsuba) {\r\n        const k = (~(~(bmax / 2))) | 0;\r\n        const a0 = BigNatModule_restrictTo(k, p);\r\n        const a1 = BigNatModule_shiftDown(k, p);\r\n        const b0 = BigNatModule_restrictTo(k, q);\r\n        const b1 = BigNatModule_shiftDown(k, q);\r\n        const q0 = mul(a0, b0);\r\n        const q1 = mul(BigNatModule_add(a0, a1), BigNatModule_add(b0, b1));\r\n        const q2 = mul(a1, b1);\r\n        return BigNatModule_add(q0, BigNatModule_shiftUp(k, BigNatModule_add(BigNatModule_sub(q1, BigNatModule_add(q0, q2)), BigNatModule_shiftUp(k, q2))));\r\n    }\r\n    else {\r\n        return BigNatModule_mulSchoolBook(p, q);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_mulKaratsuba(x, y) {\r\n    return BigNatModule_recMulKaratsuba(BigNatModule_mulKaratsuba, x, y);\r\n}\r\n\r\nexport const BigNatModule_productDigitsUpperSchoolBook = ~(~(64000 / BigNatModule_baseBits));\r\n\r\nexport const BigNatModule_singleDigitForceSchoolBook = ~(~(32000 / BigNatModule_baseBits));\r\n\r\nexport const BigNatModule_productDigitsUpperFft = ~(~(BigNatModule_table[0].bigN / BigNatModule_baseBits));\r\n\r\nexport function BigNatModule_mul(p, q) {\r\n    return BigNatModule_mulSchoolBook(p, q);\r\n}\r\n\r\nexport function BigNatModule_scaleSubInPlace(x, f, a, n) {\r\n    const patternInput = [x.digits, BigNatModule_degree(x)];\r\n    const x_1 = patternInput[0];\r\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\r\n    const ad = patternInput_1[1] | 0;\r\n    const a_1 = patternInput_1[0];\r\n    const f_1 = fromInteger(f, false, 2);\r\n    let j = 0;\r\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\r\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\r\n        if (j > patternInput[1]) {\r\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\r\n        }\r\n        let zLo = ~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)));\r\n        let zHi = op_Division(z, BigNatModule_baseNi64);\r\n        if (zLo <= x_1[j + n]) {\r\n            x_1[j + n] = ((x_1[j + n] - zLo) | 0);\r\n        }\r\n        else {\r\n            x_1[j + n] = ((x_1[j + n] + (BigNatModule_baseN - zLo)) | 0);\r\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\r\n        }\r\n        if (j < ad) {\r\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\r\n        }\r\n        else {\r\n            z = zHi;\r\n        }\r\n        j = ((j + 1) | 0);\r\n    }\r\n    BigNatModule_normN(x);\r\n}\r\n\r\nexport function BigNatModule_scaleSub(x, f, a, n) {\r\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\r\n    BigNatModule_scaleSubInPlace(freshx, f, a, n);\r\n    return BigNatModule_normN(freshx);\r\n}\r\n\r\nexport function BigNatModule_scaleAddInPlace(x, f, a, n) {\r\n    const patternInput = [x.digits, BigNatModule_degree(x)];\r\n    const x_1 = patternInput[0];\r\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\r\n    const ad = patternInput_1[1] | 0;\r\n    const a_1 = patternInput_1[0];\r\n    const f_1 = fromInteger(f, false, 2);\r\n    let j = 0;\r\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\r\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\r\n        if (j > patternInput[1]) {\r\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\r\n        }\r\n        let zLo = ~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)));\r\n        let zHi = op_Division(z, BigNatModule_baseNi64);\r\n        if (zLo < (BigNatModule_baseN - x_1[j + n])) {\r\n            x_1[j + n] = ((x_1[j + n] + zLo) | 0);\r\n        }\r\n        else {\r\n            x_1[j + n] = ((zLo - (BigNatModule_baseN - x_1[j + n])) | 0);\r\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\r\n        }\r\n        if (j < ad) {\r\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\r\n        }\r\n        else {\r\n            z = zHi;\r\n        }\r\n        j = ((j + 1) | 0);\r\n    }\r\n    BigNatModule_normN(x);\r\n}\r\n\r\nexport function BigNatModule_scaleAdd(x, f, a, n) {\r\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\r\n    BigNatModule_scaleAddInPlace(freshx, f, a, n);\r\n    return BigNatModule_normN(freshx);\r\n}\r\n\r\nexport function BigNatModule_removeFactor(x, a, n) {\r\n    const patternInput = [BigNatModule_degree(a), BigNatModule_degree(x)];\r\n    const degx = patternInput[1] | 0;\r\n    const dega = patternInput[0] | 0;\r\n    if (degx < (dega + n)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        const patternInput_1 = [a.digits, x.digits];\r\n        const xa = patternInput_1[1];\r\n        const aa = patternInput_1[0];\r\n        const f = ((dega === 0) ? ((degx === n) ? (~(~(xa[n] / aa[0]))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), fromInteger(aa[0], false, 2)))))) : ((degx === (dega + n)) ? (~(~(xa[degx] / (aa[dega] + 1)))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), op_Addition(fromInteger(aa[dega], false, 2), fromBits(1, 0, false)))))))) | 0;\r\n        if (f === 0) {\r\n            if (BigNatModule_shiftCompare(a, n, x, 0) !== 1) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        else {\r\n            return f | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_divmod(b, a) {\r\n    if (BigNatModule_isZero(a)) {\r\n        throw (new Error());\r\n    }\r\n    else if (BigNatModule_degree(b) < BigNatModule_degree(a)) {\r\n        return [BigNatModule_zero, b];\r\n    }\r\n    else {\r\n        const x = BigNatModule_copyN(b);\r\n        const d = BigNatModule_createN(((BigNatModule_degree(b) - BigNatModule_degree(a)) + 1) + 1);\r\n        let p = BigNatModule_degree(b);\r\n        const m = BigNatModule_degree(a) | 0;\r\n        let n = p - m;\r\n        const Invariant = (tupledArg) => {\r\n        };\r\n        let finished = false;\r\n        while (!finished) {\r\n            Invariant([d, x, n, p]);\r\n            const f = BigNatModule_removeFactor(x, a, n) | 0;\r\n            if (f > 0) {\r\n                BigNatModule_scaleSubInPlace(x, f, a, n);\r\n                BigNatModule_scaleAddInPlace(d, f, BigNatModule_one, n);\r\n                Invariant([d, x, n, p]);\r\n            }\r\n            else {\r\n                finished = ((f === 0) && (n === 0));\r\n                if (!finished) {\r\n                    if (p === (m + n)) {\r\n                        Invariant([d, x, n - 1, p]);\r\n                        n = ((n - 1) | 0);\r\n                    }\r\n                    else {\r\n                        Invariant([d, x, n - 1, p - 1]);\r\n                        n = ((n - 1) | 0);\r\n                        p = ((p - 1) | 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [BigNatModule_normN(d), BigNatModule_normN(x)];\r\n    }\r\n}\r\n\r\nexport function BigNatModule_div(b, a) {\r\n    return BigNatModule_divmod(b, a)[0];\r\n}\r\n\r\nexport function BigNatModule_rem(b, a) {\r\n    return BigNatModule_divmod(b, a)[1];\r\n}\r\n\r\nexport function BigNatModule_bitAnd(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_minInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (r.bound - 1); i++) {\r\n        r.digits[i] = ((a.digits[i] & b.digits[i]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_bitOr(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (a.bound - 1); i++) {\r\n        r.digits[i] = ((r.digits[i] | a.digits[i]) | 0);\r\n    }\r\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\r\n        r.digits[i_1] = ((r.digits[i_1] | b.digits[i_1]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_bitXor(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (a.bound - 1); i++) {\r\n        r.digits[i] = ((r.digits[i] ^ a.digits[i]) | 0);\r\n    }\r\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\r\n        r.digits[i_1] = ((r.digits[i_1] ^ b.digits[i_1]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_hcf(a, b) {\r\n    const hcfloop = (a_1_mut, b_1_mut) => {\r\n        hcfloop:\r\n        while (true) {\r\n            const a_1 = a_1_mut, b_1 = b_1_mut;\r\n            if (BigNatModule_equal(BigNatModule_zero, a_1)) {\r\n                return b_1;\r\n            }\r\n            else {\r\n                a_1_mut = BigNatModule_divmod(b_1, a_1)[1];\r\n                b_1_mut = a_1;\r\n                continue hcfloop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (BigNatModule_lt(a, b)) {\r\n        return hcfloop(a, b);\r\n    }\r\n    else {\r\n        return hcfloop(b, a);\r\n    }\r\n}\r\n\r\nexport const BigNatModule_two = BigNatModule_embed(2);\r\n\r\nexport function BigNatModule_powi(x, n) {\r\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\r\n        power:\r\n        while (true) {\r\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\r\n            if (n_1 === 0) {\r\n                return acc;\r\n            }\r\n            else if ((n_1 % 2) === 0) {\r\n                acc_mut = acc;\r\n                x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                n_1_mut = (~(~(n_1 / 2)));\r\n                continue power;\r\n            }\r\n            else {\r\n                acc_mut = BigNatModule_mul(x_1, acc);\r\n                x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                n_1_mut = (~(~(n_1 / 2)));\r\n                continue power;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return power(BigNatModule_one, x, n);\r\n}\r\n\r\nexport function BigNatModule_pow(x, n) {\r\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\r\n        power:\r\n        while (true) {\r\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\r\n            if (BigNatModule_isZero(n_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                const patternInput = BigNatModule_divmod(n_1, BigNatModule_two);\r\n                const ndiv2 = patternInput[0];\r\n                if (BigNatModule_isZero(patternInput[1])) {\r\n                    acc_mut = acc;\r\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                    n_1_mut = ndiv2;\r\n                    continue power;\r\n                }\r\n                else {\r\n                    acc_mut = BigNatModule_mul(x_1, acc);\r\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                    n_1_mut = ndiv2;\r\n                    continue power;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return power(BigNatModule_one, x, n);\r\n}\r\n\r\nexport function BigNatModule_toFloat(n) {\r\n    const evalFloat = (acc_mut, k_mut, i_mut) => {\r\n        evalFloat:\r\n        while (true) {\r\n            const acc = acc_mut, k = k_mut, i = i_mut;\r\n            if (i === n.bound) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = (acc + (k * n.digits[i]));\r\n                k_mut = (k * BigNatModule_baseN);\r\n                i_mut = (i + 1);\r\n                continue evalFloat;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return evalFloat(0, 1, 0);\r\n}\r\n\r\nexport function BigNatModule_ofInt32(n) {\r\n    return BigNatModule_embed(n);\r\n}\r\n\r\nexport function BigNatModule_ofInt64(n) {\r\n    return BigNatModule_embed64(n);\r\n}\r\n\r\nexport function BigNatModule_toUInt32(n) {\r\n    const matchValue = n.bound | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return 0;\r\n        }\r\n        case 1: {\r\n            const value = n.digits[0] | 0;\r\n            return value >>> 0;\r\n        }\r\n        case 2: {\r\n            const patternInput = [n.digits[0], n.digits[1]];\r\n            const xB = patternInput[1] | 0;\r\n            if (xB > BigNatModule_baseMask32B) {\r\n                throw (new Error());\r\n            }\r\n            return ((patternInput[0] & BigNatModule_baseMask32A) >>> 0) + ((((xB & BigNatModule_baseMask32B) >>> 0) << BigNatModule_baseShift32B) >>> 0);\r\n        }\r\n        default: {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_toUInt64(n) {\r\n    const matchValue = n.bound | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return fromBits(0, 0, true);\r\n        }\r\n        case 1: {\r\n            return fromInteger(n.digits[0], true, 2);\r\n        }\r\n        case 2: {\r\n            const patternInput = [n.digits[0], n.digits[1]];\r\n            return op_Addition(fromInteger(patternInput[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B));\r\n        }\r\n        case 3: {\r\n            const patternInput_1 = [n.digits[0], n.digits[1], n.digits[2]];\r\n            const xC = patternInput_1[2] | 0;\r\n            if (xC > BigNatModule_baseMask64C) {\r\n                throw (new Error());\r\n            }\r\n            return op_Addition(op_Addition(fromInteger(patternInput_1[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput_1[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B)), op_LeftShift(fromInteger(xC & BigNatModule_baseMask64C, true, 2), BigNatModule_baseShift64C));\r\n        }\r\n        default: {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_toString(n) {\r\n    const degn = BigNatModule_degree(n) | 0;\r\n    const route = (prior_mut, k_mut, ten2k_mut) => {\r\n        route:\r\n        while (true) {\r\n            const prior = prior_mut, k = k_mut, ten2k = ten2k_mut;\r\n            if (BigNatModule_degree(ten2k) > degn) {\r\n                return cons([k, ten2k], prior);\r\n            }\r\n            else {\r\n                prior_mut = cons([k, ten2k], prior);\r\n                k_mut = (k + 1);\r\n                ten2k_mut = BigNatModule_mul(ten2k, ten2k);\r\n                continue route;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const collect = (isLeading_mut, digits_mut, n_1_mut, _arg1_mut) => {\r\n        collect:\r\n        while (true) {\r\n            const isLeading = isLeading_mut, digits = digits_mut, n_1 = n_1_mut, _arg1 = _arg1_mut;\r\n            if (!isEmpty(_arg1)) {\r\n                const prior_1 = tail(_arg1);\r\n                const patternInput = BigNatModule_divmod(n_1, head(_arg1)[1]);\r\n                const nL = patternInput[1];\r\n                const nH = patternInput[0];\r\n                if (isLeading && BigNatModule_isZero(nH)) {\r\n                    isLeading_mut = isLeading;\r\n                    digits_mut = digits;\r\n                    n_1_mut = nL;\r\n                    _arg1_mut = prior_1;\r\n                    continue collect;\r\n                }\r\n                else {\r\n                    isLeading_mut = isLeading;\r\n                    digits_mut = collect(false, digits, nL, prior_1);\r\n                    n_1_mut = nH;\r\n                    _arg1_mut = prior_1;\r\n                    continue collect;\r\n                }\r\n            }\r\n            else {\r\n                const n_2 = BigNatModule_eval32(n_1) | 0;\r\n                if (isLeading && (n_2 === 0)) {\r\n                    return digits;\r\n                }\r\n                else {\r\n                    return cons(int32ToString(n_2), digits);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const digits_4 = collect(true, empty(), n, route(empty(), 0, BigNatModule_embed(10)));\r\n    if (isEmpty(digits_4)) {\r\n        return \"0\";\r\n    }\r\n    else {\r\n        return join(\"\", toArray(digits_4));\r\n    }\r\n}\r\n\r\nexport function BigNatModule_ofString(str) {\r\n    const len = str.length | 0;\r\n    if (isNullOrEmpty(str)) {\r\n        throw (new Error(\"empty string\\\\nParameter name: str\"));\r\n    }\r\n    const ten = BigNatModule_embed(10);\r\n    const build = (acc_mut, i_mut) => {\r\n        build:\r\n        while (true) {\r\n            const acc = acc_mut, i = i_mut;\r\n            if (i === len) {\r\n                return acc;\r\n            }\r\n            else {\r\n                const c = str[i];\r\n                const d = (c.charCodeAt(0) - 48) | 0;\r\n                if ((0 <= d) && (d <= 9)) {\r\n                    acc_mut = BigNatModule_add(BigNatModule_mul(ten, acc), BigNatModule_embed(d));\r\n                    i_mut = (i + 1);\r\n                    continue build;\r\n                }\r\n                else {\r\n                    throw (new Error());\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return build(BigNatModule_embed(0), 0);\r\n}\r\n\r\nexport function BigNatModule_isSmall(n) {\r\n    return n.bound <= 1;\r\n}\r\n\r\nexport function BigNatModule_getSmall(n) {\r\n    const z = n;\r\n    const i = 0;\r\n    if (i < z.bound) {\r\n        return z.digits[i] | 0;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_factorial(n) {\r\n    const productR = (a, b) => {\r\n        if (BigNatModule_equal(a, b)) {\r\n            return a;\r\n        }\r\n        else {\r\n            const m = BigNatModule_div(BigNatModule_add(a, b), BigNatModule_ofInt32(2));\r\n            return BigNatModule_mul(productR(a, m), productR(BigNatModule_add(m, BigNatModule_one), b));\r\n        }\r\n    };\r\n    return productR(BigNatModule_one, n);\r\n}\r\n\r\n","import { BigNatModule_factorial, BigNatModule_ofString, BigNatModule_toFloat, BigNatModule_toUInt64, BigNatModule_toUInt32, BigNatModule_pow, BigNatModule_two, BigNatModule_rem, BigNatModule_lte, BigNatModule_hcf, BigNatModule_bitXor, BigNatModule_bitOr, BigNatModule_bitAnd, BigNatModule_divmod, BigNatModule_mul, BigNatModule_isOne, BigNatModule_sub, BigNatModule_gte, BigNatModule_scale, BigNatModule_one, BigNatModule_add, BigNatModule_ofInt64, BigNatModule_hash, BigNatModule_gt, BigNatModule_lt, BigNatModule_equal, BigNatModule_getSmall, BigNatModule_isSmall, BigNatModule_ofInt32, BigNatModule_toString, BigNatModule_isZero } from \"./n.js\";\r\nimport { Record, toString } from \"../Types.js\";\r\nimport { class_type } from \"../Reflection.js\";\r\nimport { initialize } from \"../Array.js\";\r\nimport { op_Addition, op_Multiply, fromValue, equals, fromBits, compare, fromInteger, op_UnaryNegation } from \"../Long.js\";\r\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\r\nimport Decimal from \"../Decimal.js\";\r\n\r\nexport class BigInteger extends Record {\r\n    constructor(signInt, v) {\r\n        super();\r\n        this.signInt = (signInt | 0);\r\n        this.v = v;\r\n    }\r\n    toString() {\r\n        const x = this;\r\n        const matchValue = BigInteger__get_SignInt(x) | 0;\r\n        switch (matchValue) {\r\n            case -1: {\r\n                return BigNatModule_isZero(BigInteger__get_V(x)) ? \"0\" : (\"-\" + BigNatModule_toString(BigInteger__get_V(x)));\r\n            }\r\n            case 0: {\r\n                return \"0\";\r\n            }\r\n            case 1: {\r\n                return BigNatModule_toString(BigInteger__get_V(x));\r\n            }\r\n            default: {\r\n                throw (new Error(\"signs should be +/- 1 or 0\"));\r\n            }\r\n        }\r\n    }\r\n    Equals(obj) {\r\n        const this$ = this;\r\n        return (obj instanceof BigInteger) && BigInteger_op_Equality_56F059C0(this$, obj);\r\n    }\r\n    GetHashCode() {\r\n        const x = this;\r\n        return BigInteger_hash_Z665282C2(x) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return toString(this$);\r\n    }\r\n    CompareTo(obj) {\r\n        const this$ = this;\r\n        if (obj instanceof BigInteger) {\r\n            return BigInteger_compare_56F059C0(this$, obj) | 0;\r\n        }\r\n        else {\r\n            throw (new Error(\"the objects are not comparable\\\\nParameter name: obj\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger$reflection() {\r\n    return class_type(\"BigInt.BigInteger\", void 0, BigInteger, class_type(\"System.ValueType\"));\r\n}\r\n\r\nexport function BigInteger_$ctor_Z2BE94A1(signInt, v) {\r\n    return new BigInteger(signInt, v);\r\n}\r\n\r\n(() => {\r\n    BigInteger.smallLim = 4096;\r\n    BigInteger.smallPosTab = initialize(BigInteger.smallLim, BigNatModule_ofInt32);\r\n    BigInteger.one = BigInteger_$ctor_Z524259A4(1);\r\n    BigInteger.two = BigInteger_$ctor_Z524259A4(2);\r\n    BigInteger.zero = BigInteger_$ctor_Z524259A4(0);\r\n})();\r\n\r\nexport function BigInteger_nat_Z67CCE57D(n) {\r\n    if (BigNatModule_isSmall(n) && (BigNatModule_getSmall(n) < BigInteger.smallLim)) {\r\n        return BigInteger.smallPosTab[BigNatModule_getSmall(n)];\r\n    }\r\n    else {\r\n        return n;\r\n    }\r\n}\r\n\r\nexport function BigInteger_create_Z2BE94A1(s, n) {\r\n    return BigInteger_$ctor_Z2BE94A1(s, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger_posn_Z67CCE57D(n) {\r\n    return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger_negn_Z67CCE57D(n) {\r\n    return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger__get_Sign(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return x.signInt | 0;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_SignInt(x) {\r\n    return x.signInt;\r\n}\r\n\r\nexport function BigInteger__get_V(x) {\r\n    return x.v;\r\n}\r\n\r\nexport function BigInteger_op_Equality_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 2: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 3: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 6: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 7: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 8: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Inequality_56F059C0(x, y) {\r\n    return !BigInteger_op_Equality_56F059C0(x, y);\r\n}\r\n\r\nexport function BigInteger_op_LessThan_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_lt(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_lt(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            return false;\r\n        }\r\n        case 3: {\r\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return true;\r\n            }\r\n            else {\r\n                return !BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n        }\r\n        case 4: {\r\n            return false;\r\n        }\r\n        case 5: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 6: {\r\n            return false;\r\n        }\r\n        case 7: {\r\n            return false;\r\n        }\r\n        case 8: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_GreaterThan_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_gt(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_gt(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return true;\r\n            }\r\n            else {\r\n                return !BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n        }\r\n        case 3: {\r\n            return false;\r\n        }\r\n        case 4: {\r\n            return false;\r\n        }\r\n        case 5: {\r\n            return false;\r\n        }\r\n        case 6: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 7: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 8: {\r\n            return false;\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_compare_56F059C0(n, nn) {\r\n    if (BigInteger_op_LessThan_56F059C0(n, nn)) {\r\n        return -1;\r\n    }\r\n    else if (BigInteger_op_Equality_56F059C0(n, nn)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nexport function BigInteger_hash_Z665282C2(z) {\r\n    if (BigInteger__get_SignInt(z) === 0) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return (BigInteger__get_SignInt(z) + BigNatModule_hash(BigInteger__get_V(z))) | 0;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_StructuredDisplayString(x) {\r\n    return toString(x);\r\n}\r\n\r\nexport function BigInteger_$ctor_Z524259A4(n) {\r\n    if (n >= 0) {\r\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(n)));\r\n    }\r\n    else if (n === -2147483648) {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(fromInteger(n, false, 2)))));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(op_UnaryNegation_Int32(n))));\r\n    }\r\n}\r\n\r\nexport function BigInteger_$ctor_Z524259C1(n) {\r\n    if (compare(n, fromBits(0, 0, false)) >= 0) {\r\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(n)));\r\n    }\r\n    else if (equals(n, fromBits(0, 2147483648, false))) {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_add(BigNatModule_ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule_one)));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(n))));\r\n    }\r\n}\r\n\r\nexport function BigInteger_get_One() {\r\n    return BigInteger.one;\r\n}\r\n\r\nexport function BigInteger_get_Two() {\r\n    return BigInteger.two;\r\n}\r\n\r\nexport function BigInteger_get_Zero() {\r\n    return BigInteger.zero;\r\n}\r\n\r\nexport function BigInteger_op_UnaryNegation_Z665282C2(z) {\r\n    const matchValue = BigInteger__get_SignInt(z) | 0;\r\n    if (matchValue === 0) {\r\n        return BigInteger_get_Zero();\r\n    }\r\n    else {\r\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(matchValue), BigInteger__get_V(z));\r\n    }\r\n}\r\n\r\nexport function BigInteger_Scale_Z320F31E(k, z) {\r\n    if (BigInteger__get_SignInt(z) === 0) {\r\n        return BigInteger_get_Zero();\r\n    }\r\n    else if (k < 0) {\r\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(BigInteger__get_SignInt(z)), BigNatModule_scale(op_UnaryNegation_Int32(k), BigInteger__get_V(z)));\r\n    }\r\n    else {\r\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(z), BigNatModule_scale(k, BigInteger__get_V(z)));\r\n    }\r\n}\r\n\r\nexport function BigInteger_subnn_6A57060(nx, ny) {\r\n    if (BigNatModule_gte(nx, ny)) {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_sub(nx, ny));\r\n    }\r\n    else {\r\n        return BigInteger_negn_Z67CCE57D(BigNatModule_sub(ny, nx));\r\n    }\r\n}\r\n\r\nexport function BigInteger_addnn_6A57060(nx, ny) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_add(nx, ny));\r\n}\r\n\r\nexport function BigInteger__get_IsZero(x) {\r\n    if (BigInteger__get_SignInt(x) === 0) {\r\n        return true;\r\n    }\r\n    else {\r\n        return BigNatModule_isZero(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsOne(x) {\r\n    if (BigInteger__get_SignInt(x) === 1) {\r\n        return BigNatModule_isOne(BigInteger__get_V(x));\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Addition_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(x)) {\r\n        return y;\r\n    }\r\n    else {\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 1: {\r\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n            }\r\n            case 2: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 3: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Subtraction_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(x)) {\r\n        return BigInteger_op_UnaryNegation_Z665282C2(y);\r\n    }\r\n    else {\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 1: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\r\n            }\r\n            case 2: {\r\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 3: {\r\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Multiply_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(y)) {\r\n        return y;\r\n    }\r\n    else if (BigInteger__get_IsOne(x)) {\r\n        return y;\r\n    }\r\n    else if (BigInteger__get_IsOne(y)) {\r\n        return x;\r\n    }\r\n    else {\r\n        const m = BigNatModule_mul(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(x) * BigInteger__get_SignInt(y), m);\r\n    }\r\n}\r\n\r\nexport function BigInteger_DivRem_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        throw (new Error());\r\n    }\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return [BigInteger_get_Zero(), BigInteger_get_Zero()];\r\n    }\r\n    else {\r\n        const patternInput = BigNatModule_divmod(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        const r = patternInput[1];\r\n        const d = patternInput[0];\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\r\n            }\r\n            case 1: {\r\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\r\n            }\r\n            case 2: {\r\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\r\n            }\r\n            case 3: {\r\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Division_56F059C0(x, y) {\r\n    return BigInteger_DivRem_56F059C0(x, y)[0];\r\n}\r\n\r\nexport function BigInteger_op_Modulus_56F059C0(x, y) {\r\n    return BigInteger_DivRem_56F059C0(x, y)[1];\r\n}\r\n\r\nexport function BigInteger_op_RightShift_62E082A2(x, y) {\r\n    return BigInteger_op_Division_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\r\n}\r\n\r\nexport function BigInteger_op_LeftShift_62E082A2(x, y) {\r\n    return BigInteger_op_Multiply_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\r\n}\r\n\r\nexport function BigInteger_op_BitwiseAnd_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitAnd(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_op_BitwiseOr_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitOr(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_op_ExclusiveOr_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitXor(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_GreatestCommonDivisor_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    if (matchValue[0] === 0) {\r\n        if (matchValue[1] === 0) {\r\n            return BigInteger_get_Zero();\r\n        }\r\n        else {\r\n            return BigInteger_posn_Z67CCE57D(BigInteger__get_V(y));\r\n        }\r\n    }\r\n    else if (matchValue[1] === 0) {\r\n        return BigInteger_posn_Z67CCE57D(BigInteger__get_V(x));\r\n    }\r\n    else {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_hcf(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsNegative(x) {\r\n    if (BigInteger__get_SignInt(x) === -1) {\r\n        return !BigInteger__get_IsZero(x);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsPositive(x) {\r\n    if (BigInteger__get_SignInt(x) === 1) {\r\n        return !BigInteger__get_IsZero(x);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger_Abs_Z665282C2(x) {\r\n    if (BigInteger__get_SignInt(x) === -1) {\r\n        return BigInteger_op_UnaryNegation_Z665282C2(x);\r\n    }\r\n    else {\r\n        return x;\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_LessThanOrEqual_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_lte(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_lte(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 3: {\r\n            return true;\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 6: {\r\n            return true;\r\n        }\r\n        case 7: {\r\n            return true;\r\n        }\r\n        case 8: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_GreaterThanOrEqual_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_gte(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_gte(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            return true;\r\n        }\r\n        case 3: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return true;\r\n        }\r\n        case 6: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 7: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 8: {\r\n            return true;\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_Pow_62E082A2(x, y) {\r\n    if (y < 0) {\r\n        throw (new Error(\"y\"));\r\n    }\r\n    const matchValue = [BigInteger__get_IsZero(x), y];\r\n    if (matchValue[0]) {\r\n        if (matchValue[1] === 0) {\r\n            return BigInteger_get_One();\r\n        }\r\n        else {\r\n            return BigInteger_get_Zero();\r\n        }\r\n    }\r\n    else {\r\n        const yval = BigInteger_$ctor_Z524259A4(y);\r\n        return BigInteger_create_Z2BE94A1(BigNatModule_isZero(BigNatModule_rem(BigInteger__get_V(yval), BigNatModule_two)) ? 1 : BigInteger__get_SignInt(x), BigNatModule_pow(BigInteger__get_V(x), BigInteger__get_V(yval)));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToInt32(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        const u = BigNatModule_toUInt32(BigInteger__get_V(x));\r\n        if (u <= (2147483647 >>> 0)) {\r\n            return (BigInteger__get_SignInt(x) * (~(~u))) | 0;\r\n        }\r\n        else if ((BigInteger__get_SignInt(x) === -1) && (u === ((2147483647 + 1) >>> 0))) {\r\n            return -2147483648;\r\n        }\r\n        else {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToUInt32(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return BigNatModule_toUInt32(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToInt64(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return fromBits(0, 0, false);\r\n    }\r\n    else {\r\n        const u = BigNatModule_toUInt64(BigInteger__get_V(x));\r\n        if (compare(u, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\r\n            return op_Multiply(fromInteger(BigInteger__get_SignInt(x), false, 2), fromValue(u, false));\r\n        }\r\n        else if ((BigInteger__get_SignInt(x) === -1) && equals(u, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true))) {\r\n            return fromBits(0, 2147483648, false);\r\n        }\r\n        else {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToUInt64(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return fromBits(0, 0, true);\r\n    }\r\n    else {\r\n        return BigNatModule_toUInt64(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToDouble(x) {\r\n    const matchValue = BigInteger__get_SignInt(x) | 0;\r\n    switch (matchValue) {\r\n        case -1: {\r\n            return -BigNatModule_toFloat(BigInteger__get_V(x));\r\n        }\r\n        case 0: {\r\n            return 0;\r\n        }\r\n        case 1: {\r\n            return BigNatModule_toFloat(BigInteger__get_V(x));\r\n        }\r\n        default: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToSByte(x) {\r\n    return (BigInteger__get_ToInt32(x) + 0x80 & 0xFF) - 0x80;\r\n}\r\n\r\nexport function BigInteger__get_ToByte(x) {\r\n    return BigInteger__get_ToUInt32(x) & 0xFF;\r\n}\r\n\r\nexport function BigInteger__get_ToInt16(x) {\r\n    return (BigInteger__get_ToInt32(x) + 0x8000 & 0xFFFF) - 0x8000;\r\n}\r\n\r\nexport function BigInteger__get_ToUInt16(x) {\r\n    return BigInteger__get_ToUInt32(x) & 0xFFFF;\r\n}\r\n\r\nexport function BigInteger__get_ToSingle(x) {\r\n    return BigInteger__get_ToDouble(x);\r\n}\r\n\r\nexport function BigInteger__get_ToDecimal(x) {\r\n    return new Decimal(BigInteger__get_ToDouble(x));\r\n}\r\n\r\nexport function BigInteger_Parse_Z721C83C5(text) {\r\n    if (text == null) {\r\n        throw (new Error(\"text\"));\r\n    }\r\n    const text_1 = text.trim();\r\n    const len = text_1.length | 0;\r\n    if (len === 0) {\r\n        throw (new Error());\r\n    }\r\n    const matchValue = [text_1[0], len];\r\n    if (matchValue[0] === \"+\") {\r\n        if (matchValue[1] === 1) {\r\n            throw (new Error());\r\n        }\r\n        else {\r\n            return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\r\n        }\r\n    }\r\n    else if (matchValue[0] === \"-\") {\r\n        if (matchValue[1] === 1) {\r\n            throw (new Error());\r\n        }\r\n        else {\r\n            return BigInteger_negn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\r\n        }\r\n    }\r\n    else {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsSmall(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return true;\r\n    }\r\n    else {\r\n        return BigNatModule_isSmall(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger_Factorial_Z665282C2(x) {\r\n    if (BigInteger__get_IsNegative(x)) {\r\n        throw (new Error(\"mustBeNonNegative\\\\nParameter name: x\"));\r\n    }\r\n    if (BigInteger__get_IsPositive(x)) {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_factorial(BigInteger__get_V(x)));\r\n    }\r\n    else {\r\n        return BigInteger_get_One();\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_UnaryPlus_Z665282C2(n1) {\r\n    return n1;\r\n}\r\n\r\nexport function BigInteger_FromInt64_Z524259C1(x) {\r\n    return BigInteger_$ctor_Z524259C1(x);\r\n}\r\n\r\nexport function BigInteger_FromInt32_Z524259A4(x) {\r\n    return BigInteger_$ctor_Z524259A4(x);\r\n}\r\n\r\n","import { Union } from \"./Types.js\";\r\nimport { union_type } from \"./Reflection.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class FSharpResult$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Ok\", \"Error\"];\r\n    }\r\n}\r\n\r\nexport function FSharpResult$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\r\n}\r\n\r\nexport function Result_Map(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, mapping(result.fields[0]));\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport function Result_MapError(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, mapping(result.fields[0]));\r\n    }\r\n}\r\n\r\nexport function Result_Bind(binder, result) {\r\n    if (result.tag === 0) {\r\n        return binder(result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport class FSharpChoice$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of2\", \"Choice2Of2\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\r\n}\r\n\r\nexport class FSharpChoice$3 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\r\n}\r\n\r\nexport class FSharpChoice$4 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\r\n}\r\n\r\nexport class FSharpChoice$5 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\r\n}\r\n\r\nexport class FSharpChoice$6 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\r\n}\r\n\r\nexport class FSharpChoice$7 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\r\n}\r\n\r\nexport function Choice_makeChoice1Of2(x) {\r\n    return new FSharpChoice$2(0, x);\r\n}\r\n\r\nexport function Choice_makeChoice2Of2(x) {\r\n    return new FSharpChoice$2(1, x);\r\n}\r\n\r\nexport function Choice_tryValueIfChoice1Of2(x) {\r\n    if (x.tag === 0) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function Choice_tryValueIfChoice2Of2(x) {\r\n    if (x.tag === 1) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 2 /* Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input == null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\n// export function makeRangeStepFunction(step: Decimal, last: Decimal) {\n//   const stepComparedWithZero = step.cmp(get_Zero);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Decimal) => {\n//     const comparedWithLast = x.cmp(last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n","import { compare, physicalHash, equals, structuralHash } from \"./Util.js\";\r\n\r\nexport function HashIdentity_FromFunctions(hash, eq) {\r\n    return {\r\n        Equals(x, y) {\r\n            return eq(x, y);\r\n        },\r\n        GetHashCode(x_1) {\r\n            return hash(x_1);\r\n        },\r\n    };\r\n}\r\n\r\nexport function HashIdentity_Structural() {\r\n    return HashIdentity_FromFunctions(structuralHash, equals);\r\n}\r\n\r\nexport function HashIdentity_Reference() {\r\n    return HashIdentity_FromFunctions(physicalHash, (e1, e2) => (e1 === e2));\r\n}\r\n\r\nexport function ComparisonIdentity_FromFunction(comparer) {\r\n    return {\r\n        Compare(x, y) {\r\n            return comparer(x, y);\r\n        },\r\n    };\r\n}\r\n\r\nexport function ComparisonIdentity_Structural() {\r\n    return ComparisonIdentity_FromFunction(compare);\r\n}\r\n\r\n","import { disposeSafe, structuralHash, equals } from \"./Util.js\";\r\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\r\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\r\n\r\nexport const LanguagePrimitives_GenericEqualityComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport const LanguagePrimitives_GenericEqualityERComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport function LanguagePrimitives_FastGenericComparer() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function Operators_Failure(message) {\r\n    return new Error(message);\r\n}\r\n\r\nexport function Operators_FailurePattern(exn) {\r\n    return exn.message;\r\n}\r\n\r\nexport function Operators_NullArg(x) {\r\n    throw (new Error(x));\r\n}\r\n\r\nexport function Operators_Using(resource, action) {\r\n    try {\r\n        return action(resource);\r\n    }\r\n    finally {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            disposeSafe(resource);\r\n        }\r\n    }\r\n}\r\n\r\nexport function Operators_Lock(_lockObj, action) {\r\n    return action();\r\n}\r\n\r\nexport function ExtraTopLevelOperators_LazyPattern(input) {\r\n    return input.Value;\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\r\n    return format.cont((s) => {\r\n        StringBuilder__Append_Z721C83C5(builder, s);\r\n        return continuation();\r\n    });\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\r\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\r\n    }, builder, format);\r\n}\r\n\r\n","\r\nexport const SR_indexOutOfBounds = \"The index was outside the range of elements in the collection.\";\r\n\r\nexport const SR_inputWasEmpty = \"Collection was empty.\";\r\n\r\nexport const SR_inputMustBeNonNegative = \"The input must be non-negative.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_differentLengths = \"The collections had different lengths.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\nexport function divRem(x, y, out) {\n    const div = ~~(x / y);\n    const rem = x % y;\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","import { join } from \"./String.js\";\r\nimport { uncurry, disposeSafe, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\r\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\r\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\r\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\r\n\r\nexport class FSharpList extends Record {\r\n    constructor(head, tail) {\r\n        super();\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        return (\"[\" + join(\"; \", xs)) + \"]\";\r\n    }\r\n    Equals(other) {\r\n        const xs = this;\r\n        if (xs === other) {\r\n            return true;\r\n        }\r\n        else {\r\n            const loop = (xs_1_mut, ys_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                    const matchValue = [xs_1.tail, ys_1.tail];\r\n                    if (matchValue[0] != null) {\r\n                        if (matchValue[1] != null) {\r\n                            const xt = matchValue[0];\r\n                            const yt = matchValue[1];\r\n                            if (equals(xs_1.head, ys_1.head)) {\r\n                                xs_1_mut = xt;\r\n                                ys_1_mut = yt;\r\n                                continue loop;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (matchValue[1] != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(xs, other);\r\n        }\r\n    }\r\n    GetHashCode() {\r\n        const xs = this;\r\n        const loop = (i_mut, h_mut, xs_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\r\n                const matchValue = xs_1.tail;\r\n                if (matchValue != null) {\r\n                    const t = matchValue;\r\n                    if (i > 18) {\r\n                        return h | 0;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\r\n                        xs_1_mut = t;\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return h | 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0, 0, xs) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(other) {\r\n        const xs = this;\r\n        const loop = (xs_1_mut, ys_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                const matchValue = [xs_1.tail, ys_1.tail];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const xt = matchValue[0];\r\n                        const yt = matchValue[1];\r\n                        const c = compare(xs_1.head, ys_1.head) | 0;\r\n                        if (c === 0) {\r\n                            xs_1_mut = xt;\r\n                            ys_1_mut = yt;\r\n                            continue loop;\r\n                        }\r\n                        else {\r\n                            return c | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if (matchValue[1] != null) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(xs, other) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const xs = this;\r\n        return ListEnumerator$1_$ctor_3002E699(xs);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const xs = this;\r\n        return getEnumerator(xs);\r\n    }\r\n}\r\n\r\nexport function FSharpList$reflection(gen0) {\r\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\r\n}\r\n\r\nexport class ListEnumerator$1 {\r\n    constructor(xs) {\r\n        this.xs = xs;\r\n        this.it = this.xs;\r\n        this.current = null;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        const matchValue = __.it.tail;\r\n        if (matchValue != null) {\r\n            const t = matchValue;\r\n            __.current = __.it.head;\r\n            __.it = t;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        const __ = this;\r\n        __.it = __.xs;\r\n        __.current = null;\r\n    }\r\n    Dispose() {\r\n    }\r\n}\r\n\r\nexport function ListEnumerator$1$reflection(gen0) {\r\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\r\n}\r\n\r\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\r\n    return new ListEnumerator$1(xs);\r\n}\r\n\r\nexport function FSharpList_get_Empty() {\r\n    return new FSharpList(null, void 0);\r\n}\r\n\r\nexport function FSharpList_Cons_305B8EAC(x, xs) {\r\n    return new FSharpList(x, xs);\r\n}\r\n\r\nexport function FSharpList__get_IsEmpty(xs) {\r\n    return xs.tail == null;\r\n}\r\n\r\nexport function FSharpList__get_Length(xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = matchValue;\r\n                continue loop;\r\n            }\r\n            else {\r\n                return i | 0;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs) | 0;\r\n}\r\n\r\nexport function FSharpList__get_Head(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return xs.head;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Tail(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                if (i === index) {\r\n                    return xs_1.head;\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    xs_1_mut = matchValue;\r\n                    continue loop;\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpList_get_Empty();\r\n}\r\n\r\nexport function cons(x, xs) {\r\n    return FSharpList_Cons_305B8EAC(x, xs);\r\n}\r\n\r\nexport function singleton(x) {\r\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    return FSharpList__get_IsEmpty(xs);\r\n}\r\n\r\nexport function length(xs) {\r\n    return FSharpList__get_Length(xs);\r\n}\r\n\r\nexport function head(xs) {\r\n    return FSharpList__get_Head(xs);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n}\r\n\r\nexport function tail(xs) {\r\n    return FSharpList__get_Tail(xs);\r\n}\r\n\r\nexport function tryLast(xs_mut) {\r\n    tryLast:\r\n    while (true) {\r\n        const xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const t = FSharpList__get_Tail(xs);\r\n            if (FSharpList__get_IsEmpty(t)) {\r\n                return some(FSharpList__get_Head(xs));\r\n            }\r\n            else {\r\n                xs_mut = t;\r\n                continue tryLast;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const loop = (xs_1_mut, ys_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\r\n            if (matchValue[0]) {\r\n                if (matchValue[1]) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else if (matchValue[1]) {\r\n                return 1;\r\n            }\r\n            else {\r\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\r\n                if (c === 0) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return c | 0;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs, ys) | 0;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    const len = FSharpList__get_Length(xs) | 0;\r\n    const res = fill(new Array(len), 0, len, null);\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (!FSharpList__get_IsEmpty(xs_1)) {\r\n                res[i] = FSharpList__get_Head(xs_1);\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(0, xs);\r\n    return res;\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_1)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function foldIndexed(folder, state, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, state, xs);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    let ys_1 = ys;\r\n    while ((!FSharpList__get_IsEmpty(xs_1)) && (!FSharpList__get_IsEmpty(ys_1))) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n        ys_1 = FSharpList__get_Tail(ys_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function unfold(gen, state) {\r\n    const loop = (acc_mut, node_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, node = node_mut;\r\n            const matchValue = gen(acc);\r\n            if (matchValue != null) {\r\n                acc_mut = matchValue[1];\r\n                node_mut = ((t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t)));\r\n                continue loop;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(state, root);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function toSeq(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function ofArrayWithTail(xs, tail_1) {\r\n    let res = tail_1;\r\n    for (let i = xs.length - 1; i >= 0; i--) {\r\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function ofArray(xs) {\r\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    let xs_3, t;\r\n    if (isArrayLike(xs)) {\r\n        return ofArray(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        const root = FSharpList_get_Empty();\r\n        let node = root;\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n        const xs_5 = node;\r\n        const t_2 = FSharpList_get_Empty();\r\n        xs_5.tail = t_2;\r\n        return FSharpList__get_Tail(root);\r\n    }\r\n}\r\n\r\nexport function concat(lists) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    const action = (xs) => {\r\n        node = fold((acc, x) => {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }, node, xs);\r\n    };\r\n    if (isArrayLike(lists)) {\r\n        lists.forEach(action);\r\n    }\r\n    else if (lists instanceof FSharpList) {\r\n        iterate(action, lists);\r\n    }\r\n    else {\r\n        const enumerator = getEnumerator(lists);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n    }\r\n    const xs_6 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_6.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    let xs_4, t_2;\r\n    const root = FSharpList_get_Empty();\r\n    let node;\r\n    const t = new FSharpList(state, void 0);\r\n    root.tail = t;\r\n    node = t;\r\n    let acc = state;\r\n    let xs_3 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_3)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_3));\r\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\r\n        xs_3 = FSharpList__get_Tail(xs_3);\r\n    }\r\n    const xs_6 = node;\r\n    const t_4 = FSharpList_get_Empty();\r\n    xs_6.tail = t_4;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return ofArray(scanBack_1(folder, toArray(xs), state));\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    let xs_1, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    let ys = xs;\r\n    while (!FSharpList__get_IsEmpty(ys)) {\r\n        let zs = mapping(FSharpList__get_Head(ys));\r\n        while (!FSharpList__get_IsEmpty(zs)) {\r\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\r\n            zs = FSharpList__get_Tail(zs);\r\n        }\r\n        ys = FSharpList__get_Tail(ys);\r\n    }\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = foldIndexed((i, acc, x) => {\r\n        const t = new FSharpList(mapping(i, x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const t = new FSharpList(mapping(x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold2((acc, x, y) => {\r\n        const t = new FSharpList(mapping(x, y), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(0, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\r\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                zs_1_mut = FSharpList__get_Tail(zs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(root, xs, ys, zs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const patternInput_1 = fold((tupledArg, x) => {\r\n        let t;\r\n        const patternInput = mapping(tupledArg[1], x);\r\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\r\n    }, [root, state], xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_2;\r\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\r\n}\r\n\r\nexport function tryPick(f, xs) {\r\n    const loop = (xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = f(FSharpList__get_Head(xs_1));\r\n                if (matchValue == null) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs);\r\n}\r\n\r\nexport function pick(f, xs) {\r\n    const matchValue = tryPick(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(f, xs) {\r\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\r\n}\r\n\r\nexport function find(f, xs) {\r\n    const matchValue = tryFind(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(f, xs) {\r\n    return tryFindBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findBack(f, xs) {\r\n    const matchValue = tryFindBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(f, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (f(FSharpList__get_Head(xs_1))) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function findIndex(f, xs) {\r\n    const matchValue = tryFindIndex(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(f, xs) {\r\n    return tryFindIndexBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(f, xs) {\r\n    const matchValue = tryFindIndexBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryItem(n, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (i === n) {\r\n                return some(FSharpList__get_Head(xs_1));\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function item(n, xs) {\r\n    return FSharpList__get_Item_Z524259A4(xs, n);\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        if (f(x)) {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function partition(f, xs) {\r\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\r\n    const root2 = patternInput[1];\r\n    const root1 = patternInput[0];\r\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\r\n        const lacc = tupledArg[0];\r\n        const racc = tupledArg[1];\r\n        return (x) => {\r\n            let t, t_2;\r\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\r\n        };\r\n    }), [root1, root2], xs);\r\n    const t_4 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_4;\r\n    const t_5 = FSharpList_get_Empty();\r\n    patternInput_1[1].tail = t_5;\r\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\r\n}\r\n\r\nexport function choose(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const matchValue = f(x);\r\n        if (matchValue == null) {\r\n            return acc;\r\n        }\r\n        else {\r\n            const t = new FSharpList(value_1(matchValue), void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function contains(value, xs, eq) {\r\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\r\n}\r\n\r\nexport function initialize(n, f) {\r\n    let xs, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    for (let i = 0; i <= (n - 1); i++) {\r\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\r\n    }\r\n    const xs_2 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_2.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reduce(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return fold(f, head(xs), tail(xs));\r\n    }\r\n}\r\n\r\nexport function reduceBack(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return foldBack(f, tail(xs), head(xs));\r\n    }\r\n}\r\n\r\nexport function forAll(f, xs) {\r\n    return fold((acc, x) => (acc && f(x)), true, xs);\r\n}\r\n\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\r\n}\r\n\r\nexport function exists(f, xs) {\r\n    return tryFindIndex(f, xs) != null;\r\n}\r\n\r\nexport function exists2(f_mut, xs_mut, ys_mut) {\r\n    exists2:\r\n    while (true) {\r\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\r\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 2;\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return false;\r\n            }\r\n            case 1: {\r\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    xs_mut = FSharpList__get_Tail(xs);\r\n                    ys_mut = FSharpList__get_Tail(ys);\r\n                    continue exists2;\r\n                }\r\n            }\r\n            case 2: {\r\n                throw (new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\"));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function unzip(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function unzip3(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const arr = toArray(xs);\r\n    arr.sort(comparer);\r\n    return ofArray(arr);\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return ofArray(permute_1(f, toArray(xs)));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs))));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    iterate((x) => {\r\n        iterate((y) => {\r\n            let xs_1, t;\r\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\r\n        }, ys);\r\n    }, xs);\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function skip(count_mut, xs_mut) {\r\n    skip:\r\n    while (true) {\r\n        const count = count_mut, xs = xs_mut;\r\n        if (count <= 0) {\r\n            return xs;\r\n        }\r\n        else if (FSharpList__get_IsEmpty(xs)) {\r\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n        }\r\n        else {\r\n            count_mut = (count - 1);\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skip;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate_mut, xs_mut) {\r\n    skipWhile:\r\n    while (true) {\r\n        const predicate = predicate_mut, xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return xs;\r\n        }\r\n        else if (!predicate(FSharpList__get_Head(xs))) {\r\n            return xs;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skipWhile;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function take(count, xs) {\r\n    if (count < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\r\n    }\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    const loop = (acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function getSlice(startIndex, endIndex, xs) {\r\n    const len = length(xs) | 0;\r\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\r\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\r\n    if (startIndex_1 < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\r\n    }\r\n    else if (endIndex_1 >= len) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\r\n    }\r\n    else if (endIndex_1 < startIndex_1) {\r\n        return FSharpList_get_Empty();\r\n    }\r\n    else {\r\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\r\n    }\r\n}\r\n\r\nexport function splitAt(index, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    if (index > FSharpList__get_Length(xs)) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [take(index, xs), skip(index, xs)];\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return FSharpList__get_Head(xs);\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    if ((!FSharpList__get_IsEmpty(xs)) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return ofArray(pairwise_1(toArray(xs)));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs))));\r\n}\r\n\r\nexport function transpose(lists) {\r\n    return ofArray(map_1(ofArray, transpose_1(map_1(toArray, Array.from(lists)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys_1 = ofSeq(ys);\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    const ys = mapIndexed((i, x) => {\r\n        if (i === index) {\r\n            isDone = true;\r\n            return y;\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\n// export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {\n//   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Long) => {\n//     const comparedWithLast = LongLib.compare(x, last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\nexport function divRem(x, y, out) {\n    const div = op_Division(x, y);\n    const rem = op_Modulus(x, y);\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { singleton, ofArrayWithTail, head, tail, isEmpty as isEmpty_1, FSharpList, fold as fold_1, empty as empty_1, cons } from \"./List.js\";\r\nimport { map as map_2, fill } from \"./Array.js\";\r\nimport { structuralHash, compare, toIterator, equals, disposeSafe, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { tryPick as tryPick_1, pick as pick_1, iterate as iterate_1, compareWith, map as map_1, unfold } from \"./Seq.js\";\r\nimport { format, join } from \"./String.js\";\r\nimport { LanguagePrimitives_FastGenericComparer } from \"./FSharp.Core.js\";\r\n\r\nexport class MapTreeLeaf$2 {\r\n    constructor(k, v) {\r\n        this.k = k;\r\n        this.v = v;\r\n    }\r\n}\r\n\r\nexport function MapTreeLeaf$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeLeaf`2\", [gen0, gen1], MapTreeLeaf$2);\r\n}\r\n\r\nexport function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {\r\n    return new MapTreeLeaf$2(k, v);\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Value(_) {\r\n    return _.v;\r\n}\r\n\r\nexport class MapTreeNode$2 extends MapTreeLeaf$2 {\r\n    constructor(k, v, left, right, h) {\r\n        super(k, v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function MapTreeNode$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeNode`2\", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));\r\n}\r\n\r\nexport function MapTreeNode$2_$ctor_499A11FD(k, v, left, right, h) {\r\n    return new MapTreeNode$2(k, v, left, right, h);\r\n}\r\n\r\nexport function MapTreeNode$2__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function MapTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function MapTreeModule_sizeAux(acc_mut, m_mut) {\r\n    MapTreeModule_sizeAux:\r\n    while (true) {\r\n        const acc = acc_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_sizeAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_size(x) {\r\n    return MapTreeModule_sizeAux(0, x);\r\n}\r\n\r\nexport function MapTreeModule_mk(l, k, v, r) {\r\n    let hl;\r\n    const m = l;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        hl = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const m_1 = r;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        hr = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m_2 = ((hl < hr) ? hr : hl) | 0;\r\n    if (m_2 === 0) {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n    else {\r\n        return MapTreeNode$2_$ctor_499A11FD(k, v, l, r, m_2 + 1);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_rebalance(t1, k, v, t2) {\r\n    let m_2, m2_2, m_3, m2_3;\r\n    let t1h;\r\n    const m = t1;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        t1h = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const m_1 = t2;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        t2h = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof MapTreeNode$2) {\r\n            if (((m_2 = MapTreeNode$2__get_Left(matchValue), (m_2 != null) ? ((m2_2 = m_2, (m2_2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_2) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(MapTreeNode$2__get_Left(matchValue));\r\n                if (matchValue_1 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof MapTreeNode$2) {\r\n            if (((m_3 = MapTreeNode$2__get_Right(matchValue_2), (m_3 != null) ? ((m2_3 = m_3, (m2_3 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_3) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(MapTreeNode$2__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k, v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k, v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_mk(t1, k, v, t2);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_add(comparer, k, v, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c < 0) {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeModule_empty(), m, 2);\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n        }\r\n        else {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, m, MapTreeModule_empty(), 2);\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_tryFind:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c === 0) {\r\n                return some(MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n            else if (m2 instanceof MapTreeNode$2) {\r\n                comparer_mut = comparer;\r\n                k_mut = k;\r\n                m_mut = ((c < 0) ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2));\r\n                continue MapTreeModule_tryFind;\r\n            }\r\n            else {\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_find(comparer, k, m) {\r\n    const matchValue = MapTreeModule_tryFind(comparer, k, m);\r\n    if (matchValue == null) {\r\n        throw (new Error());\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {\r\n    if (f(k, v)) {\r\n        return [MapTreeModule_add(comparer, k, v, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, MapTreeModule_add(comparer, k, v, acc2)];\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {\r\n    MapTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);\r\n                const acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue MapTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition(comparer, f, m) {\r\n    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_filter1(comparer, f, k, v, acc) {\r\n    if (f(k, v)) {\r\n        return MapTreeModule_add(comparer, k, v, acc);\r\n    }\r\n    else {\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {\r\n    MapTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);\r\n                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                acc_mut = acc_2;\r\n                continue MapTreeModule_filterAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filter(comparer, f, m) {\r\n    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_spliceOutSuccessor(m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (MapTreeNode$2__get_Left(m2) == null) {\r\n                return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2)];\r\n            }\r\n            else {\r\n                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));\r\n                return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))];\r\n            }\r\n        }\r\n        else {\r\n            return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Map.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_remove(comparer, k, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeModule_empty();\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_change(comparer, k, u, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                const matchValue_1 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_1 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n                }\r\n                else if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c_1 < 0) {\r\n                const matchValue_2 = u(void 0);\r\n                if (matchValue_2 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_2), MapTreeModule_empty(), m, 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n            else if (c_1 === 0) {\r\n                const matchValue_3 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_3 != null) {\r\n                    return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue_3));\r\n                }\r\n                else {\r\n                    return MapTreeModule_empty();\r\n                }\r\n            }\r\n            else {\r\n                const matchValue_4 = u(void 0);\r\n                if (matchValue_4 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_4), m, MapTreeModule_empty(), 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const matchValue = u(void 0);\r\n        if (matchValue != null) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue));\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Left(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iterOpt(f_mut, m_mut) {\r\n    MapTreeModule_iterOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_iterOpt;\r\n            }\r\n            else {\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iter(f, m) {\r\n    MapTreeModule_iterOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_tryPickOpt(f_mut, m_mut) {\r\n    MapTreeModule_tryPickOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));\r\n                if (matchValue == null) {\r\n                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                    if (matchValue_1 == null) {\r\n                        f_mut = f;\r\n                        m_mut = MapTreeNode$2__get_Right(m2);\r\n                        continue MapTreeModule_tryPickOpt;\r\n                    }\r\n                    else {\r\n                        return matchValue_1;\r\n                    }\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryPick(f, m) {\r\n    return MapTreeModule_tryPickOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_existsOpt(f_mut, m_mut) {\r\n    MapTreeModule_existsOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_existsOpt;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_exists(f, m) {\r\n    return MapTreeModule_existsOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_forallOpt(f_mut, m_mut) {\r\n    MapTreeModule_forallOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) && f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_forallOpt;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_forall(f, m) {\r\n    return MapTreeModule_forallOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_map(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapiOpt(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapi(f, m) {\r\n    return MapTreeModule_mapiOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {\r\n    MapTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut, x = x_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);\r\n                const x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                x_mut = x_2;\r\n                continue MapTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldBack(f, m, x) {\r\n    return MapTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {\r\n    MapTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                f_mut = f;\r\n                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_fold(f, x, m) {\r\n    return MapTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {\r\n    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut) => {\r\n        foldFromTo:\r\n        while (true) {\r\n            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;\r\n                    const x_2 = (cLoKey < 0) ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;\r\n                    const x_3 = ((cLoKey <= 0) && (cKeyHi <= 0)) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;\r\n                    if (cKeyHi < 0) {\r\n                        f_1_mut = f_1;\r\n                        m_1_mut = MapTreeNode$2__get_Right(m2);\r\n                        x_1_mut = x_3;\r\n                        continue foldFromTo;\r\n                    }\r\n                    else {\r\n                        return x_3;\r\n                    }\r\n                }\r\n                else if ((comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0) && (comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0)) {\r\n                    return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                }\r\n                else {\r\n                    return x_1;\r\n                }\r\n            }\r\n            else {\r\n                return x_1;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (comparer.Compare(lo, hi) === 1) {\r\n        return x;\r\n    }\r\n    else {\r\n        return foldFromTo(f, m, x);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {\r\n    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_toList(m) {\r\n    const loop = (m_1_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const m_1 = m_1_mut, acc = acc_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    m_1_mut = MapTreeNode$2__get_Left(m2);\r\n                    acc_mut = cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], loop(MapTreeNode$2__get_Right(m2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(m, empty_1());\r\n}\r\n\r\nexport function MapTreeModule_copyToArray(m, arr, i) {\r\n    let j = i;\r\n    MapTreeModule_iter((x, y) => {\r\n        arr[j] = [x, y];\r\n        j = ((j + 1) | 0);\r\n    }, m);\r\n}\r\n\r\nexport function MapTreeModule_toArray(m) {\r\n    const n = MapTreeModule_size(m) | 0;\r\n    const res = fill(new Array(n), 0, n, [null, null]);\r\n    MapTreeModule_copyToArray(m, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofList(comparer, l) {\r\n    return fold_1((acc, tupledArg) => MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc), MapTreeModule_empty(), l);\r\n}\r\n\r\nexport function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    MapTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const patternInput = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            comparer_mut = comparer;\r\n            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);\r\n            e_mut = e;\r\n            continue MapTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_ofArray(comparer, arr) {\r\n    let res = MapTreeModule_empty();\r\n    for (let idx = 0; idx <= (arr.length - 1); idx++) {\r\n        const forLoopVar = arr[idx];\r\n        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return MapTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return MapTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            disposeSafe(ie);\r\n        }\r\n    }\r\n}\r\n\r\nexport class MapTreeModule_MapIterator$2 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {\r\n    return record_type(\"Map.MapTreeModule.MapIterator`2\", [gen0, gen1], MapTreeModule_MapIterator$2, () => [[\"stack\", list_type(option_type(MapTreeLeaf$2$reflection(gen0, gen1)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function MapTreeModule_collapseLHS(stack_mut) {\r\n    MapTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const rest = tail(stack);\r\n            const m = head(stack);\r\n            if (m != null) {\r\n                const m2 = m;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    stack_mut = ofArrayWithTail([MapTreeNode$2__get_Left(m2), MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)), MapTreeNode$2__get_Right(m2)], rest);\r\n                    continue MapTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue MapTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIterator(m) {\r\n    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(singleton(m)), false);\r\n}\r\n\r\nexport function MapTreeModule_notStarted() {\r\n    throw (new Error(\"enumeration not started\"));\r\n}\r\n\r\nexport function MapTreeModule_alreadyFinished() {\r\n    throw (new Error(\"enumeration already finished\"));\r\n}\r\n\r\nexport function MapTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n                }\r\n                else {\r\n                    return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n            }\r\n        }\r\n        else {\r\n            return MapTreeModule_alreadyFinished();\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = MapTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIEnumerator(m) {\r\n    let i = MapTreeModule_mkIterator(m);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return MapTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = MapTreeModule_mkIterator(m);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function MapTreeModule_toSeq(s) {\r\n    return unfold((en_1) => {\r\n        if (en_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return [en_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), en_1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, MapTreeModule_mkIEnumerator(s));\r\n}\r\n\r\nexport class FSharpMap {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpMap__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        if (that instanceof FSharpMap) {\r\n            const e1 = getEnumerator(this$);\r\n            try {\r\n                const e2 = getEnumerator(that);\r\n                try {\r\n                    const loop = () => {\r\n                        const m1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                        if (m1 === e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            if (!m1) {\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                const e1c = e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                const e2c = e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                if (equals(e1c[0], e2c[0]) && equals(e1c[1], e2c[1])) {\r\n                                    return loop();\r\n                                }\r\n                                else {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    };\r\n                    return loop();\r\n                }\r\n                finally {\r\n                    disposeSafe(e2);\r\n                }\r\n            }\r\n            finally {\r\n                disposeSafe(e1);\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"map [\" + join(\"; \", map_1((kv) => format(\"({0}, {1})\", kv[0], kv[1]), this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpMap\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    CompareTo(obj) {\r\n        const m = this;\r\n        if (obj instanceof FSharpMap) {\r\n            return compareWith((kvp1, kvp2) => {\r\n                const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;\r\n                return ((c !== 0) ? c : compare(kvp1[1], kvp2[1])) | 0;\r\n            }, m, obj) | 0;\r\n        }\r\n        else {\r\n            throw (new Error(\"not comparable\\\\nParameter name: obj\"));\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, x[0]) && equals(FSharpMap__get_Item(m, x[0]), x[1]);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const m = this;\r\n        MapTreeModule_copyToArray(m.tree, arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    get size() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    delete(_arg1) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return false;\r\n    }\r\n    entries() {\r\n        const m = this;\r\n        return map_1((p) => [p[0], p[1]], m);\r\n    }\r\n    get(k) {\r\n        const m = this;\r\n        return FSharpMap__get_Item(m, k);\r\n    }\r\n    has(k) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, k);\r\n    }\r\n    keys() {\r\n        const m = this;\r\n        return map_1((p) => p[0], m);\r\n    }\r\n    set(k, v) {\r\n        const m = this;\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return m;\r\n    }\r\n    values() {\r\n        const m = this;\r\n        return map_1((p) => p[1], m);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const m = this;\r\n        iterate_1((p) => {\r\n            f(p[1], p[0], m);\r\n        }, m);\r\n    }\r\n}\r\n\r\nexport function FSharpMap$reflection(gen0, gen1) {\r\n    return class_type(\"Map.FSharpMap\", [gen0, gen1], FSharpMap);\r\n}\r\n\r\nexport function FSharpMap_$ctor(comparer, tree) {\r\n    return new FSharpMap(comparer, tree);\r\n}\r\n\r\n(() => {\r\n    FSharpMap.empty = FSharpMap_$ctor(LanguagePrimitives_FastGenericComparer(), MapTreeModule_empty());\r\n})();\r\n\r\nexport function FSharpMap_get_Empty() {\r\n    return FSharpMap.empty;\r\n}\r\n\r\nexport function FSharpMap_Create(ie) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, ie));\r\n}\r\n\r\nexport function FSharpMap__get_Comparer(m) {\r\n    return m.comparer;\r\n}\r\n\r\nexport function FSharpMap__get_Tree(m) {\r\n    return m.tree;\r\n}\r\n\r\nexport function FSharpMap__Add(m, key, value) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Change(m, key, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__get_IsEmpty(m) {\r\n    return m.tree == null;\r\n}\r\n\r\nexport function FSharpMap__get_Item(m, key) {\r\n    return MapTreeModule_find(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__TryPick(m, f) {\r\n    return MapTreeModule_tryPick(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Exists(m, predicate) {\r\n    return MapTreeModule_exists(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Filter(m, predicate) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));\r\n}\r\n\r\nexport function FSharpMap__ForAll(m, predicate) {\r\n    return MapTreeModule_forall(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Fold(m, f, acc) {\r\n    return MapTreeModule_foldBack(f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__FoldSection(m, lo, hi, f, acc) {\r\n    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__Iterate(m, f) {\r\n    MapTreeModule_iter(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__MapRange(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Map(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Partition(m, predicate) {\r\n    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);\r\n    return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];\r\n}\r\n\r\nexport function FSharpMap__get_Count(m) {\r\n    return MapTreeModule_size(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ContainsKey(m, key) {\r\n    return MapTreeModule_mem(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Remove(m, key) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));\r\n}\r\n\r\nexport function FSharpMap__TryGetValue(__, key, value) {\r\n    const matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);\r\n    if (matchValue == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        const v = value_1(matchValue);\r\n        value.contents = v;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function FSharpMap__get_Keys(__) {\r\n    return map_2((kvp) => kvp[0], MapTreeModule_toArray(__.tree));\r\n}\r\n\r\nexport function FSharpMap__get_Values(__) {\r\n    return map_2((kvp) => kvp[1], MapTreeModule_toArray(__.tree));\r\n}\r\n\r\nexport function FSharpMap__TryFind(m, key) {\r\n    return MapTreeModule_tryFind(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToList(m) {\r\n    return MapTreeModule_toList(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToArray(m) {\r\n    return MapTreeModule_toArray(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ComputeHashCode(this$) {\r\n    const combineHash = (x, y) => (((x << 1) + y) + 631);\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const activePatternResult8263 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (combineHash(res, structuralHash(activePatternResult8263[0])) | 0);\r\n            res = (combineHash(res, structuralHash(activePatternResult8263[1])) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n    return res | 0;\r\n}\r\n\r\nexport function isEmpty(table) {\r\n    return FSharpMap__get_IsEmpty(table);\r\n}\r\n\r\nexport function add(key, value, table) {\r\n    return FSharpMap__Add(table, key, value);\r\n}\r\n\r\nexport function change(key, f, table) {\r\n    return FSharpMap__Change(table, key, f);\r\n}\r\n\r\nexport function find(key, table) {\r\n    return FSharpMap__get_Item(table, key);\r\n}\r\n\r\nexport function tryFind(key, table) {\r\n    return FSharpMap__TryFind(table, key);\r\n}\r\n\r\nexport function remove(key, table) {\r\n    return FSharpMap__Remove(table, key);\r\n}\r\n\r\nexport function containsKey(key, table) {\r\n    return FSharpMap__ContainsKey(table, key);\r\n}\r\n\r\nexport function iterate(action, table) {\r\n    FSharpMap__Iterate(table, action);\r\n}\r\n\r\nexport function tryPick(chooser, table) {\r\n    return FSharpMap__TryPick(table, chooser);\r\n}\r\n\r\nexport function pick(chooser, table) {\r\n    const matchValue = tryPick(chooser, table);\r\n    if (matchValue != null) {\r\n        return value_1(matchValue);\r\n    }\r\n    else {\r\n        throw (new Error());\r\n    }\r\n}\r\n\r\nexport function exists(predicate, table) {\r\n    return FSharpMap__Exists(table, predicate);\r\n}\r\n\r\nexport function filter(predicate, table) {\r\n    return FSharpMap__Filter(table, predicate);\r\n}\r\n\r\nexport function partition(predicate, table) {\r\n    return FSharpMap__Partition(table, predicate);\r\n}\r\n\r\nexport function forAll(predicate, table) {\r\n    return FSharpMap__ForAll(table, predicate);\r\n}\r\n\r\nexport function map(mapping, table) {\r\n    return FSharpMap__Map(table, mapping);\r\n}\r\n\r\nexport function fold(folder, state, table) {\r\n    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));\r\n}\r\n\r\nexport function foldBack(folder, table, state) {\r\n    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);\r\n}\r\n\r\nexport function toSeq(table) {\r\n    return map_1((kvp) => [kvp[0], kvp[1]], table);\r\n}\r\n\r\nexport function findKey(predicate, table) {\r\n    return pick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function tryFindKey(predicate, table) {\r\n    return tryPick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function ofList(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofSeq(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofArray(elements) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofArray(comparer, elements));\r\n}\r\n\r\nexport function toList(table) {\r\n    return FSharpMap__ToList(table);\r\n}\r\n\r\nexport function toArray(table) {\r\n    return FSharpMap__ToArray(table);\r\n}\r\n\r\nexport function keys(table) {\r\n    return FSharpMap__get_Keys(table);\r\n}\r\n\r\nexport function values(table) {\r\n    return FSharpMap__get_Values(table);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpMap_get_Empty();\r\n}\r\n\r\nexport function count(table) {\r\n    return FSharpMap__get_Count(table);\r\n}\r\n\r\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","import { disposeSafe, toIterator, getEnumerator } from \"./Util.js\";\r\nimport { iterate, map, iterateIndexed, concat } from \"./Seq.js\";\r\nimport { FSharpRef } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class HashSet {\r\n    constructor(items, comparer) {\r\n        const this$ = new FSharpRef(null);\r\n        this.comparer = comparer;\r\n        this$.contents = this;\r\n        this.hashMap = (new Map([]));\r\n        this[\"init@8-2\"] = 1;\r\n        const enumerator = getEnumerator(items);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const item = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                HashSet__Add_2B595(this$.contents, item);\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"HashSet\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const this$ = this;\r\n        return getEnumerator(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const this$ = this;\r\n        return getEnumerator(concat(this$.hashMap.values()));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\r\n        const this$ = this;\r\n        HashSet__Add_2B595(this$, item);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        const this$ = this;\r\n        HashSet__Clear(this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\r\n        const this$ = this;\r\n        return HashSet__Contains_2B595(this$, item);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\r\n        const this$ = this;\r\n        iterateIndexed((i, e) => {\r\n            array[arrayIndex + i] = e;\r\n        }, this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const this$ = this;\r\n        return HashSet__get_Count(this$) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return false;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\r\n        const this$ = this;\r\n        return HashSet__Remove_2B595(this$, item);\r\n    }\r\n    get size() {\r\n        const this$ = this;\r\n        return HashSet__get_Count(this$) | 0;\r\n    }\r\n    add(k) {\r\n        const this$ = this;\r\n        HashSet__Add_2B595(this$, k);\r\n        return this$;\r\n    }\r\n    clear() {\r\n        const this$ = this;\r\n        HashSet__Clear(this$);\r\n    }\r\n    delete(k) {\r\n        const this$ = this;\r\n        return HashSet__Remove_2B595(this$, k);\r\n    }\r\n    has(k) {\r\n        const this$ = this;\r\n        return HashSet__Contains_2B595(this$, k);\r\n    }\r\n    keys() {\r\n        const this$ = this;\r\n        return map((x) => x, this$);\r\n    }\r\n    values() {\r\n        const this$ = this;\r\n        return map((x) => x, this$);\r\n    }\r\n    entries() {\r\n        const this$ = this;\r\n        return map((v) => [v, v], this$);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const this$ = this;\r\n        iterate((x) => {\r\n            f(x, x, this$);\r\n        }, this$);\r\n    }\r\n}\r\n\r\nexport function HashSet$reflection(gen0) {\r\n    return class_type(\"Fable.Collections.HashSet\", [gen0], HashSet);\r\n}\r\n\r\nexport function HashSet_$ctor_Z6150332D(items, comparer) {\r\n    return new HashSet(items, comparer);\r\n}\r\n\r\nfunction HashSet__TryFindIndex_2B595(this$, k) {\r\n    const h = this$.comparer.GetHashCode(k) | 0;\r\n    let matchValue;\r\n    let outArg = null;\r\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\r\n        outArg = v;\r\n    })), outArg];\r\n    if (matchValue[0]) {\r\n        return [true, h, matchValue[1].findIndex((v_1) => this$.comparer.Equals(k, v_1))];\r\n    }\r\n    else {\r\n        return [false, h, -1];\r\n    }\r\n}\r\n\r\nfunction HashSet__TryFind_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return some(getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]]);\r\n        }\r\n        case 1: {\r\n            return void 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__get_Comparer(this$) {\r\n    return this$.comparer;\r\n}\r\n\r\nexport function HashSet__Clear(this$) {\r\n    this$.hashMap.clear();\r\n}\r\n\r\nexport function HashSet__get_Count(this$) {\r\n    let count = 0;\r\n    let enumerator = getEnumerator(this$.hashMap.values());\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const items = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            count = ((count + items.length) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n    return count | 0;\r\n}\r\n\r\nexport function HashSet__Add_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return false;\r\n        }\r\n        case 1: {\r\n            if (matchValue[0]) {\r\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push(k));\r\n                return true;\r\n            }\r\n            else {\r\n                this$.hashMap.set(matchValue[1], [k]);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__Contains_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__Remove_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { class_type } from \"./Reflection.js\";\r\nimport { fromNumber, op_Addition, toInt, toNumber, compare, fromInteger } from \"./Long.js\";\r\n\r\nfunction Native_random() {\r\n    return Math.random();\r\n}\r\n\r\nfunction Native_randomNext(min, max) {\r\n    \n        if (max < min) {\n            throw new Error(\"minValue must be less than maxValue\");\n        }\n        return Math.floor(Math.random() * (max - min)) + min\n        ;\r\n}\r\n\r\nfunction Native_randomBytes(buffer) {\r\n    \n        if (buffer == null) {\n            throw new Error(\"Buffer cannot be null\");\n        }\n        for (let i = 0; i < buffer.length; i += 6) {\n            // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n            let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n            const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n            for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n                if (j === 3) { r = rhi; }\n                buffer[i + j] = r & 255;\n                r >>>= 8;\n            }\n        };\r\n}\r\n\r\nexport class NonSeeded {\r\n    constructor() {\r\n    }\r\n    Next0() {\r\n        return Native_randomNext(0, 2147483647);\r\n    }\r\n    Next1(maxValue) {\r\n        return Native_randomNext(0, maxValue);\r\n    }\r\n    Next2(minValue, maxValue) {\r\n        return Native_randomNext(minValue, maxValue);\r\n    }\r\n    NextDouble() {\r\n        return Native_random();\r\n    }\r\n    NextBytes(buffer) {\r\n        Native_randomBytes(buffer);\r\n    }\r\n}\r\n\r\nexport function NonSeeded$reflection() {\r\n    return class_type(\"Random.NonSeeded\", void 0, NonSeeded);\r\n}\r\n\r\nexport function NonSeeded_$ctor() {\r\n    return new NonSeeded();\r\n}\r\n\r\nexport class Seeded {\r\n    constructor(seed) {\r\n        this.MBIG = 2147483647;\r\n        this.inext = 0;\r\n        this.inextp = 0;\r\n        this.seedArray = (new Int32Array(56));\r\n        let ii = 0;\r\n        let mj = 0;\r\n        let mk = 0;\r\n        const subtraction = ((seed === -2147483648) ? 2147483647 : Math.abs(seed)) | 0;\r\n        mj = ((161803398 - subtraction) | 0);\r\n        this.seedArray[55] = (mj | 0);\r\n        mk = 1;\r\n        for (let i = 1; i <= 54; i++) {\r\n            ii = (((21 * i) % 55) | 0);\r\n            this.seedArray[ii] = (mk | 0);\r\n            mk = ((mj - mk) | 0);\r\n            if (mk < 0) {\r\n                mk = ((mk + this.MBIG) | 0);\r\n            }\r\n            mj = (this.seedArray[ii] | 0);\r\n        }\r\n        for (let k = 1; k <= 4; k++) {\r\n            for (let i_1 = 1; i_1 <= 55; i_1++) {\r\n                this.seedArray[i_1] = ((this.seedArray[i_1] - this.seedArray[1 + ((i_1 + 30) % 55)]) | 0);\r\n                if (this.seedArray[i_1] < 0) {\r\n                    this.seedArray[i_1] = ((this.seedArray[i_1] + this.MBIG) | 0);\r\n                }\r\n            }\r\n        }\r\n        this.inext = 0;\r\n        this.inextp = 21;\r\n    }\r\n    Next0() {\r\n        const this$ = this;\r\n        return Seeded__InternalSample(this$) | 0;\r\n    }\r\n    Next1(maxValue) {\r\n        const this$ = this;\r\n        if (maxValue < 0) {\r\n            const exn = new Error(\"maxValue\", \"maxValue must be positive\");\r\n            throw exn;\r\n        }\r\n        return (~(~(Seeded__Sample(this$) * maxValue))) | 0;\r\n    }\r\n    Next2(minValue, maxValue) {\r\n        const this$ = this;\r\n        if (minValue > maxValue) {\r\n            const exn = new Error(\"minValue\", \"minValue must be less than maxValue\");\r\n            throw exn;\r\n        }\r\n        const range = fromInteger(maxValue - minValue, false, 2);\r\n        return ((compare(range, fromInteger(2147483647, false, 2)) <= 0) ? ((~(~(Seeded__Sample(this$) * toNumber(range)))) + minValue) : (~(~toInt(op_Addition(fromNumber(Seeded__GetSampleForLargeRange(this$) * toNumber(range), false), fromInteger(minValue, false, 2)))))) | 0;\r\n    }\r\n    NextDouble() {\r\n        const this$ = this;\r\n        return Seeded__Sample(this$);\r\n    }\r\n    NextBytes(buffer) {\r\n        const this$ = this;\r\n        if (buffer == null) {\r\n            const exn = new Error(\"buffer\");\r\n            throw exn;\r\n        }\r\n        for (let i = 0; i <= (buffer.length - 1); i++) {\r\n            buffer[i] = ((Seeded__InternalSample(this$) % ((~(~255)) + 1)) & 0xFF);\r\n        }\r\n    }\r\n}\r\n\r\nexport function Seeded$reflection() {\r\n    return class_type(\"Random.Seeded\", void 0, Seeded);\r\n}\r\n\r\nexport function Seeded_$ctor_Z524259A4(seed) {\r\n    return new Seeded(seed);\r\n}\r\n\r\nfunction Seeded__InternalSample(_) {\r\n    let retVal = 0;\r\n    let locINext = _.inext;\r\n    let locINextp = _.inextp;\r\n    locINext = ((locINext + 1) | 0);\r\n    if (locINext >= 56) {\r\n        locINext = 1;\r\n    }\r\n    locINextp = ((locINextp + 1) | 0);\r\n    if (locINextp >= 56) {\r\n        locINextp = 1;\r\n    }\r\n    retVal = ((_.seedArray[locINext] - _.seedArray[locINextp]) | 0);\r\n    if (retVal === _.MBIG) {\r\n        retVal = ((retVal - 1) | 0);\r\n    }\r\n    if (retVal < 0) {\r\n        retVal = ((retVal + _.MBIG) | 0);\r\n    }\r\n    _.seedArray[locINext] = (retVal | 0);\r\n    _.inext = (locINext | 0);\r\n    _.inextp = (locINextp | 0);\r\n    return retVal | 0;\r\n}\r\n\r\nexport function Seeded__Sample(this$) {\r\n    return Seeded__InternalSample(this$) * (1 / this$.MBIG);\r\n}\r\n\r\nexport function Seeded__GetSampleForLargeRange(this$) {\r\n    let result = Seeded__InternalSample(this$);\r\n    if ((Seeded__InternalSample(this$) % 2) === 0) {\r\n        result = (-result);\r\n    }\r\n    let d = result;\r\n    d = (d + (2147483647 - 1));\r\n    d = (d / (2 * ((2147483647 - 1) >>> 0)));\r\n    return d;\r\n}\r\n\r\nexport function nonSeeded() {\r\n    return NonSeeded_$ctor();\r\n}\r\n\r\nexport function seeded(seed) {\r\n    return Seeded_$ctor_Z524259A4(seed);\r\n}\r\n\r\n","import { compare } from \"./Util.js\";\r\nimport { unfold, delay } from \"./Seq.js\";\r\nimport { op_Addition, fromZero } from \"./BigInt.js\";\r\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\r\nimport { op_Addition as op_Addition_2, fromBits } from \"./Long.js\";\r\n\r\nexport function makeRangeStepFunction(step, stop, zero, add) {\r\n    const stepComparedWithZero = compare(step, zero) | 0;\r\n    if (stepComparedWithZero === 0) {\r\n        throw (new Error(\"The step of a range cannot be zero\"));\r\n    }\r\n    const stepGreaterThanZero = stepComparedWithZero > 0;\r\n    return (x) => {\r\n        const comparedWithLast = compare(x, stop) | 0;\r\n        return ((stepGreaterThanZero && (comparedWithLast <= 0)) ? true : ((!stepGreaterThanZero) && (comparedWithLast >= 0))) ? [x, add(x, step)] : (void 0);\r\n    };\r\n}\r\n\r\nexport function integralRangeStep(start, step, stop, zero, add) {\r\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\r\n    return delay(() => unfold(stepFn, start));\r\n}\r\n\r\nexport function rangeBigInt(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromZero(), op_Addition);\r\n}\r\n\r\nexport function rangeDecimal(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), op_Addition_1);\r\n}\r\n\r\nexport function rangeDouble(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\r\n}\r\n\r\nexport function rangeInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, false), op_Addition_2);\r\n}\r\n\r\nexport function rangeUInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, true), op_Addition_2);\r\n}\r\n\r\nexport function rangeChar(start, stop) {\r\n    const intStop = stop.charCodeAt(0) | 0;\r\n    return delay(() => unfold((c) => {\r\n        if (c <= intStop) {\r\n            return [String.fromCharCode(c), c + 1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, start.charCodeAt(0)));\r\n}\r\n\r\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nimport Decimal from \"./Decimal.js\";\nimport { fromInt as int64FromInt } from \"./Long.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class MethodInfo {\n    constructor(name, parameters, returnType) {\n        this.name = name;\n        this.parameters = parameters;\n        this.returnType = returnType;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport class GenericParameter extends TypeInfo {\n    constructor(name) {\n        super(name);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(\"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport function measure_type(fullname) {\n    return new TypeInfo(fullname);\n}\nexport function generic_type(name) {\n    return new GenericParameter(name);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof TypeInfo) {\n        const elemType = getElementType(info);\n        if (elemType != null) {\n            return name(elemType) + \"[]\";\n        }\n        else {\n            const i = info.fullname.lastIndexOf(\".\");\n            return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n        }\n    }\n    else {\n        return info.name;\n    }\n}\nexport function fullName(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return fullName(elemType) + \"[]\";\n    }\n    else if (t.generics == null || t.generics.length === 0) {\n        return t.fullname;\n    }\n    else {\n        return t.fullname + \"[\" + t.generics.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n}\nexport function namespace(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return namespace(elemType);\n    }\n    else {\n        const i = t.fullname.lastIndexOf(\".\");\n        return i === -1 ? \"\" : t.fullname.substr(0, i);\n    }\n}\nexport function isArray(t) {\n    return getElementType(t) != null;\n}\nexport function getElementType(t) {\n    var _a;\n    return t.fullname === \"[]\" && ((_a = t.generics) === null || _a === void 0 ? void 0 : _a.length) === 1 ? t.generics[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isGenericParameter(t) {\n    return t instanceof GenericParameter;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    return (t2.fullname === obj_type.fullname) || (t1.parent != null && (t1.parent.Equals(t2) || isSubclassOf(t1.parent, t2)));\n}\nfunction isErasedToNumber(t) {\n    return isEnum(t) || [\n        int8_type.fullname,\n        uint8_type.fullname,\n        int16_type.fullname,\n        uint16_type.fullname,\n        int32_type.fullname,\n        uint32_type.fullname,\n        float32_type.fullname,\n        float64_type.fullname,\n    ].includes(t.fullname);\n}\nexport function isInstanceOfType(t, o) {\n    if (t.fullname === obj_type.fullname)\n        return true;\n    switch (typeof o) {\n        case \"boolean\":\n            return t.fullname === bool_type.fullname;\n        case \"string\":\n            return t.fullname === string_type.fullname;\n        case \"function\":\n            return isFunction(t);\n        case \"number\":\n            return isErasedToNumber(t);\n        default:\n            return t.construct != null && o instanceof t.construct;\n    }\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else if (isErasedToNumber(t)) {\n        return 0;\n    }\n    else {\n        switch (t.fullname) {\n            case obj_type.fullname:\n                return {};\n            case bool_type.fullname:\n                return false;\n            case \"System.Int64\":\n            case \"System.UInt64\":\n                // typeof<int64> and typeof<uint64> get transformed to class_type(\"System.Int64\")\n                // and class_type(\"System.UInt64\") respectively. Test for the name of the primitive type.\n                return int64FromInt(0);\n            case decimal_type.fullname:\n                return new Decimal(0);\n            case char_type.fullname:\n                // Even though char is a value type, it's erased to string, and Unchecked.defaultof<char> is null\n                return null;\n            default:\n                throw new Error(`Cannot access constructor of ${t.fullname}`);\n        }\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    // Set always global and unicode flags for compatibility with dotnet, see #2925\n    let flags = \"gu\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    if (input == null) {\n        throw new Error(\"Input cannot ve null\");\n    }\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    reg.lastIndex = startAt;\n    const matches = [];\n    let m;\n    let lastMatchIndex = -1;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((m = reg.exec(input)) != null) {\n        // It can happen even global regex get stuck, see #2845\n        if (m.index === lastMatchIndex) {\n            reg.lastIndex++;\n        }\n        else {\n            lastMatchIndex = m.index;\n            matches.push(m);\n        }\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { clear, equals, isArrayLike, isDisposable, toIterator, disposeSafe, getEnumerator } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { Operators_Lock, Operators_NullArg } from \"./FSharp.Core.js\";\r\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\r\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\r\n\r\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\r\n\r\nexport function Enumerator_noReset() {\r\n    throw (new Error(SR_resetNotSupported));\r\n}\r\n\r\nexport function Enumerator_notStarted() {\r\n    throw (new Error(SR_enumerationNotStarted));\r\n}\r\n\r\nexport function Enumerator_alreadyFinished() {\r\n    throw (new Error(SR_enumerationAlreadyFinished));\r\n}\r\n\r\nexport class Enumerator_Seq {\r\n    constructor(f) {\r\n        this.f = f;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        const maxCount = 4;\r\n        let i = 0;\r\n        let str = \"seq [\";\r\n        const e = getEnumerator(xs);\r\n        try {\r\n            while ((i < maxCount) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                if (i > 0) {\r\n                    str = (str + \"; \");\r\n                }\r\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                i = ((i + 1) | 0);\r\n            }\r\n            if (i === maxCount) {\r\n                str = (str + \"; ...\");\r\n            }\r\n            return str + \"]\";\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n    GetEnumerator() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n}\r\n\r\nexport function Enumerator_Seq$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\r\n}\r\n\r\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\r\n    return new Enumerator_Seq(f);\r\n}\r\n\r\nexport class Enumerator_FromFunctions$1 {\r\n    constructor(current, next, dispose) {\r\n        this.current = current;\r\n        this.next = next;\r\n        this.dispose = dispose;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        return __.next();\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        Enumerator_noReset();\r\n    }\r\n    Dispose() {\r\n        const __ = this;\r\n        __.dispose();\r\n    }\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\r\n    return new Enumerator_FromFunctions$1(current, next, dispose);\r\n}\r\n\r\nexport function Enumerator_cast(e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        if (isDisposable(e)) {\r\n            disposeSafe(e);\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_concat(sources) {\r\n    let outerOpt = void 0;\r\n    let innerOpt = void 0;\r\n    let started = false;\r\n    let finished = false;\r\n    let curr = void 0;\r\n    const finish = () => {\r\n        finished = true;\r\n        if (innerOpt != null) {\r\n            const inner = innerOpt;\r\n            try {\r\n                disposeSafe(inner);\r\n            }\r\n            finally {\r\n                innerOpt = (void 0);\r\n            }\r\n        }\r\n        if (outerOpt != null) {\r\n            const outer = outerOpt;\r\n            try {\r\n                disposeSafe(outer);\r\n            }\r\n            finally {\r\n                outerOpt = (void 0);\r\n            }\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        else if (finished) {\r\n            Enumerator_alreadyFinished();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        let copyOfStruct;\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (finished) {\r\n            return false;\r\n        }\r\n        else {\r\n            let res = void 0;\r\n            while (res == null) {\r\n                const matchValue = [outerOpt, innerOpt];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const inner_1 = matchValue[1];\r\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                            res = true;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                disposeSafe(inner_1);\r\n                            }\r\n                            finally {\r\n                                innerOpt = (void 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const outer_1 = matchValue[0];\r\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\r\n                        }\r\n                        else {\r\n                            finish();\r\n                            res = false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    outerOpt = getEnumerator(sources);\r\n                }\r\n            }\r\n            return value_1(res);\r\n        }\r\n    }, () => {\r\n        if (!finished) {\r\n            finish();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_enumerateThenFinally(f, e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        try {\r\n            disposeSafe(e);\r\n        }\r\n        finally {\r\n            f();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\r\n    let started = false;\r\n    let curr = void 0;\r\n    let state = some(openf());\r\n    const dispose = () => {\r\n        if (state != null) {\r\n            const x_1 = value_1(state);\r\n            try {\r\n                closef(x_1);\r\n            }\r\n            finally {\r\n                state = (void 0);\r\n            }\r\n        }\r\n    };\r\n    const finish = () => {\r\n        try {\r\n            dispose();\r\n        }\r\n        finally {\r\n            curr = (void 0);\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (state != null) {\r\n            const s = value_1(state);\r\n            let matchValue_1;\r\n            try {\r\n                matchValue_1 = compute(s);\r\n            }\r\n            catch (matchValue) {\r\n                finish();\r\n                throw matchValue;\r\n            }\r\n            if (matchValue_1 != null) {\r\n                curr = matchValue_1;\r\n                return true;\r\n            }\r\n            else {\r\n                finish();\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, dispose);\r\n}\r\n\r\nexport function Enumerator_unfold(f, state) {\r\n    let curr = void 0;\r\n    let acc = state;\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (curr != null) {\r\n            const x = curr[0];\r\n            const st = curr[1];\r\n            return x;\r\n        }\r\n        else {\r\n            return Enumerator_notStarted();\r\n        }\r\n    }, () => {\r\n        curr = f(acc);\r\n        if (curr != null) {\r\n            const x_1 = curr[0];\r\n            const st_1 = curr[1];\r\n            acc = st_1;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, () => {\r\n    });\r\n}\r\n\r\nexport function indexNotFound() {\r\n    throw (new Error(SR_keyNotFoundAlt));\r\n}\r\n\r\nexport function checkNonNull(argName, arg) {\r\n    if (arg == null) {\r\n        Operators_NullArg(argName);\r\n    }\r\n}\r\n\r\nexport function mkSeq(f) {\r\n    return Enumerator_Seq_$ctor_673A07F2(f);\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return getEnumerator(xs);\r\n}\r\n\r\nexport function delay(generator) {\r\n    return mkSeq(() => getEnumerator(generator()));\r\n}\r\n\r\nexport function concat(sources) {\r\n    return mkSeq(() => Enumerator_concat(sources));\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    return mkSeq(() => Enumerator_unfold(generator, state));\r\n}\r\n\r\nexport function empty() {\r\n    return delay(() => (new Array(0)));\r\n}\r\n\r\nexport function singleton(x) {\r\n    return delay(() => singleton_1(x));\r\n}\r\n\r\nexport function ofArray(arr) {\r\n    return arr;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    if (xs instanceof FSharpList) {\r\n        return toArray_1(xs);\r\n    }\r\n    else {\r\n        return Array.from(xs);\r\n    }\r\n}\r\n\r\nexport function ofList(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function toList(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return ofArray_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        return ofSeq_1(xs);\r\n    }\r\n}\r\n\r\nexport function generate(create, compute, dispose) {\r\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\r\n}\r\n\r\nexport function generateIndexed(create, compute, dispose) {\r\n    return mkSeq(() => {\r\n        let i = -1;\r\n        return Enumerator_generateWhileSome(create, (x) => {\r\n            i = ((i + 1) | 0);\r\n            return compute(i, x);\r\n        }, dispose);\r\n    });\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return concat([xs, ys]);\r\n}\r\n\r\nexport function cast(xs) {\r\n    return mkSeq(() => {\r\n        checkNonNull(\"source\", xs);\r\n        return Enumerator_cast(getEnumerator(xs));\r\n    });\r\n}\r\n\r\nexport function choose(chooser, xs) {\r\n    return generate(() => ofSeq(xs), (e) => {\r\n        let curr = void 0;\r\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return curr;\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let c = 0;\r\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            while (((c === 0) && b1) && b2) {\r\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\r\n                if (c === 0) {\r\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                }\r\n            }\r\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function contains(value, xs, comparer) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function enumerateFromFunctions(create, moveNext, current) {\r\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\r\n        const matchValue = x_1;\r\n        if (isDisposable(matchValue)) {\r\n            disposeSafe(matchValue);\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateThenFinally(source, compensation) {\r\n    const compensation_1 = compensation;\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\r\n        }\r\n        catch (matchValue) {\r\n            compensation_1();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateUsing(resource, source) {\r\n    const compensation = () => {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            let copyOfStruct = resource;\r\n            disposeSafe(copyOfStruct);\r\n        }\r\n    };\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\r\n        }\r\n        catch (matchValue_1) {\r\n            compensation();\r\n            throw matchValue_1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateWhile(guard, xs) {\r\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    return choose((x) => {\r\n        if (f(x)) {\r\n            return some(x);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, xs);\r\n}\r\n\r\nexport function exists(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let found = false;\r\n            while (((!found) && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return found;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n            else {\r\n                return v;\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (predicate(c)) {\r\n                res = some(c);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function find(predicate, xs) {\r\n    const matchValue = tryFind(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(predicate, xs) {\r\n    return tryFindBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findBack(predicate, xs) {\r\n    const matchValue = tryFindBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (i_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\r\n                        return i;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return void 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function findIndex(predicate, xs) {\r\n    const matchValue = tryFindIndex(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, xs) {\r\n    return tryFindIndexBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(predicate, xs) {\r\n    const matchValue = tryFindIndexBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let acc = state;\r\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return acc;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let acc = state;\r\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return acc;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function forAll(predicate, xs) {\r\n    return !exists((x) => (!predicate(x)), xs);\r\n}\r\n\r\nexport function forAll2(predicate, xs, ys) {\r\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryHead_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryHead_2(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function head(xs) {\r\n    const matchValue = tryHead(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function initialize(count, f) {\r\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\r\n}\r\n\r\nexport function initializeInfinite(f) {\r\n    return initialize(2147483647, f);\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length === 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return isEmpty_1(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function tryItem(index, xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryItem_1(index, xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryItem_2(index, xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            const loop = (index_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const index_1 = index_1_mut;\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        return void 0;\r\n                    }\r\n                    else if (index_1 === 0) {\r\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    }\r\n                    else {\r\n                        index_1_mut = (index_1 - 1);\r\n                        continue loop;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(index);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function item(index, xs) {\r\n    const matchValue = tryItem(index, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function tryLast(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    return acc;\r\n                }\r\n                else {\r\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                    continue loop;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function length(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length | 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return length_1(xs) | 0;\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            let count = 0;\r\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                count = ((count + 1) | 0);\r\n            }\r\n            return count | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        const e3 = tupledArg[2];\r\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            try {\r\n                disposeSafe(tupledArg_1[1]);\r\n            }\r\n            finally {\r\n                disposeSafe(tupledArg_1[2]);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function readOnly(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return map((x) => x, xs);\r\n}\r\n\r\nexport class CachedSeq$1 {\r\n    constructor(cleanup, res) {\r\n        this.cleanup = cleanup;\r\n        this.res = res;\r\n    }\r\n    Dispose() {\r\n        const _ = this;\r\n        _.cleanup();\r\n    }\r\n    GetEnumerator() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n}\r\n\r\nexport function CachedSeq$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\r\n}\r\n\r\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\r\n    return new CachedSeq$1(cleanup, res);\r\n}\r\n\r\nexport function CachedSeq$1__Clear(_) {\r\n    _.cleanup();\r\n}\r\n\r\nexport function cache(source) {\r\n    checkNonNull(\"source\", source);\r\n    const prefix = [];\r\n    let enumeratorR = void 0;\r\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\r\n        Operators_Lock(prefix, () => {\r\n            clear(prefix);\r\n            let pattern_matching_result, e;\r\n            if (enumeratorR != null) {\r\n                if (value_1(enumeratorR) != null) {\r\n                    pattern_matching_result = 0;\r\n                    e = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    pattern_matching_result = 1;\r\n                }\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n            switch (pattern_matching_result) {\r\n                case 0: {\r\n                    disposeSafe(e);\r\n                    break;\r\n                }\r\n            }\r\n            enumeratorR = (void 0);\r\n        });\r\n    }, unfold((i_1) => Operators_Lock(prefix, () => {\r\n        if (i_1 < prefix.length) {\r\n            return [prefix[i_1], i_1 + 1];\r\n        }\r\n        else {\r\n            if (i_1 >= prefix.length) {\r\n                let optEnumerator_2;\r\n                if (enumeratorR != null) {\r\n                    optEnumerator_2 = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    const optEnumerator = getEnumerator(source);\r\n                    enumeratorR = some(optEnumerator);\r\n                    optEnumerator_2 = optEnumerator;\r\n                }\r\n                if (optEnumerator_2 == null) {\r\n                }\r\n                else {\r\n                    const enumerator = optEnumerator_2;\r\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                    }\r\n                    else {\r\n                        disposeSafe(enumerator);\r\n                        enumeratorR = some(void 0);\r\n                    }\r\n                }\r\n            }\r\n            return (i_1 < prefix.length) ? [prefix[i_1], i_1 + 1] : (void 0);\r\n        }\r\n    }), 0));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const ysCache = cache(ys);\r\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function tryPick(chooser, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function pick(chooser, xs) {\r\n    const matchValue = tryPick(chooser, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function reduce(folder, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else {\r\n            throw (new Error(SR_inputSequenceEmpty));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function reduceBack(folder, xs) {\r\n    const arr = toArray(xs);\r\n    if (arr.length > 0) {\r\n        return arr.reduceRight(folder);\r\n    }\r\n    else {\r\n        throw (new Error(SR_inputSequenceEmpty));\r\n    }\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return delay(() => ofArray(reverse_1(toArray(xs))));\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    return delay(() => {\r\n        let acc = state;\r\n        return concat([singleton(state), map((x) => {\r\n            acc = folder(acc, x);\r\n            return acc;\r\n        }, xs)]);\r\n    });\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\r\n}\r\n\r\nexport function skip(count, source) {\r\n    return mkSeq(() => {\r\n        const e = ofSeq(source);\r\n        try {\r\n            for (let _ = 1; _ <= count; _++) {\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n                }\r\n            }\r\n            return Enumerator_enumerateThenFinally(() => {\r\n            }, e);\r\n        }\r\n        catch (matchValue) {\r\n            disposeSafe(e);\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function skipWhile(predicate, xs) {\r\n    return delay(() => {\r\n        let skipped = true;\r\n        return filter((x) => {\r\n            if (skipped) {\r\n                skipped = predicate(x);\r\n            }\r\n            return !skipped;\r\n        }, xs);\r\n    });\r\n}\r\n\r\nexport function tail(xs) {\r\n    return skip(1, xs);\r\n}\r\n\r\nexport function take(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < count) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    return delay(() => concat(map(mapping, xs)));\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs)))));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs)))));\r\n}\r\n\r\nexport function transpose(xss) {\r\n    return delay(() => ofArray(map_1(ofArray, transpose_1(map_1(toArray, toArray(xss))))));\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    return delay(() => {\r\n        const arr = toArray(xs);\r\n        arr.sort(comparer);\r\n        return ofArray(arr);\r\n    });\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if (i === index) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let status = -1;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        if (i === index) {\r\n            status = 0;\r\n        }\r\n        let inserted;\r\n        if (status === 0) {\r\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                status = 1;\r\n                inserted = (void 0);\r\n            }\r\n        }\r\n        else {\r\n            inserted = (void 0);\r\n        }\r\n        if (inserted == null) {\r\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                if (status < 1) {\r\n                    throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n                }\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return some(value_1(inserted));\r\n        }\r\n    }, (tupledArg_1) => {\r\n        disposeSafe(tupledArg_1[0]);\r\n        disposeSafe(tupledArg_1[1]);\r\n    });\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < index) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n        }\r\n        else {\r\n            if (i === index) {\r\n                for (let _ = 1; _ <= count; _++) {\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\"));\r\n                    }\r\n                }\r\n            }\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { toString, Record } from \"./Types.js\";\r\nimport { FSharpList, fold as fold_2, cons, singleton as singleton_1, empty as empty_1, ofArrayWithTail, tail, head, isEmpty as isEmpty_1 } from \"./List.js\";\r\nimport { fold as fold_1, fill } from \"./Array.js\";\r\nimport { structuralHash, toIterator, disposeSafe, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { join } from \"./String.js\";\r\nimport { exists as exists_1, cache, forAll as forAll_1, fold as fold_3, reduce, iterate as iterate_1, map as map_1 } from \"./Seq.js\";\r\nimport { HashSet__get_Comparer, HashSet_$ctor_Z6150332D, HashSet } from \"./MutableSet.js\";\r\n\r\nexport class SetTreeLeaf$1 {\r\n    constructor(k) {\r\n        this.k = k;\r\n    }\r\n}\r\n\r\nexport function SetTreeLeaf$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\r\n}\r\n\r\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\r\n    return new SetTreeLeaf$1(k);\r\n}\r\n\r\nexport function SetTreeLeaf$1__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\r\n    constructor(v, left, right, h) {\r\n        super(v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function SetTreeNode$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));\r\n}\r\n\r\nexport function SetTreeNode$1_$ctor_Z6E7BE5F7(v, left, right, h) {\r\n    return new SetTreeNode$1(v, left, right, h);\r\n}\r\n\r\nexport function SetTreeNode$1__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function SetTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\r\n    SetTreeModule_countAux:\r\n    while (true) {\r\n        const t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);\r\n                continue SetTreeModule_countAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_count(s) {\r\n    return SetTreeModule_countAux(s, 0);\r\n}\r\n\r\nexport function SetTreeModule_mk(l, k, r) {\r\n    let hl;\r\n    const t = l;\r\n    if (t != null) {\r\n        const t2 = t;\r\n        hl = ((t2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const t_1 = r;\r\n    if (t_1 != null) {\r\n        const t2_1 = t_1;\r\n        hr = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m = ((hl < hr) ? hr : hl) | 0;\r\n    if (m === 0) {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n    else {\r\n        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, l, r, m + 1);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_rebalance(t1, v, t2) {\r\n    let t_2, t2_3, t_3, t2_4;\r\n    let t1h;\r\n    const t = t1;\r\n    if (t != null) {\r\n        const t2_1 = t;\r\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const t_1 = t2;\r\n    if (t_1 != null) {\r\n        const t2_2 = t_1;\r\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_2) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof SetTreeNode$1) {\r\n            if (((t_2 = SetTreeNode$1__get_Left(matchValue), (t_2 != null) ? ((t2_3 = t_2, (t2_3 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_3) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(SetTreeNode$1__get_Left(matchValue));\r\n                if (matchValue_1 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof SetTreeNode$1) {\r\n            if (((t_3 = SetTreeNode$1__get_Right(matchValue_2), (t_3 != null) ? ((t2_4 = t_3, (t2_4 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_4) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(SetTreeNode$1__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_mk(t1, v, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_add(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c_1 < 0) {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, SetTreeModule_empty(), t, 2);\r\n            }\r\n            else if (c_1 === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, t, SetTreeModule_empty(), 2);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if ((SetTreeNode$1__get_Height(t1$0027) + 2) < SetTreeNode$1__get_Height(t2$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\r\n                    }\r\n                    else if ((SetTreeNode$1__get_Height(t2$0027) + 2) < SetTreeNode$1__get_Height(t1$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k, t2));\r\n                    }\r\n                    else {\r\n                        return SetTreeModule_mk(t1, k, t2);\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\r\n            }\r\n        }\r\n        else {\r\n            return SetTreeModule_add(comparer, k, t1);\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_add(comparer, k, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_split(comparer, pivot, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c < 0) {\r\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n            else if (c === 0) {\r\n                return [SetTreeNode$1__get_Left(t2), true, SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));\r\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\r\n            if (c_1 < 0) {\r\n                return [t, false, SetTreeModule_empty()];\r\n            }\r\n            else if (c_1 === 0) {\r\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\r\n            }\r\n            else {\r\n                return [SetTreeModule_empty(), false, t];\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_spliceOutSuccessor(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (SetTreeNode$1__get_Left(t2) == null) {\r\n                return [SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n        }\r\n        else {\r\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Set.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_remove(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                if (SetTreeNode$1__get_Left(t2) == null) {\r\n                    return SetTreeNode$1__get_Right(t2);\r\n                }\r\n                else if (SetTreeNode$1__get_Right(t2) == null) {\r\n                    return SetTreeNode$1__get_Left(t2);\r\n                }\r\n                else {\r\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));\r\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return SetTreeModule_empty();\r\n        }\r\n        else {\r\n            return t;\r\n        }\r\n    }\r\n    else {\r\n        return t;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\r\n    SetTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Left(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_iter(f_mut, t_mut) {\r\n    SetTreeModule_iter:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_iter;\r\n            }\r\n            else {\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\r\n    SetTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut, x = x_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));\r\n                continue SetTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBack(f, m, x) {\r\n    return SetTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\r\n    SetTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_fold(f, x, m) {\r\n    return SetTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function SetTreeModule_forall(f_mut, t_mut) {\r\n    SetTreeModule_forall:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) && SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2))) {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_forall;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_exists(f_mut, t_mut) {\r\n    SetTreeModule_exists:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_exists;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_subset(comparer, a, b) {\r\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\r\n}\r\n\r\nexport function SetTreeModule_properSubset(comparer, a, b) {\r\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\r\n        return SetTreeModule_exists((x_1) => (!SetTreeModule_mem(comparer, x_1, a)), b);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\r\n    SetTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);\r\n                continue SetTreeModule_filterAux;\r\n            }\r\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filter(comparer, f, s) {\r\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\r\n    SetTreeModule_diffAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\r\n        if (acc == null) {\r\n            return acc;\r\n        }\r\n        else if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                comparer_mut = comparer;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));\r\n                continue SetTreeModule_diffAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_diff(comparer, a, b) {\r\n    return SetTreeModule_diffAux(comparer, b, a);\r\n}\r\n\r\nexport function SetTreeModule_union(comparer, t1, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {\r\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));\r\n                    }\r\n                    else {\r\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n            }\r\n        }\r\n        else {\r\n            return t1;\r\n        }\r\n    }\r\n    else {\r\n        return t2;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\r\n    SetTreeModule_intersectionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);\r\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;\r\n                comparer_mut = comparer;\r\n                b_mut = b;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = acc_2;\r\n                continue SetTreeModule_intersectionAux;\r\n            }\r\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersection(comparer, a, b) {\r\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\r\n    if (f(k)) {\r\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {\r\n    SetTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);\r\n                const acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue SetTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partition(comparer, f, s) {\r\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_minimumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_minimumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_maximumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_maximumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElement(s) {\r\n    const matchValue = SetTreeModule_minimumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElement(s) {\r\n    const matchValue = SetTreeModule_maximumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport class SetTreeModule_SetIterator$1 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_SetIterator$1$reflection(gen0) {\r\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1$reflection(gen0)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function SetTreeModule_collapseLHS(stack_mut) {\r\n    SetTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const x = head(stack);\r\n            const rest = tail(stack);\r\n            if (x != null) {\r\n                const x2 = x;\r\n                if (x2 instanceof SetTreeNode$1) {\r\n                    stack_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)), SetTreeNode$1__get_Right(x2)], rest);\r\n                    continue SetTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue SetTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIterator(s) {\r\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(singleton_1(s)), false);\r\n}\r\n\r\nexport function SetTreeModule_notStarted() {\r\n    throw (new Error(\"Enumeration not started\"));\r\n}\r\n\r\nexport function SetTreeModule_alreadyFinished() {\r\n    throw (new Error(\"Enumeration already started\"));\r\n}\r\n\r\nexport function SetTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (isEmpty_1(matchValue)) {\r\n            return SetTreeModule_alreadyFinished();\r\n        }\r\n        else if (head(matchValue) != null) {\r\n            const t = head(matchValue);\r\n            return SetTreeLeaf$1__get_Key(t);\r\n        }\r\n        else {\r\n            throw (new Error(\"Please report error: Set iterator, unexpected stack for current\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const t = head(matchValue);\r\n                if (t instanceof SetTreeNode$1) {\r\n                    throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = SetTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIEnumerator(s) {\r\n    let i = SetTreeModule_mkIterator(s);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return SetTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = SetTreeModule_mkIterator(s);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\r\n    SetTreeModule_compareStacks:\r\n    while (true) {\r\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\r\n        const matchValue = [l1, l2];\r\n        if (!isEmpty_1(matchValue[0])) {\r\n            if (!isEmpty_1(matchValue[1])) {\r\n                if (head(matchValue[1]) != null) {\r\n                    if (head(matchValue[0]) != null) {\r\n                        const x1_3 = head(matchValue[0]);\r\n                        const x2_3 = head(matchValue[1]);\r\n                        if (x1_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x1_3) == null) {\r\n                                if (x2_3 instanceof SetTreeNode$1) {\r\n                                    if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                        if (c !== 0) {\r\n                                            return c | 0;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                            l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        const matchValue_3 = [l1, l2];\r\n                                        let pattern_matching_result, t1_6, x1_4, t2_6, x2_4;\r\n                                        if (!isEmpty_1(matchValue_3[0])) {\r\n                                            if (head(matchValue_3[0]) != null) {\r\n                                                pattern_matching_result = 0;\r\n                                                t1_6 = tail(matchValue_3[0]);\r\n                                                x1_4 = head(matchValue_3[0]);\r\n                                            }\r\n                                            else if (!isEmpty_1(matchValue_3[1])) {\r\n                                                if (head(matchValue_3[1]) != null) {\r\n                                                    pattern_matching_result = 1;\r\n                                                    t2_6 = tail(matchValue_3[1]);\r\n                                                    x2_4 = head(matchValue_3[1]);\r\n                                                }\r\n                                                else {\r\n                                                    pattern_matching_result = 2;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else if (!isEmpty_1(matchValue_3[1])) {\r\n                                            if (head(matchValue_3[1]) != null) {\r\n                                                pattern_matching_result = 1;\r\n                                                t2_6 = tail(matchValue_3[1]);\r\n                                                x2_4 = head(matchValue_3[1]);\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result = 2;\r\n                                        }\r\n                                        switch (pattern_matching_result) {\r\n                                            case 0: {\r\n                                                if (x1_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0)], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 1: {\r\n                                                if (x2_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0)], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 2: {\r\n                                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                    if (c_1 !== 0) {\r\n                                        return c_1 | 0;\r\n                                    }\r\n                                    else {\r\n                                        comparer_mut = comparer;\r\n                                        l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                        l2_mut = cons(SetTreeModule_empty(), tail(matchValue[1]));\r\n                                        continue SetTreeModule_compareStacks;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_4 = [l1, l2];\r\n                                let pattern_matching_result_1, t1_7, x1_5, t2_7, x2_5;\r\n                                if (!isEmpty_1(matchValue_4[0])) {\r\n                                    if (head(matchValue_4[0]) != null) {\r\n                                        pattern_matching_result_1 = 0;\r\n                                        t1_7 = tail(matchValue_4[0]);\r\n                                        x1_5 = head(matchValue_4[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_4[1])) {\r\n                                        if (head(matchValue_4[1]) != null) {\r\n                                            pattern_matching_result_1 = 1;\r\n                                            t2_7 = tail(matchValue_4[1]);\r\n                                            x2_5 = head(matchValue_4[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_1 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_4[1])) {\r\n                                    if (head(matchValue_4[1]) != null) {\r\n                                        pattern_matching_result_1 = 1;\r\n                                        t2_7 = tail(matchValue_4[1]);\r\n                                        x2_5 = head(matchValue_4[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_1 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_1) {\r\n                                    case 0: {\r\n                                        if (x1_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0)], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0)], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (x2_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                if (c_2 !== 0) {\r\n                                    return c_2 | 0;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = cons(SetTreeModule_empty(), tail(matchValue[0]));\r\n                                    l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_5 = [l1, l2];\r\n                                let pattern_matching_result_2, t1_8, x1_6, t2_8, x2_6;\r\n                                if (!isEmpty_1(matchValue_5[0])) {\r\n                                    if (head(matchValue_5[0]) != null) {\r\n                                        pattern_matching_result_2 = 0;\r\n                                        t1_8 = tail(matchValue_5[0]);\r\n                                        x1_6 = head(matchValue_5[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_5[1])) {\r\n                                        if (head(matchValue_5[1]) != null) {\r\n                                            pattern_matching_result_2 = 1;\r\n                                            t2_8 = tail(matchValue_5[1]);\r\n                                            x2_6 = head(matchValue_5[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_2 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_5[1])) {\r\n                                    if (head(matchValue_5[1]) != null) {\r\n                                        pattern_matching_result_2 = 1;\r\n                                        t2_8 = tail(matchValue_5[1]);\r\n                                        x2_6 = head(matchValue_5[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_2 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_2) {\r\n                                    case 0: {\r\n                                        if (x1_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0)], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0)], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                            if (c_3 !== 0) {\r\n                                return c_3 | 0;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = tail(matchValue[0]);\r\n                                l2_mut = tail(matchValue[1]);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const x2 = head(matchValue[1]);\r\n                        const matchValue_1 = [l1, l2];\r\n                        let pattern_matching_result_3, t1_2, x1, t2_2, x2_1;\r\n                        if (!isEmpty_1(matchValue_1[0])) {\r\n                            if (head(matchValue_1[0]) != null) {\r\n                                pattern_matching_result_3 = 0;\r\n                                t1_2 = tail(matchValue_1[0]);\r\n                                x1 = head(matchValue_1[0]);\r\n                            }\r\n                            else if (!isEmpty_1(matchValue_1[1])) {\r\n                                if (head(matchValue_1[1]) != null) {\r\n                                    pattern_matching_result_3 = 1;\r\n                                    t2_2 = tail(matchValue_1[1]);\r\n                                    x2_1 = head(matchValue_1[1]);\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_3 = 2;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_1[1])) {\r\n                            if (head(matchValue_1[1]) != null) {\r\n                                pattern_matching_result_3 = 1;\r\n                                t2_2 = tail(matchValue_1[1]);\r\n                                x2_1 = head(matchValue_1[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_3 = 2;\r\n                        }\r\n                        switch (pattern_matching_result_3) {\r\n                            case 0: {\r\n                                if (x1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0)], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 1: {\r\n                                if (x2_1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0)], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 2: {\r\n                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (head(matchValue[0]) != null) {\r\n                    const x1_1 = head(matchValue[0]);\r\n                    const matchValue_2 = [l1, l2];\r\n                    let pattern_matching_result_4, t1_4, x1_2, t2_4, x2_2;\r\n                    if (!isEmpty_1(matchValue_2[0])) {\r\n                        if (head(matchValue_2[0]) != null) {\r\n                            pattern_matching_result_4 = 0;\r\n                            t1_4 = tail(matchValue_2[0]);\r\n                            x1_2 = head(matchValue_2[0]);\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_2[1])) {\r\n                            if (head(matchValue_2[1]) != null) {\r\n                                pattern_matching_result_4 = 1;\r\n                                t2_4 = tail(matchValue_2[1]);\r\n                                x2_2 = head(matchValue_2[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_4 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else if (!isEmpty_1(matchValue_2[1])) {\r\n                        if (head(matchValue_2[1]) != null) {\r\n                            pattern_matching_result_4 = 1;\r\n                            t2_4 = tail(matchValue_2[1]);\r\n                            x2_2 = head(matchValue_2[1]);\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else {\r\n                        pattern_matching_result_4 = 2;\r\n                    }\r\n                    switch (pattern_matching_result_4) {\r\n                        case 0: {\r\n                            if (x1_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0)], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 1: {\r\n                            if (x2_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0)], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 2: {\r\n                            throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    l1_mut = tail(matchValue[0]);\r\n                    l2_mut = tail(matchValue[1]);\r\n                    continue SetTreeModule_compareStacks;\r\n                }\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        }\r\n        else if (isEmpty_1(matchValue[1])) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_compare(comparer, t1, t2) {\r\n    if (t1 == null) {\r\n        if (t2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (t2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return SetTreeModule_compareStacks(comparer, singleton_1(t1), singleton_1(t2)) | 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_choose(s) {\r\n    return SetTreeModule_minimumElement(s);\r\n}\r\n\r\nexport function SetTreeModule_toList(t) {\r\n    const loop = (t$0027_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const t$0027 = t$0027_mut, acc = acc_mut;\r\n            if (t$0027 != null) {\r\n                const t2 = t$0027;\r\n                if (t2 instanceof SetTreeNode$1) {\r\n                    t$0027_mut = SetTreeNode$1__get_Left(t2);\r\n                    acc_mut = cons(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons(SetTreeLeaf$1__get_Key(t2), acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(t, empty_1());\r\n}\r\n\r\nexport function SetTreeModule_copyToArray(s, arr, i) {\r\n    let j = i;\r\n    SetTreeModule_iter((x) => {\r\n        arr[j] = x;\r\n        j = ((j + 1) | 0);\r\n    }, s);\r\n}\r\n\r\nexport function SetTreeModule_toArray(s) {\r\n    const n = SetTreeModule_count(s) | 0;\r\n    const res = fill(new Array(n), 0, n, null);\r\n    SetTreeModule_copyToArray(s, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    SetTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            comparer_mut = comparer;\r\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\r\n            e_mut = e;\r\n            continue SetTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_ofArray(comparer, l) {\r\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofList(comparer, l) {\r\n    return fold_2((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return SetTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return SetTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            disposeSafe(ie);\r\n        }\r\n    }\r\n}\r\n\r\nexport class FSharpSet {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpSet__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        return (that instanceof FSharpSet) && (SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0);\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"set [\" + join(\"; \", map_1((x) => {\r\n            let copyOfStruct = x;\r\n            return toString(copyOfStruct);\r\n        }, this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpSet\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(that) {\r\n        const s = this;\r\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const s = this;\r\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const s = this;\r\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    get size() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    add(k) {\r\n        const s = this;\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return s;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n    }\r\n    delete(k) {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return false;\r\n    }\r\n    has(k) {\r\n        const s = this;\r\n        return FSharpSet__Contains(s, k);\r\n    }\r\n    keys() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    values() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    entries() {\r\n        const s = this;\r\n        return map_1((v) => [v, v], s);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const s = this;\r\n        iterate_1((x) => {\r\n            f(x, x, s);\r\n        }, s);\r\n    }\r\n}\r\n\r\nexport function FSharpSet$reflection(gen0) {\r\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\r\n}\r\n\r\nexport function FSharpSet_$ctor(comparer, tree) {\r\n    return new FSharpSet(comparer, tree);\r\n}\r\n\r\nexport function FSharpSet__get_Comparer(set$) {\r\n    return set$.comparer;\r\n}\r\n\r\nexport function FSharpSet__get_Tree(set$) {\r\n    return set$.tree;\r\n}\r\n\r\nexport function FSharpSet_Empty(comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\r\n}\r\n\r\nexport function FSharpSet__Add(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Remove(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__get_Count(s) {\r\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Contains(s, value) {\r\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Iterate(s, x) {\r\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Fold(s, f, z) {\r\n    const f_1 = f;\r\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__get_IsEmpty(s) {\r\n    return FSharpSet__get_Tree(s) == null;\r\n}\r\n\r\nexport function FSharpSet__Partition(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return [s, s];\r\n    }\r\n    else {\r\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\r\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Filter(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return s;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Map(s, f, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Exists(s, f) {\r\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__ForAll(s, f) {\r\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet_op_Subtraction(set1, set2) {\r\n    if (FSharpSet__get_Tree(set1) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_op_Addition(set1, set2) {\r\n    if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set1) == null) {\r\n        return set2;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_Intersection(a, b) {\r\n    if (FSharpSet__get_Tree(b) == null) {\r\n        return b;\r\n    }\r\n    else if (FSharpSet__get_Tree(a) == null) {\r\n        return a;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_IntersectionMany(sets) {\r\n    return reduce(FSharpSet_Intersection, sets);\r\n}\r\n\r\nexport function FSharpSet_Equality(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\r\n}\r\n\r\nexport function FSharpSet_Compare(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\r\n}\r\n\r\nexport function FSharpSet__get_Choose(x) {\r\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MinimumElement(x) {\r\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MaximumElement(x) {\r\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToList(x) {\r\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToArray(x) {\r\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ComputeHashCode(this$) {\r\n    let y;\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (((y = (structuralHash(x_1) | 0), ((res << 1) + y) + 631)) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n    return Math.abs(res) | 0;\r\n}\r\n\r\nexport function isEmpty(set$) {\r\n    return FSharpSet__get_IsEmpty(set$);\r\n}\r\n\r\nexport function contains(element, set$) {\r\n    return FSharpSet__Contains(set$, element);\r\n}\r\n\r\nexport function add(value, set$) {\r\n    return FSharpSet__Add(set$, value);\r\n}\r\n\r\nexport function singleton(value, comparer) {\r\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\r\n}\r\n\r\nexport function remove(value, set$) {\r\n    return FSharpSet__Remove(set$, value);\r\n}\r\n\r\nexport function union(set1, set2) {\r\n    return FSharpSet_op_Addition(set1, set2);\r\n}\r\n\r\nexport function unionMany(sets, comparer) {\r\n    return fold_3(FSharpSet_op_Addition, FSharpSet_Empty(comparer), sets);\r\n}\r\n\r\nexport function intersect(set1, set2) {\r\n    return FSharpSet_Intersection(set1, set2);\r\n}\r\n\r\nexport function intersectMany(sets) {\r\n    return FSharpSet_IntersectionMany(sets);\r\n}\r\n\r\nexport function iterate(action, set$) {\r\n    FSharpSet__Iterate(set$, action);\r\n}\r\n\r\nexport function empty(comparer) {\r\n    return FSharpSet_Empty(comparer);\r\n}\r\n\r\nexport function forAll(predicate, set$) {\r\n    return FSharpSet__ForAll(set$, predicate);\r\n}\r\n\r\nexport function exists(predicate, set$) {\r\n    return FSharpSet__Exists(set$, predicate);\r\n}\r\n\r\nexport function filter(predicate, set$) {\r\n    return FSharpSet__Filter(set$, predicate);\r\n}\r\n\r\nexport function partition(predicate, set$) {\r\n    return FSharpSet__Partition(set$, predicate);\r\n}\r\n\r\nexport function fold(folder, state, set$) {\r\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\r\n}\r\n\r\nexport function foldBack(folder, set$, state) {\r\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\r\n}\r\n\r\nexport function map(mapping, set$, comparer) {\r\n    return FSharpSet__Map(set$, mapping, comparer);\r\n}\r\n\r\nexport function count(set$) {\r\n    return FSharpSet__get_Count(set$);\r\n}\r\n\r\nexport function ofList(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function ofArray(array, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\r\n}\r\n\r\nexport function toList(set$) {\r\n    return FSharpSet__ToList(set$);\r\n}\r\n\r\nexport function toArray(set$) {\r\n    return FSharpSet__ToArray(set$);\r\n}\r\n\r\nexport function toSeq(set$) {\r\n    return map_1((x) => x, set$);\r\n}\r\n\r\nexport function ofSeq(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function difference(set1, set2) {\r\n    return FSharpSet_op_Subtraction(set1, set2);\r\n}\r\n\r\nexport function isSubset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isSuperset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function isProperSubset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isProperSuperset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function minElement(set$) {\r\n    return FSharpSet__get_MinimumElement(set$);\r\n}\r\n\r\nexport function maxElement(set$) {\r\n    return FSharpSet__get_MaximumElement(set$);\r\n}\r\n\r\nexport function unionWith(s1, s2) {\r\n    return fold_3((acc, x) => acc.add(x), s1, s2);\r\n}\r\n\r\nexport function newMutableSetWith(s1, s2) {\r\n    if (s1 instanceof HashSet) {\r\n        return HashSet_$ctor_Z6150332D(s2, HashSet__get_Comparer(s1));\r\n    }\r\n    else {\r\n        return new Set(s2);\r\n    }\r\n}\r\n\r\nexport function intersectWith(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    iterate_1((x) => {\r\n        if (!s2_1.has(x)) {\r\n            s1.delete(x);\r\n        }\r\n    }, s1.values());\r\n}\r\n\r\nexport function exceptWith(s1, s2) {\r\n    iterate_1((x) => {\r\n        s1.delete(x);\r\n    }, s2);\r\n}\r\n\r\nexport function isSubsetOf(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    return forAll_1((arg00) => s2_1.has(arg00), s1.values());\r\n}\r\n\r\nexport function isSupersetOf(s1, s2) {\r\n    return forAll_1((arg00) => s1.has(arg00), s2);\r\n}\r\n\r\nexport function isProperSubsetOf(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    if (s2_1.size > s1.size) {\r\n        return forAll_1((arg00) => s2_1.has(arg00), s1.values());\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function isProperSupersetOf(s1, s2) {\r\n    const s2_1 = cache(s2);\r\n    if (exists_1((arg) => (!s1.has(arg)), s2_1)) {\r\n        return forAll_1((arg00_1) => s1.has(arg00_1), s2_1);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        if (idx < 0 || idx >= args.length) {\n            throw new Error(\"Index must be greater or equal to zero and less than the arguments' length.\");\n        }\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            const decimalPartLength = decimalPart != null ? decimalPart.length : 0;\n                            rep = toFixed(rep, Math.max(decimalPartLength - 1, 0));\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const [intPart, decimalPart] = rep.split(\".\");\n                                const i = intPart.length % 3;\n                                const thousandGroups = Math.floor(intPart.length / 3);\n                                let thousands = i > 0 ? intPart.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += intPart.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                rep = decimalPart ? thousands + \".\" + decimalPart : thousands;\n                            }\n                            // In .NET you can mix 0/# placeholders but for simplicity we only check the left most character\n                            intPart = intPart.replace(/,/g, \"\");\n                            const intPartLength = intPart.length > 0 && intPart[0] === \"0\" ? intPart.length : 0;\n                            return padLeft(rep, intPartLength - sign.length + decimalPartLength, \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","import { substring, format, isNullOrEmpty, join } from \"./String.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { clear, int32ToString } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\n\r\nexport class StringBuilder {\r\n    constructor(value, capacity) {\r\n        this.buf = [];\r\n        if (!isNullOrEmpty(value)) {\r\n            void (this.buf.push(value));\r\n        }\r\n    }\r\n    toString() {\r\n        const __ = this;\r\n        return join(\"\", __.buf);\r\n    }\r\n}\r\n\r\nexport function StringBuilder$reflection() {\r\n    return class_type(\"System.Text.StringBuilder\", void 0, StringBuilder);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z18115A39(value, capacity) {\r\n    return new StringBuilder(value, capacity);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z524259A4(capacity) {\r\n    return StringBuilder_$ctor_Z18115A39(\"\", capacity);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z721C83C5(value) {\r\n    return StringBuilder_$ctor_Z18115A39(value, 16);\r\n}\r\n\r\nexport function StringBuilder_$ctor() {\r\n    return StringBuilder_$ctor_Z18115A39(\"\", 16);\r\n}\r\n\r\nexport function StringBuilder__Append_Z721C83C5(x, s) {\r\n    void (x.buf.push(s));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_244C7CD6(x, c) {\r\n    void (x.buf.push(c));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_Z524259A4(x, o) {\r\n    void (x.buf.push(int32ToString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_5E38073B(x, o) {\r\n    void (x.buf.push(o.toString()));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_Z1FBCCD16(x, o) {\r\n    void (x.buf.push(toString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_4E60E31B(x, o) {\r\n    void (x.buf.push(toString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_695F1130(x, cs) {\r\n    void (x.buf.push(cs.join('')));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_43A65C09(x, s) {\r\n    void (x.buf.push(toString(s)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendFormat_433E080(x, fmt, o) {\r\n    void (x.buf.push(format(fmt, o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendLine(x) {\r\n    void (x.buf.push(\"\\n\"));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendLine_Z721C83C5(x, s) {\r\n    void (x.buf.push(s));\r\n    void (x.buf.push(\"\\n\"));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__get_Length(x) {\r\n    let len = 0;\r\n    for (let i = x.buf.length - 1; i >= 0; i--) {\r\n        len = ((len + x.buf[i].length) | 0);\r\n    }\r\n    return len | 0;\r\n}\r\n\r\nexport function StringBuilder__ToString_Z37302880(x, firstIndex, length) {\r\n    return substring(toString(x), firstIndex, length);\r\n}\r\n\r\nexport function StringBuilder__Clear(x) {\r\n    clear(x.buf);\r\n    return x;\r\n}\r\n\r\n","import { Exception } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\n\r\nexport class SystemException extends Exception {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nexport function SystemException$reflection() {\r\n    return class_type(\"System.SystemException\", void 0, SystemException, class_type(\"System.Exception\"));\r\n}\r\n\r\nexport function SystemException_$ctor() {\r\n    return new SystemException();\r\n}\r\n\r\nexport class TimeoutException extends SystemException {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nexport function TimeoutException$reflection() {\r\n    return class_type(\"System.TimeoutException\", void 0, TimeoutException, SystemException$reflection());\r\n}\r\n\r\nexport function TimeoutException_$ctor() {\r\n    return new TimeoutException();\r\n}\r\n\r\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    var _a, _b;\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = (_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : (_b = cons === null || cons === void 0 ? void 0 : cons.name) !== null && _b !== void 0 ? _b : \"\";\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport function ensureErrorOrException(e) {\n    return isException(e) ? e : new Error(String(e));\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function disposeSafe(x) {\n    if (isDisposable(x)) {\n        x.Dispose();\n    }\n}\nexport function sameConstructor(x, y) {\n    var _a, _b;\n    return ((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === ((_b = Object.getPrototypeOf(y)) === null || _b === void 0 ? void 0 : _b.constructor);\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    var _a;\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    var _a;\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return ((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    var _a;\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return ((_a = Object.getPrototypeOf(x)) === null || _a === void 0 ? void 0 : _a.constructor) === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED = Symbol(\"curried\");\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    const uncurried = (...args) => {\n        let res = f;\n        for (let i = 0; i < arity; i++) {\n            res = res(args[i]);\n        }\n        return res;\n    };\n    uncurried[CURRIED] = f;\n    return uncurried;\n}\nfunction _curry(args, arity, f) {\n    return (arg) => arity === 1\n        ? f(...args.concat([arg]))\n        // Note it's important to generate a new args array every time\n        // because a partially applied function can be run multiple times\n        : _curry(args.concat([arg]), arity - 1, f);\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    else if (CURRIED in f) {\n        return f[CURRIED];\n    }\n    else {\n        return _curry([], arity, f);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED in f) {\n        f = f[CURRIED];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        return _curry(args, arity, f);\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","// Adapted from https://github.com/MikeMcl/big.js/blob/0f94dc9110d55c4f324a47ba6a2e832ce23ac589/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v6.0.3\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2020 Michael Mclaughlin\n *  https://github.com/MikeMcl/big.js/LICENCE.md\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\n */\nPE = 29, // 0 to 1000000\n/*\n * When true, an error will be thrown if a primitive number is passed to the Big constructor,\n * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\n * primitive number without a loss of precision.\n */\nSTRICT = false, // true or false\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            if (typeof n !== 'string') {\n                if (Big.strict === true) {\n                    throw TypeError(INVALID + 'number');\n                }\n                // Minus zero?\n                n = n === 0 && 1 / n < 0 ? '-0' : String(n);\n            }\n            parse(x, n);\n        }\n        // Retain a reference to this Big constructor.\n        // Shadow Big.prototype.constructor which points to Object.\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.strict = STRICT;\n    return Big;\n}\nfunction normalize(x) {\n    // x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    if (!NUMERIC.test(n)) {\n        throw Error(INVALID + 'number');\n    }\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // original version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP + 1, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\n *\n * x {Big} The Big to round.\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, sd, rm, more) {\n    var xc = x.c;\n    if (rm === UNDEFINED)\n        rm = Big.RM;\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\n        throw Error(INVALID_RM);\n    }\n    if (sd < 1) {\n        more =\n            rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 ||\n                rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));\n        xc.length = 1;\n        if (more) {\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n            x.e = x.e - sd + 1;\n            xc[0] = 1;\n        }\n        else {\n            // Zero.\n            xc[0] = x.e = 0;\n        }\n    }\n    else if (sd < xc.length) {\n        // xc[sd] is the digit after the digit that may be rounded up.\n        const isZero = xc.findIndex((xci, idx) => idx >= sd && xci > 0) < 0;\n        more =\n            rm === 1 && xc[sd] >= 5 ||\n                rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\n                    (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\n                rm === 3 && (more || !isZero);\n        // Remove any digits after the required precision.\n        xc.length = sd--;\n        // Round up?\n        if (more) {\n            // Rounding up may mean the previous digit has to be rounded up.\n            for (; ++xc[sd] > 9;) {\n                xc[sd] = 0;\n                if (!sd--) {\n                    ++x.e;\n                    xc.unshift(1);\n                }\n            }\n        }\n        // Remove trailing zeros.\n        for (sd = xc.length; !xc[--sd];)\n            xc.pop();\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n */\nfunction stringify(x, doExponential, isNonzero) {\n    var e = x.e, s = x.c.join(''), n = s.length;\n    // Exponential notation?\n    if (doExponential) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n) {\n            for (e -= n; e--;)\n                s += '0';\n        }\n        else if (e < n) {\n            s = s.slice(0, e) + '.' + s.slice(e);\n        }\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && isNonzero ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n */\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // original version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    // Divisor is zero?\n    if (!b[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    // Dividend is 0? Return +-0.\n    if (!a[0]) {\n        y.s = k;\n        y.c = [y.e = 0];\n        return y;\n    }\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1; // precision of the result\n    q.s = k;\n    k = p < 0 ? 0 : p;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n        p--;\n    }\n    // Round?\n    if (qi > p)\n        round(q, p, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return this.cmp(y) === 0;\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (yc[0]) {\n            y.s = -b;\n        }\n        else if (xc[0]) {\n            y = new Big(x);\n        }\n        else {\n            y.s = 1;\n        }\n        return y;\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var e, k, t, Big = this.constructor, x = new Big(this), y = new Big(y);\n    // Signs differ?\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (!yc[0]) {\n            if (xc[0]) {\n                y = new Big(x);\n            }\n            else {\n                y.s = x.s;\n            }\n        }\n        return y;\n    }\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (e = xe - ye) {\n        if (e > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            e = -e;\n            t = xc;\n        }\n        t.reverse();\n        for (; e--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    e = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (k = 0; e; xc[e] %= 10)\n        k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (k) {\n        xc.unshift(k);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (e = xc.length; xc[--e] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big('1'), one = new Big('1'), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n        throw Error(INVALID + 'exponent');\n    }\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.prec = function (sd, rm) {\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n        throw Error(INVALID + 'precision');\n    }\n    return round(new this.constructor(this), sd, rm);\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\n * using rounding mode rm, or Big.RM if rm is not specified.\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.round = function (dp, rm) {\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    return round(new this.constructor(this), dp + this.e + 1, rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big('0.5');\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0) {\n        throw Error(NAME + 'No square root');\n    }\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s + '');\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0]) {\n        y.c = [y.e = 0];\n        return y;\n    }\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = b;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toExponential = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), ++dp, rm);\n        for (; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, true, !!n);\n};\n/*\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), dp + x.e + 1, rm);\n        // x.e may have changed if the value is rounded up.\n        for (dp = dp + x.e + 1; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, false, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toJSON = P.toString = function () {\n    var x = this, Big = x.constructor;\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n};\n/*\n * Return the value of this Big as a primitve number.\n */\nP.toNumber = function () {\n    var n = Number(stringify(this, true, true));\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\n        throw Error(NAME + 'Imprecise conversion');\n    }\n    return n;\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * rounding mode rm, or Big.RM if rm is not specified.\n * Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toPrecision = function (sd, rm) {\n    var x = this, Big = x.constructor, n = x.c[0];\n    if (sd !== UNDEFINED) {\n        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n            throw Error(INVALID + 'precision');\n        }\n        x = round(new Big(x), sd, rm);\n        for (; x.c.length < sd;)\n            x.c.push(0);\n    }\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = function () {\n    var x = this, Big = x.constructor;\n    if (Big.strict === true) {\n        throw Error(NAME + 'valueOf disallowed');\n    }\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n};\n// Export\nexport var Big = _Big_();\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\nexport default Big;\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { textureHeight, textureWidth } from \"./Model.fs.js\";\nimport { comparePrimitives, min, createAtom } from \"./fable_modules/fable-library.3.7.14/Util.js\";\nimport { startAsPromise } from \"./fable_modules/fable-library.3.7.14/Async.js\";\nimport { init } from \"./CrossPlatform/Game.fs.js\";\nimport { initScene } from \"./Scene.fs.js\";\nimport { some } from \"./fable_modules/fable-library.3.7.14/Option.js\";\n\nexport const canvas = document.querySelector(\".game-canvas\");\n\nexport const loadingImage = (() => {\n    let returnVal = new Image(textureWidth, textureHeight);\n    returnVal.src = \"/assets/loadingScreen.png\";\n    return returnVal;\n})();\n\nexport let isShowingLoadingScreen = createAtom(true);\n\nexport function drawImage(_arg1) {\n    const context = canvas.getContext('2d');\n    context.imageSmoothingEnabled = false;\n    const aspectRatio = min(comparePrimitives, canvas.width / loadingImage.width, canvas.height / loadingImage.height);\n    const renderHeight = loadingImage.height * aspectRatio;\n    const renderWidth = loadingImage.width * aspectRatio;\n    const xPos = (canvas.width - renderWidth) / 2;\n    const yPos = (canvas.height - renderHeight) / 2;\n    context.drawImage(loadingImage, xPos, yPos, renderWidth, renderHeight);\n}\n\nloadingImage.onload = ((arg00$0040) => {\n    drawImage(arg00$0040);\n});\n\nexport function setCanvasSize(_arg1) {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n}\n\nwindow.onresize = ((_arg1) => {\n    setCanvasSize();\n    if (isShowingLoadingScreen()) {\n        drawImage();\n    }\n});\n\nsetCanvasSize();\n\nfunction controlStateFromKeyCode(keyCode) {\n    switch (keyCode) {\n        case \"ArrowUp\": {\n            return 1;\n        }\n        case \"ArrowLeft\": {\n            return 2;\n        }\n        case \"ArrowRight\": {\n            return 4;\n        }\n        case \"KeyQ\": {\n            return 8;\n        }\n        case \"KeyE\": {\n            return 16;\n        }\n        case \"ArrowDown\": {\n            return 32;\n        }\n        case \"ControlLeft\": {\n            return 64;\n        }\n        case \"Space\": {\n            return 128;\n        }\n        case \"Digit1\": {\n            return 256;\n        }\n        case \"Digit2\": {\n            return 512;\n        }\n        case \"Digit3\": {\n            return 1024;\n        }\n        case \"Digit4\": {\n            return 2048;\n        }\n        default: {\n            return 0;\n        }\n    }\n}\n\nexport const initialisationPromise = startAsPromise(init(1, () => initScene(canvas, void 0)));\n\ninitialisationPromise.then((tupledArg) => {\n    const controlStateHandler = tupledArg[1];\n    isShowingLoadingScreen(false, true);\n    let previousTimestamp = 0;\n    let currentGameState = tupledArg[2];\n    const wrappedGameLoop = (timestamp) => {\n        const timeInFrame = min(comparePrimitives, 1000 / 30, timestamp - previousTimestamp);\n        previousTimestamp = timestamp;\n        currentGameState = tupledArg[0](currentGameState)(timeInFrame * 1);\n        window.requestAnimationFrame(wrappedGameLoop);\n    };\n    window.onkeydown = ((ke) => {\n        if (!ke.repeat) {\n            const controlState = controlStateFromKeyCode(ke.code) | 0;\n            if (controlState !== 0) {\n                ke.preventDefault();\n                currentGameState = controlStateHandler(currentGameState)(controlState);\n            }\n        }\n    });\n    window.onkeyup = ((ke_1) => {\n        const controlState_1 = controlStateFromKeyCode(ke_1.code) | 0;\n        if (controlState_1 !== 0) {\n            ke_1.preventDefault();\n            currentGameState = controlStateHandler(currentGameState)(controlState_1);\n        }\n    });\n    window.requestAnimationFrame(wrappedGameLoop);\n}).catch((exn) => {\n    console.error(some(`Error initialising engine ${exn}`));\n});\n\n"],"names":[],"sourceRoot":""}